/* Generated code for Python module 'youtube_dl.swfinterp'
 * created by Nuitka version 0.6.8.4
 *
 * This code is in part copyright 2020 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The "_module_youtube_dl$swfinterp" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_youtube_dl$swfinterp;
PyDictObject *moduledict_youtube_dl$swfinterp;

/* The declarations of module constants used, if any. */
extern PyObject *const_int_pos_20;
static PyObject *const_str_digest_7f2812528cf59ccce640cfc63b33d0b9;
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain_dict;
extern PyObject *const_str_plain___name__;
static PyObject *const_str_plain_constants;
extern PyObject *const_str_plain_extract_class;
extern PyObject *const_dict_empty;
extern PyObject *const_str_plain_compat_str;
extern PyObject *const_int_pos_9;
extern PyObject *const_int_pos_161;
extern PyObject *const_str_plain_object;
static PyObject *const_int_pos_209;
static PyObject *const_bytes_chr_67;
static PyObject *const_int_pos_208;
extern PyObject *const_str_plain_max;
static PyObject *const_str_digest_5948f3a910ff88494c82184b913c3701;
extern PyObject *const_slice_int_pos_8_none_none;
static PyObject *const_str_digest_54608bc3db8b8899ddc5dce8e06f85a0;
static PyObject *const_str_plain_any;
extern PyObject *const_int_pos_39;
extern PyObject *const_int_pos_19;
extern PyObject *const_str_plain_class_name;
extern PyObject *const_str_plain_m;
extern PyObject *const_str_plain_compat_struct_unpack;
static PyObject *const_int_pos_213;
extern PyObject *const_int_pos_5;
static PyObject *const_str_plain_method_idxs;
static PyObject *const_dict_ac3d774bcf145ccba9eb73242f9fba02;
extern PyObject *const_str_plain_utils;
static PyObject *const_tuple_1bbc81052b7bfa96278da0c8df36d2e8_tuple;
extern PyObject *const_tuple_str_plain_params_tuple;
extern PyObject *const_int_pos_16;
static PyObject *const_tuple_str_plain_reader_str_plain_v_tuple;
extern PyObject *const_int_pos_32;
extern PyObject *const_str_plain___debug__;
static PyObject *const_str_plain_resfunc;
extern PyObject *const_str_angle_genexpr;
extern PyObject *const_int_pos_63;
extern PyObject *const_str_plain___bool__;
static PyObject *const_tuple_0851b5a3fac9b4fc24a295b2990c4aa4_tuple;
extern PyObject *const_str_plain_BytesIO;
static PyObject *const_str_plain_constant_ints;
extern PyObject *const_str_plain_decompress;
extern PyObject *const_int_pos_8;
static PyObject *const_str_digest_e8f09c79e27a39d5570e75535dc54fa7;
static PyObject *const_str_plain__u32;
static PyObject *const_str_plain_name_idx;
static PyObject *const_str_digest_969823bee3abc6add74ba05d5d1cb5b2;
extern PyObject *const_str_plain_reversed;
extern PyObject *const_str_plain_name;
extern PyObject *const_str_plain_zlib;
static PyObject *const_tuple_4ba31ba07b41fd04d82b171635c279e7_tuple;
extern PyObject *const_str_digest_11a7e09c00a35df5b21f6600c68e78d8;
static PyObject *const_str_plain_read_byte;
extern PyObject *const_str_plain_False;
extern PyObject *const_int_pos_4294967295;
static PyObject *const_str_plain__classes_by_name;
extern PyObject *const_str_digest_c075052d723d6707083e869a0e3659bb;
static PyObject *const_int_pos_4026531840;
extern PyObject *const_str_plain_pop;
extern PyObject *const_str_plain_buf;
extern PyObject *const_int_0;
extern PyObject *const_str_plain_code;
static PyObject *const_int_pos_211;
extern PyObject *const_tuple_str_plain_self_str_plain___class___tuple;
static PyObject *const_str_plain__AVMClass;
extern PyObject *const_list_str_empty_list;
extern PyObject *const_str_plain_extract_function;
static PyObject *const_str_digest_1c6f4415acabe04dd6ef1c6474ffe87d;
extern PyObject *const_str_plain_undefined;
static PyObject *const_str_plain_timer;
static PyObject *const_str_plain__c3;
static PyObject *const_int_pos_79;
static PyObject *const_str_digest_37252c1d1e74b93062a8486f7d3007e9;
static PyObject *const_tuple_7c7334bd2da53ad344aa78933039f24a_tuple;
extern PyObject *const_int_pos_36;
extern PyObject *const_int_pos_4;
static PyObject *const_tuple_17ee3e7f81f620d8e90d1e71bf0755eb_tuple;
static PyObject *const_tuple_dict_empty_none_tuple;
extern PyObject *const_str_plain_type;
extern PyObject *const_int_pos_94;
extern PyObject *const_slice_none_none_int_neg_1;
extern PyObject *const_str_plain___cached__;
static PyObject *const_str_plain_TIMER;
extern PyObject *const_tuple_none_tuple;
static PyObject *const_str_plain___hash__;
static PyObject *const_int_pos_102;
static PyObject *const_tuple_f8ae60790641829f54a3dd9f6fe63ce7_tuple;
extern PyObject *const_int_pos_1;
static PyObject *const_tuple_str_plain_reader_str_plain_slen_str_plain_resb_tuple;
extern PyObject *const_str_plain___nonzero__;
extern PyObject *const_str_digest_fcf040720b88d60da4ce975010c44a3a;
extern PyObject *const_str_plain___prepare__;
extern PyObject *const_int_pos_2147483648;
static PyObject *const_str_digest_db842b29d0ae3c730b4cfcd063285a89;
extern PyObject *const_int_pos_160;
static PyObject *const_str_plain__extract_tags;
static PyObject *const_int_pos_214;
extern PyObject *const_str_plain___repr__;
extern PyObject *const_int_pos_40;
extern PyObject *const_str_plain_ExtractorError;
static PyObject *const_str_plain_static_properties;
static PyObject *const_bytes_chr_255;
static PyObject *const_str_digest_e0b23cfba4466b5b6c567b94a099fc92;
extern PyObject *const_int_pos_73;
extern PyObject *const_str_plain_index;
extern PyObject *const_int_pos_149;
static PyObject *const_str_plain_code_reader;
extern PyObject *const_str_plain___file__;
static PyObject *const_str_plain_NEED_REST;
extern PyObject *const_str_plain_stack;
static PyObject *const_str_digest_9192069d2f89f52f179a3e58109e8bf3;
static PyObject *const_str_plain_reader;
extern PyObject *const_str_plain_seek;
static PyObject *const_str_digest_4fd465a1d245d08ca42071984d7117ab;
extern PyObject *const_str_plain_variables;
extern PyObject *const_int_pos_97;
extern PyObject *const_str_plain_read;
static PyObject *const_tuple_str_plain_coder_tuple;
extern PyObject *const_tuple_int_pos_1_tuple;
extern PyObject *const_int_pos_33;
extern PyObject *const_str_plain_reverse;
static PyObject *const_str_digest_7d97e33f11eb226411bae601871b3089;
extern PyObject *const_str_plain___orig_bases__;
extern PyObject *const_str_plain_slice;
static PyObject *const_str_digest_f047a88c631820751549f2d9896c20f9;
static PyObject *const_int_pos_115;
extern PyObject *const_str_plain___qualname__;
extern PyObject *const_str_plain_SWFInterpreter;
static PyObject *const_int_pos_38;
extern PyObject *const_str_plain_p;
extern PyObject *const_str_plain_value;
extern PyObject *const_str_plain_collections;
static PyObject *const_str_plain__ScopeDict;
static PyObject *const_str_plain_register_methods;
static PyObject *const_tuple_str_digest_7d97e33f11eb226411bae601871b3089_str_plain_String_tuple;
static PyObject *const_str_plain_coder;
static PyObject *const_str_digest_61a7515409d9ef2e62d465ba6dc00f37;
extern PyObject *const_int_pos_93;
static PyObject *const_str_digest_65b78e631e18ba3990c368f2943c095f;
static PyObject *const_int_pos_162;
static PyObject *const_tuple_int_pos_1_int_pos_2_int_pos_3_tuple;
static PyObject *const_str_plain__read_int;
extern PyObject *const_str_plain_decode;
extern PyObject *const_int_pos_74;
extern PyObject *const_str_plain___getitem__;
extern PyObject *const_slice_none_int_pos_1_none;
static PyObject *const_str_plain__read_bytes;
extern PyObject *const_str_plain_f;
static PyObject *const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple;
extern PyObject *const_slice_none_int_pos_3_none;
static PyObject *const_list_str_plain_NEED_ARGUMENTS_str_plain_NEED_REST_list;
extern PyObject *const_int_pos_15;
extern PyObject *const_int_pos_18;
static PyObject *const_str_plain__s32;
static PyObject *const_tuple_str_plain_self_str_plain_methods_tuple;
extern PyObject *const_str_plain_origin;
extern PyObject *const_str_plain_length;
static PyObject *const_str_plain_framesize_nbits;
extern PyObject *const_str_digest_75fd71b1edada749c2ef7ac810062295;
static PyObject *const_tuple_str_plain_count_str_plain_reader_str_plain_resb_tuple;
static PyObject *const_str_plain_ByteArrayClass;
extern PyObject *const_str_plain_namedtuple;
static PyObject *const_str_plain_vkind;
static PyObject *const_str_plain__u30;
static PyObject *const_str_digest_7dfbe030e10efea1824c35eabfc4ec7a;
extern PyObject *const_str_plain_v;
extern PyObject *const_int_pos_215;
extern PyObject *const_str_plain_file_contents;
extern PyObject *const_str_plain_io;
extern PyObject *const_str_plain_kind;
extern PyObject *const_int_pos_212;
static PyObject *const_int_pos_210;
extern PyObject *const_list_int_0_list;
static PyObject *const_bytes_digest_8b3725cbb233844b8bcfd45cd8939b08;
extern PyObject *const_str_plain___init__;
static PyObject *const_str_plain_addEventListener;
extern PyObject *const_str_plain_func_name;
static PyObject *const_str_digest_0d454f251b11c0758796a477e164899b;
extern PyObject *const_str_plain_has_location;
extern PyObject *const_str_plain_compat;
static PyObject *const_str_plain_parse_traits_info;
extern PyObject *const_str_empty;
static PyObject *const_str_plain_u30;
static PyObject *const_str_digest_9386cbf0909cc035dde799d9c5ec6244;
static PyObject *const_str_plain_function_idx;
extern PyObject *const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple;
static PyObject *const_int_pos_171;
static PyObject *const_tuple_str_plain_self_str_plain_avm_class_str_plain___class___tuple;
extern PyObject *const_str_plain_shift;
static PyObject *const_tuple_bytes_chr_0_int_pos_4_tuple;
static PyObject *const_str_plain_cinit_idx;
extern PyObject *const_int_neg_1;
static PyObject *const_tuple_368621c384c078edc79ff93814cda151_tuple;
static PyObject *const_str_plain_charCodeAt;
static PyObject *const_str_digest_c6ccceacb61480b9230ce3733fbc80d1;
extern PyObject *const_int_pos_17;
static PyObject *const_str_digest_f866782662681036ee7f565dea7c3611;
static PyObject *const_str_digest_87f8b45d724a0798dc3d51463493f085;
static PyObject *const_str_plain_TimerEvent;
static PyObject *const_str_digest_adbdf93c605f23183e482217a183dfa6;
extern PyObject *const_tuple_true_tuple;
extern PyObject *const_tuple_type_dict_tuple;
extern PyObject *const_str_plain_pos;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_plain__read_byte;
static PyObject *const_str_plain_metadata_count;
extern PyObject *const_str_plain_attrs;
static PyObject *const_str_plain_tag_len;
static PyObject *const_str_plain__s24;
static PyObject *const_str_digest_54cbf714d1a0ba7f222ccc9b83ba72dd;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_str_plain_float;
static PyObject *const_str_digest_41d033c8e0102b7fa4acde5361bcb9ba;
static PyObject *const_float_plus_nan;
static PyObject *const_tuple_str_plain_reader_str_plain_res_tuple;
static PyObject *const_str_plain_String;
static PyObject *const_str_plain__Undefined;
extern PyObject *const_int_pos_98;
static PyObject *const_str_plain_last_byte;
extern PyObject *const_int_pos_82;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_plain_append;
static PyObject *const_str_digest_1bf146c0adb9b85db5e8c86f20f4b311;
extern PyObject *const_int_pos_48;
extern PyObject *const_str_plain_tell;
static PyObject *const_str_plain_constant_uints;
static PyObject *const_str_plain_trait_name_idx;
static PyObject *const_str_plain_NEED_ARGUMENTS;
static PyObject *const_str_digest_ebf33df35ba2d9d1b3825c36bdb474e0;
static PyObject *const_str_plain_avm_class;
extern PyObject *const_str_plain_b;
static PyObject *const_dict_9fc60418b4a2bc93fcbad012e8f7c578;
extern PyObject *const_str_plain_split;
static PyObject *const_str_digest_c801fce4c68daf4609ac6d6b667069e7;
extern PyObject *const_int_pos_164;
static PyObject *const_str_plain_call_cinit;
static PyObject *const_str_plain__read_string;
extern PyObject *const_str_plain_list;
extern PyObject *const_int_pos_71;
static PyObject *const_str_digest_6155550e3996b01873ca9067ae12e1cc;
static PyObject *const_tuple_str_plain_reader_str_plain_resb_str_plain_res_tuple;
extern PyObject *const_str_plain_content;
extern PyObject *const_int_pos_72;
static PyObject *const_int_pos_104;
extern PyObject *const_int_pos_37;
static PyObject *const_tuple_ab75b3700d923195cced46bbcf43be0a_tuple;
extern PyObject *const_int_pos_133;
extern PyObject *const_str_plain_c;
static PyObject *const_str_plain_TimerClass;
static PyObject *const_str_plain_Method;
static PyObject *const_str_digest_151b07cf0606353e8be96c4eef43395e;
extern PyObject *const_list_none_list;
extern PyObject *const_str_plain___class__;
static PyObject *const_int_pos_168;
extern PyObject *const_str_plain__;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain___str__;
extern PyObject *const_str_plain_update;
static PyObject *const_str_plain_Timer;
static PyObject *const_str_plain_local_count;
static PyObject *const_str_digest_9a106de8a867c4f314789c7f75475ad4;
extern PyObject *const_str_plain_Number;
static PyObject *const_slice_int_pos_1_int_pos_3_none;
extern PyObject *const_str_plain_get;
static PyObject *const_tuple_str_plain_args_str_plain_code_reader_tuple;
static PyObject *const_tuple_str_plain___str_plain_stack_tuple;
static PyObject *const_str_plain__patched_functions;
static PyObject *const_str_plain_vindex;
static PyObject *const_tuple_str_plain_self_str_plain_avm_class_tuple;
extern PyObject *const_int_pos_192;
extern PyObject *const_str_plain_tag;
static PyObject *const_str_plain_methods;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_tuple_float_plus_nan_tuple;
extern PyObject *const_tuple_str_plain___class___tuple;
extern PyObject *const_str_plain_bs;
extern PyObject *const_tuple_false_tuple;
static PyObject *const_int_pos_42;
extern PyObject *const_str_angle_metaclass;
static PyObject *const_int_pos_147;
extern PyObject *const_str_plain_args;
static PyObject *const_str_plain__builtin_classes;
static PyObject *const_str_plain_method_names;
extern PyObject *const_str_plain_items;
static PyObject *const_str_digest_1eb6262f1e4295521a44ae7158db40a9;
extern PyObject *const_int_pos_128;
static PyObject *const_str_plain__all_methods;
extern PyObject *const_int_pos_6;
static PyObject *const_str_plain_tag_code;
extern PyObject *const_str_plain_join;
static PyObject *const_str_digest_4a6c0ebe6af711fff9c22fed4b3bb8a3;
static PyObject *const_str_digest_37faf075db7ea2b51d4f135bc484dff8;
static PyObject *const_int_pos_70;
extern PyObject *const_str_plain_res;
extern PyObject *const_int_pos_99;
static PyObject *const_int_pos_175;
static PyObject *const_slice_int_pos_2_int_pos_3_none;
static PyObject *const_str_plain_cinit;
static PyObject *const_tuple_59f2197dc0ee8b8fe8d52b20ce49f5b1_tuple;
extern PyObject *const_str_plain_int;
static PyObject *const_str_digest_87d4a5f1d26952268876d006cac28f93;
static PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_c_tuple;
static PyObject *const_tuple_6c05aaa47e53a80809688f08cb2a5bc1_tuple;
static PyObject *const_str_digest_cff5114d7a155ebf4931e4e34b122661;
static PyObject *const_str_plain_method_idx;
static PyObject *const_str_plain__AVMClass_Object;
static PyObject *const_str_digest_3fbae56d7f588ab8322deb4dfc663c6b;
static PyObject *const_str_plain_TimerEventClass;
static PyObject *const_str_plain_MethodInfo;
extern PyObject *const_tuple_str_plain_ExtractorError_tuple;
static PyObject *const_tuple_str_digest_7d97e33f11eb226411bae601871b3089_str_plain_Timer_tuple;
static PyObject *const_str_digest_57983dd117c728618568f1df1cc1fb65;
static PyObject *const_str_digest_673bc4fb5fea21bfd535d4d1a2315efb;
extern PyObject *const_tuple_int_pos_3_tuple;
extern PyObject *const_int_pos_96;
static PyObject *const_int_pos_130;
extern PyObject *const_str_plain_count;
static PyObject *const_str_digest_969c69e9fbc42cc6a8915b0b5d93fbb0;
static PyObject *const_str_digest_6902d3305bfc322b56c69792e0836667;
static PyObject *const_str_plain_resb;
extern PyObject *const_int_pos_21;
static PyObject *const_list_str_plain_code_str_plain_local_count_list;
static PyObject *const_str_digest_e914c4598dba29989ce6fd6b1ce4375d;
static PyObject *const_str_digest_13360774c84f0e82036177302531c5ec;
static PyObject *const_tuple_str_plain_compat_str_str_plain_compat_struct_unpack_tuple;
extern PyObject *const_str_angle_listcomp;
static PyObject *const_str_digest_ecc6053c70cf260634e6b29be28d3e9b;
extern PyObject *const_int_pos_66;
static PyObject *const_str_plain_StringClass;
extern PyObject *const_str_angle_lambda;
static PyObject *const_str_plain_framesize_len;
static PyObject *const_str_digest_5d357433e98a842107032ad0f0c28eea;
static PyObject *const_tuple_str_plain_self_str_plain_kind_tuple;
extern PyObject *const_str_plain_idx;
extern PyObject *const_tuple_type_object_tuple;
extern PyObject *const_int_pos_127;
static PyObject *const_int_pos_44;
extern PyObject *const_str_plain_unicode_literals;
extern PyObject *const_str_plain_params;
extern PyObject *const_xrange_0_5;
static PyObject *const_str_digest_e31a75d3fd3f3454d980a90ffbcf8a1c;
static PyObject *const_str_plain__Multiname;
static PyObject *const_str_digest_27d342e866ff044b7069b3c22c7351da;
extern PyObject *const_str_plain_deque;
static PyObject *const_str_plain_constant_strings;
static PyObject *const_str_plain_kind_full;
static PyObject *const_str_digest_f3ea5cba1ddd556fe712544611fa8f54;
static PyObject *const_tuple_33a97cf0ecd8f0fc6be1a96554b9a3da_tuple;
static PyObject *const_str_plain_ByteArray;
extern PyObject *const_int_pos_3;
extern PyObject *const_str_plain_self;
static PyObject *const_str_plain_method_pyfunctions;
static PyObject *const_str_plain_make_object;
static PyObject *const_str_digest_aa76b3aaccf16bd99cc11d45b4ccc7b0;
extern PyObject *const_int_pos_7;
static PyObject *const_str_plain_slen;
static PyObject *const_int_pos_86;
extern PyObject *const_int_pos_2;
extern PyObject *const_bytes_chr_0;
static PyObject *const_str_plain_multinames;
static PyObject *const_str_plain_patch_function;
static PyObject *const_tuple_str_plain_reader_str_plain_bs_str_plain_last_byte_tuple;
static PyObject *const_str_plain_header16;
static PyObject *module_filename_obj;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    const_str_digest_7f2812528cf59ccce640cfc63b33d0b9 = UNSTREAM_STRING_ASCII(&constant_bin[ 2328460 ], 23, 0);
    const_str_plain_constants = UNSTREAM_STRING_ASCII(&constant_bin[ 2328483 ], 9, 1);
    const_int_pos_209 = PyLong_FromUnsignedLong(209ul);
    const_bytes_chr_67 = UNSTREAM_BYTES(&constant_bin[ 288 ], 1);
    const_int_pos_208 = PyLong_FromUnsignedLong(208ul);
    const_str_digest_5948f3a910ff88494c82184b913c3701 = UNSTREAM_STRING_ASCII(&constant_bin[ 2328492 ], 19, 0);
    const_str_digest_54608bc3db8b8899ddc5dce8e06f85a0 = UNSTREAM_STRING_ASCII(&constant_bin[ 2328511 ], 2, 0);
    const_str_plain_any = UNSTREAM_STRING_ASCII(&constant_bin[ 12760 ], 3, 1);
    const_int_pos_213 = PyLong_FromUnsignedLong(213ul);
    const_str_plain_method_idxs = UNSTREAM_STRING_ASCII(&constant_bin[ 2328513 ], 11, 1);
    const_dict_ac3d774bcf145ccba9eb73242f9fba02 = PyMarshal_ReadObjectFromString((char *)&constant_bin[ 2328524 ], 102);
    const_tuple_1bbc81052b7bfa96278da0c8df36d2e8_tuple = PyTuple_New(6);
    const_str_plain_reader = UNSTREAM_STRING_ASCII(&constant_bin[ 815390 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_1bbc81052b7bfa96278da0c8df36d2e8_tuple, 0, const_str_plain_reader); Py_INCREF(const_str_plain_reader);
    PyTuple_SET_ITEM(const_tuple_1bbc81052b7bfa96278da0c8df36d2e8_tuple, 1, const_str_plain_res); Py_INCREF(const_str_plain_res);
    PyTuple_SET_ITEM(const_tuple_1bbc81052b7bfa96278da0c8df36d2e8_tuple, 2, const_str_plain_shift); Py_INCREF(const_str_plain_shift);
    PyTuple_SET_ITEM(const_tuple_1bbc81052b7bfa96278da0c8df36d2e8_tuple, 3, const_str_plain__); Py_INCREF(const_str_plain__);
    PyTuple_SET_ITEM(const_tuple_1bbc81052b7bfa96278da0c8df36d2e8_tuple, 4, const_str_plain_buf); Py_INCREF(const_str_plain_buf);
    PyTuple_SET_ITEM(const_tuple_1bbc81052b7bfa96278da0c8df36d2e8_tuple, 5, const_str_plain_b); Py_INCREF(const_str_plain_b);
    const_tuple_str_plain_reader_str_plain_v_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_v_tuple, 0, const_str_plain_reader); Py_INCREF(const_str_plain_reader);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_v_tuple, 1, const_str_plain_v); Py_INCREF(const_str_plain_v);
    const_str_plain_resfunc = UNSTREAM_STRING_ASCII(&constant_bin[ 2328626 ], 7, 1);
    const_tuple_0851b5a3fac9b4fc24a295b2990c4aa4_tuple = PyTuple_New(4);
    PyTuple_SET_ITEM(const_tuple_0851b5a3fac9b4fc24a295b2990c4aa4_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    const_str_plain_avm_class = UNSTREAM_STRING_ASCII(&constant_bin[ 2328633 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_0851b5a3fac9b4fc24a295b2990c4aa4_tuple, 1, const_str_plain_avm_class); Py_INCREF(const_str_plain_avm_class);
    PyTuple_SET_ITEM(const_tuple_0851b5a3fac9b4fc24a295b2990c4aa4_tuple, 2, const_str_plain_func_name); Py_INCREF(const_str_plain_func_name);
    PyTuple_SET_ITEM(const_tuple_0851b5a3fac9b4fc24a295b2990c4aa4_tuple, 3, const_str_plain_f); Py_INCREF(const_str_plain_f);
    const_str_plain_constant_ints = UNSTREAM_STRING_ASCII(&constant_bin[ 2328642 ], 13, 1);
    const_str_digest_e8f09c79e27a39d5570e75535dc54fa7 = UNSTREAM_STRING_ASCII(&constant_bin[ 2328655 ], 55, 0);
    const_str_plain__u32 = UNSTREAM_STRING_ASCII(&constant_bin[ 55742 ], 4, 1);
    const_str_plain_name_idx = UNSTREAM_STRING_ASCII(&constant_bin[ 2328710 ], 8, 1);
    const_str_digest_969823bee3abc6add74ba05d5d1cb5b2 = UNSTREAM_STRING_ASCII(&constant_bin[ 2328718 ], 18, 0);
    const_tuple_4ba31ba07b41fd04d82b171635c279e7_tuple = PyTuple_New(5);
    PyTuple_SET_ITEM(const_tuple_4ba31ba07b41fd04d82b171635c279e7_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_4ba31ba07b41fd04d82b171635c279e7_tuple, 1, const_str_plain_class_name); Py_INCREF(const_str_plain_class_name);
    const_str_plain_call_cinit = UNSTREAM_STRING_ASCII(&constant_bin[ 2328736 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_4ba31ba07b41fd04d82b171635c279e7_tuple, 2, const_str_plain_call_cinit); Py_INCREF(const_str_plain_call_cinit);
    PyTuple_SET_ITEM(const_tuple_4ba31ba07b41fd04d82b171635c279e7_tuple, 3, const_str_plain_res); Py_INCREF(const_str_plain_res);
    const_str_plain_cinit = UNSTREAM_STRING_ASCII(&constant_bin[ 2328741 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_4ba31ba07b41fd04d82b171635c279e7_tuple, 4, const_str_plain_cinit); Py_INCREF(const_str_plain_cinit);
    const_str_plain_read_byte = UNSTREAM_STRING_ASCII(&constant_bin[ 55489 ], 9, 1);
    const_str_plain__classes_by_name = UNSTREAM_STRING_ASCII(&constant_bin[ 2328746 ], 16, 1);
    const_int_pos_4026531840 = PyLong_FromUnsignedLong(4026531840ul);
    const_int_pos_211 = PyLong_FromUnsignedLong(211ul);
    const_str_plain__AVMClass = UNSTREAM_STRING_ASCII(&constant_bin[ 55393 ], 9, 1);
    const_str_digest_1c6f4415acabe04dd6ef1c6474ffe87d = UNSTREAM_STRING_ASCII(&constant_bin[ 2328762 ], 25, 0);
    const_str_plain_timer = UNSTREAM_STRING_ASCII(&constant_bin[ 714450 ], 5, 1);
    const_str_plain__c3 = UNSTREAM_STRING_ASCII(&constant_bin[ 2328787 ], 3, 1);
    const_int_pos_79 = PyLong_FromUnsignedLong(79ul);
    const_str_digest_37252c1d1e74b93062a8486f7d3007e9 = UNSTREAM_STRING_ASCII(&constant_bin[ 2328790 ], 48, 0);
    const_tuple_7c7334bd2da53ad344aa78933039f24a_tuple = PyTuple_New(4);
    PyTuple_SET_ITEM(const_tuple_7c7334bd2da53ad344aa78933039f24a_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_7c7334bd2da53ad344aa78933039f24a_tuple, 1, const_str_plain_name_idx); Py_INCREF(const_str_plain_name_idx);
    PyTuple_SET_ITEM(const_tuple_7c7334bd2da53ad344aa78933039f24a_tuple, 2, const_str_plain_name); Py_INCREF(const_str_plain_name);
    const_str_plain_static_properties = UNSTREAM_STRING_ASCII(&constant_bin[ 2328838 ], 17, 1);
    PyTuple_SET_ITEM(const_tuple_7c7334bd2da53ad344aa78933039f24a_tuple, 3, const_str_plain_static_properties); Py_INCREF(const_str_plain_static_properties);
    const_tuple_17ee3e7f81f620d8e90d1e71bf0755eb_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_17ee3e7f81f620d8e90d1e71bf0755eb_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7); Py_INCREF(const_str_digest_b9c4baf879ebd882d40843df3a4dead7);
    PyTuple_SET_ITEM(const_tuple_17ee3e7f81f620d8e90d1e71bf0755eb_tuple, 1, const_str_plain_name); Py_INCREF(const_str_plain_name);
    PyTuple_SET_ITEM(const_tuple_17ee3e7f81f620d8e90d1e71bf0755eb_tuple, 2, const_str_plain_idx); Py_INCREF(const_str_plain_idx);
    const_tuple_dict_empty_none_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_dict_empty_none_tuple, 0, const_dict_empty); Py_INCREF(const_dict_empty);
    PyTuple_SET_ITEM(const_tuple_dict_empty_none_tuple, 1, Py_None); Py_INCREF(Py_None);
    const_str_plain_TIMER = UNSTREAM_STRING_ASCII(&constant_bin[ 2328855 ], 5, 1);
    const_str_plain___hash__ = UNSTREAM_STRING_ASCII(&constant_bin[ 2328860 ], 8, 1);
    const_int_pos_102 = PyLong_FromUnsignedLong(102ul);
    const_tuple_f8ae60790641829f54a3dd9f6fe63ce7_tuple = PyMarshal_ReadObjectFromString((char *)&constant_bin[ 2328868 ], 593);
    const_tuple_str_plain_reader_str_plain_slen_str_plain_resb_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_slen_str_plain_resb_tuple, 0, const_str_plain_reader); Py_INCREF(const_str_plain_reader);
    const_str_plain_slen = UNSTREAM_STRING_ASCII(&constant_bin[ 2329461 ], 4, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_slen_str_plain_resb_tuple, 1, const_str_plain_slen); Py_INCREF(const_str_plain_slen);
    const_str_plain_resb = UNSTREAM_STRING_ASCII(&constant_bin[ 2329465 ], 4, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_slen_str_plain_resb_tuple, 2, const_str_plain_resb); Py_INCREF(const_str_plain_resb);
    const_str_digest_db842b29d0ae3c730b4cfcd063285a89 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329469 ], 18, 0);
    const_str_plain__extract_tags = UNSTREAM_STRING_ASCII(&constant_bin[ 55553 ], 13, 1);
    const_int_pos_214 = PyLong_FromUnsignedLong(214ul);
    const_bytes_chr_255 = UNSTREAM_BYTES(&constant_bin[ 61877 ], 1);
    const_str_digest_e0b23cfba4466b5b6c567b94a099fc92 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329487 ], 19, 0);
    const_str_plain_code_reader = UNSTREAM_STRING_ASCII(&constant_bin[ 2328906 ], 11, 1);
    const_str_plain_NEED_REST = UNSTREAM_STRING_ASCII(&constant_bin[ 2329506 ], 9, 1);
    const_str_digest_9192069d2f89f52f179a3e58109e8bf3 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329515 ], 66, 0);
    const_str_digest_4fd465a1d245d08ca42071984d7117ab = UNSTREAM_STRING_ASCII(&constant_bin[ 2329581 ], 18, 0);
    const_tuple_str_plain_coder_tuple = PyTuple_New(1);
    const_str_plain_coder = UNSTREAM_STRING_ASCII(&constant_bin[ 22255 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_coder_tuple, 0, const_str_plain_coder); Py_INCREF(const_str_plain_coder);
    const_str_digest_7d97e33f11eb226411bae601871b3089 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329599 ], 13, 0);
    const_str_digest_f047a88c631820751549f2d9896c20f9 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329612 ], 13, 0);
    const_int_pos_115 = PyLong_FromUnsignedLong(115ul);
    const_int_pos_38 = PyLong_FromUnsignedLong(38ul);
    const_str_plain__ScopeDict = UNSTREAM_STRING_ASCII(&constant_bin[ 55361 ], 10, 1);
    const_str_plain_register_methods = UNSTREAM_STRING_ASCII(&constant_bin[ 2329625 ], 16, 1);
    const_tuple_str_digest_7d97e33f11eb226411bae601871b3089_str_plain_String_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_digest_7d97e33f11eb226411bae601871b3089_str_plain_String_tuple, 0, const_str_digest_7d97e33f11eb226411bae601871b3089); Py_INCREF(const_str_digest_7d97e33f11eb226411bae601871b3089);
    const_str_plain_String = UNSTREAM_STRING_ASCII(&constant_bin[ 30 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_str_digest_7d97e33f11eb226411bae601871b3089_str_plain_String_tuple, 1, const_str_plain_String); Py_INCREF(const_str_plain_String);
    const_str_digest_61a7515409d9ef2e62d465ba6dc00f37 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329641 ], 98, 0);
    const_str_digest_65b78e631e18ba3990c368f2943c095f = UNSTREAM_STRING_ASCII(&constant_bin[ 2328790 ], 31, 0);
    const_int_pos_162 = PyLong_FromUnsignedLong(162ul);
    const_tuple_int_pos_1_int_pos_2_int_pos_3_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_int_pos_1_int_pos_2_int_pos_3_tuple, 0, const_int_pos_1); Py_INCREF(const_int_pos_1);
    PyTuple_SET_ITEM(const_tuple_int_pos_1_int_pos_2_int_pos_3_tuple, 1, const_int_pos_2); Py_INCREF(const_int_pos_2);
    PyTuple_SET_ITEM(const_tuple_int_pos_1_int_pos_2_int_pos_3_tuple, 2, const_int_pos_3); Py_INCREF(const_int_pos_3);
    const_str_plain__read_int = UNSTREAM_STRING_ASCII(&constant_bin[ 55431 ], 9, 1);
    const_str_plain__read_bytes = UNSTREAM_STRING_ASCII(&constant_bin[ 55488 ], 11, 1);
    const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple = PyTuple_New(8);
    PyTuple_SET_ITEM(const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple, 0, const_str_plain_file_contents); Py_INCREF(const_str_plain_file_contents);
    PyTuple_SET_ITEM(const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple, 1, const_str_plain_content); Py_INCREF(const_str_plain_content);
    const_str_plain_framesize_nbits = UNSTREAM_STRING_ASCII(&constant_bin[ 2329739 ], 15, 1);
    PyTuple_SET_ITEM(const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple, 2, const_str_plain_framesize_nbits); Py_INCREF(const_str_plain_framesize_nbits);
    const_str_plain_framesize_len = UNSTREAM_STRING_ASCII(&constant_bin[ 2329754 ], 13, 1);
    PyTuple_SET_ITEM(const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple, 3, const_str_plain_framesize_len); Py_INCREF(const_str_plain_framesize_len);
    PyTuple_SET_ITEM(const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple, 4, const_str_plain_pos); Py_INCREF(const_str_plain_pos);
    const_str_plain_header16 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329767 ], 8, 1);
    PyTuple_SET_ITEM(const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple, 5, const_str_plain_header16); Py_INCREF(const_str_plain_header16);
    const_str_plain_tag_code = UNSTREAM_STRING_ASCII(&constant_bin[ 2329775 ], 8, 1);
    PyTuple_SET_ITEM(const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple, 6, const_str_plain_tag_code); Py_INCREF(const_str_plain_tag_code);
    const_str_plain_tag_len = UNSTREAM_STRING_ASCII(&constant_bin[ 2329783 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple, 7, const_str_plain_tag_len); Py_INCREF(const_str_plain_tag_len);
    const_list_str_plain_NEED_ARGUMENTS_str_plain_NEED_REST_list = PyList_New(2);
    const_str_plain_NEED_ARGUMENTS = UNSTREAM_STRING_ASCII(&constant_bin[ 2329790 ], 14, 1);
    PyList_SET_ITEM(const_list_str_plain_NEED_ARGUMENTS_str_plain_NEED_REST_list, 0, const_str_plain_NEED_ARGUMENTS); Py_INCREF(const_str_plain_NEED_ARGUMENTS);
    PyList_SET_ITEM(const_list_str_plain_NEED_ARGUMENTS_str_plain_NEED_REST_list, 1, const_str_plain_NEED_REST); Py_INCREF(const_str_plain_NEED_REST);
    const_str_plain__s32 = UNSTREAM_STRING_ASCII(&constant_bin[ 55716 ], 4, 1);
    const_tuple_str_plain_self_str_plain_methods_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_methods_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    const_str_plain_methods = UNSTREAM_STRING_ASCII(&constant_bin[ 539022 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_methods_tuple, 1, const_str_plain_methods); Py_INCREF(const_str_plain_methods);
    const_tuple_str_plain_count_str_plain_reader_str_plain_resb_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_count_str_plain_reader_str_plain_resb_tuple, 0, const_str_plain_count); Py_INCREF(const_str_plain_count);
    PyTuple_SET_ITEM(const_tuple_str_plain_count_str_plain_reader_str_plain_resb_tuple, 1, const_str_plain_reader); Py_INCREF(const_str_plain_reader);
    PyTuple_SET_ITEM(const_tuple_str_plain_count_str_plain_reader_str_plain_resb_tuple, 2, const_str_plain_resb); Py_INCREF(const_str_plain_resb);
    const_str_plain_ByteArrayClass = UNSTREAM_STRING_ASCII(&constant_bin[ 55929 ], 14, 1);
    const_str_plain_vkind = UNSTREAM_STRING_ASCII(&constant_bin[ 2329804 ], 5, 1);
    const_str_plain__u30 = UNSTREAM_STRING_ASCII(&constant_bin[ 55462 ], 4, 1);
    const_str_digest_7dfbe030e10efea1824c35eabfc4ec7a = UNSTREAM_STRING_ASCII(&constant_bin[ 2329809 ], 5, 0);
    const_int_pos_210 = PyLong_FromUnsignedLong(210ul);
    const_bytes_digest_8b3725cbb233844b8bcfd45cd8939b08 = UNSTREAM_BYTES(&constant_bin[ 48195 ], 2);
    const_str_plain_addEventListener = UNSTREAM_STRING_ASCII(&constant_bin[ 2329814 ], 16, 1);
    const_str_digest_0d454f251b11c0758796a477e164899b = UNSTREAM_STRING_ASCII(&constant_bin[ 2329830 ], 19, 0);
    const_str_plain_parse_traits_info = UNSTREAM_STRING_ASCII(&constant_bin[ 2329231 ], 17, 1);
    const_str_plain_u30 = UNSTREAM_STRING_ASCII(&constant_bin[ 55463 ], 3, 1);
    const_str_digest_9386cbf0909cc035dde799d9c5ec6244 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329849 ], 28, 0);
    const_str_plain_function_idx = UNSTREAM_STRING_ASCII(&constant_bin[ 2329877 ], 12, 1);
    const_int_pos_171 = PyLong_FromUnsignedLong(171ul);
    const_tuple_str_plain_self_str_plain_avm_class_str_plain___class___tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_avm_class_str_plain___class___tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_avm_class_str_plain___class___tuple, 1, const_str_plain_avm_class); Py_INCREF(const_str_plain_avm_class);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_avm_class_str_plain___class___tuple, 2, const_str_plain___class__); Py_INCREF(const_str_plain___class__);
    const_tuple_bytes_chr_0_int_pos_4_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_bytes_chr_0_int_pos_4_tuple, 0, const_bytes_chr_0); Py_INCREF(const_bytes_chr_0);
    PyTuple_SET_ITEM(const_tuple_bytes_chr_0_int_pos_4_tuple, 1, const_int_pos_4); Py_INCREF(const_int_pos_4);
    const_str_plain_cinit_idx = UNSTREAM_STRING_ASCII(&constant_bin[ 2329889 ], 9, 1);
    const_tuple_368621c384c078edc79ff93814cda151_tuple = PyTuple_New(16);
    const_str_plain_trait_name_idx = UNSTREAM_STRING_ASCII(&constant_bin[ 2329898 ], 14, 1);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 0, const_str_plain_trait_name_idx); Py_INCREF(const_str_plain_trait_name_idx);
    const_str_plain_kind_full = UNSTREAM_STRING_ASCII(&constant_bin[ 2329912 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 1, const_str_plain_kind_full); Py_INCREF(const_str_plain_kind_full);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 2, const_str_plain_kind); Py_INCREF(const_str_plain_kind);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 3, const_str_plain_attrs); Py_INCREF(const_str_plain_attrs);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 4, const_str_plain_methods); Py_INCREF(const_str_plain_methods);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 5, const_str_plain_constants); Py_INCREF(const_str_plain_constants);
    const_str_plain_vindex = UNSTREAM_STRING_ASCII(&constant_bin[ 2329921 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 6, const_str_plain_vindex); Py_INCREF(const_str_plain_vindex);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 7, const_str_plain_vkind); Py_INCREF(const_str_plain_vkind);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 8, const_str_plain_value); Py_INCREF(const_str_plain_value);
    const_str_plain_method_idx = UNSTREAM_STRING_ASCII(&constant_bin[ 2328513 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 9, const_str_plain_method_idx); Py_INCREF(const_str_plain_method_idx);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 10, const_str_plain_function_idx); Py_INCREF(const_str_plain_function_idx);
    const_str_plain_metadata_count = UNSTREAM_STRING_ASCII(&constant_bin[ 2329203 ], 14, 1);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 11, const_str_plain_metadata_count); Py_INCREF(const_str_plain_metadata_count);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 12, const_str_plain__c3); Py_INCREF(const_str_plain__c3);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 13, const_str_plain_u30); Py_INCREF(const_str_plain_u30);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 14, const_str_plain_read_byte); Py_INCREF(const_str_plain_read_byte);
    PyTuple_SET_ITEM(const_tuple_368621c384c078edc79ff93814cda151_tuple, 15, const_str_plain_self); Py_INCREF(const_str_plain_self);
    const_str_plain_charCodeAt = UNSTREAM_STRING_ASCII(&constant_bin[ 2329927 ], 10, 1);
    const_str_digest_c6ccceacb61480b9230ce3733fbc80d1 = UNSTREAM_STRING_ASCII(&constant_bin[ 611465 ], 2, 0);
    const_str_digest_f866782662681036ee7f565dea7c3611 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329937 ], 21, 0);
    const_str_digest_87f8b45d724a0798dc3d51463493f085 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329958 ], 19, 0);
    const_str_plain_TimerEvent = UNSTREAM_STRING_ASCII(&constant_bin[ 55965 ], 10, 1);
    const_str_digest_adbdf93c605f23183e482217a183dfa6 = UNSTREAM_STRING_ASCII(&constant_bin[ 2329977 ], 21, 0);
    const_str_plain__read_byte = UNSTREAM_STRING_ASCII(&constant_bin[ 55488 ], 10, 1);
    const_str_plain__s24 = UNSTREAM_STRING_ASCII(&constant_bin[ 55903 ], 4, 1);
    const_str_digest_54cbf714d1a0ba7f222ccc9b83ba72dd = UNSTREAM_STRING_ASCII(&constant_bin[ 2329998 ], 25, 0);
    const_str_digest_41d033c8e0102b7fa4acde5361bcb9ba = UNSTREAM_STRING_ASCII(&constant_bin[ 2330023 ], 6, 0);
    const_float_plus_nan = UNSTREAM_FLOAT(&constant_bin[ 2330029 ]);
    const_tuple_str_plain_reader_str_plain_res_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_res_tuple, 0, const_str_plain_reader); Py_INCREF(const_str_plain_reader);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_res_tuple, 1, const_str_plain_res); Py_INCREF(const_str_plain_res);
    const_str_plain__Undefined = UNSTREAM_STRING_ASCII(&constant_bin[ 55833 ], 10, 1);
    const_str_plain_last_byte = UNSTREAM_STRING_ASCII(&constant_bin[ 2330037 ], 9, 1);
    const_str_digest_1bf146c0adb9b85db5e8c86f20f4b311 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330046 ], 41, 0);
    const_str_plain_constant_uints = UNSTREAM_STRING_ASCII(&constant_bin[ 2330087 ], 14, 1);
    const_str_digest_ebf33df35ba2d9d1b3825c36bdb474e0 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330101 ], 42, 0);
    const_dict_9fc60418b4a2bc93fcbad012e8f7c578 = _PyDict_NewPresized( 1 );
    PyDict_SetItem(const_dict_9fc60418b4a2bc93fcbad012e8f7c578, const_str_plain_TIMER, const_str_plain_timer);
    assert(PyDict_Size(const_dict_9fc60418b4a2bc93fcbad012e8f7c578) == 1);
    const_str_digest_c801fce4c68daf4609ac6d6b667069e7 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330143 ], 33, 0);
    const_str_plain__read_string = UNSTREAM_STRING_ASCII(&constant_bin[ 55588 ], 12, 1);
    const_str_digest_6155550e3996b01873ca9067ae12e1cc = UNSTREAM_STRING_ASCII(&constant_bin[ 2330176 ], 19, 0);
    const_tuple_str_plain_reader_str_plain_resb_str_plain_res_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_resb_str_plain_res_tuple, 0, const_str_plain_reader); Py_INCREF(const_str_plain_reader);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_resb_str_plain_res_tuple, 1, const_str_plain_resb); Py_INCREF(const_str_plain_resb);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_resb_str_plain_res_tuple, 2, const_str_plain_res); Py_INCREF(const_str_plain_res);
    const_int_pos_104 = PyLong_FromUnsignedLong(104ul);
    const_tuple_ab75b3700d923195cced46bbcf43be0a_tuple = PyTuple_New(6);
    PyTuple_SET_ITEM(const_tuple_ab75b3700d923195cced46bbcf43be0a_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_ab75b3700d923195cced46bbcf43be0a_tuple, 1, const_str_plain_avm_class); Py_INCREF(const_str_plain_avm_class);
    PyTuple_SET_ITEM(const_tuple_ab75b3700d923195cced46bbcf43be0a_tuple, 2, const_str_plain_func_name); Py_INCREF(const_str_plain_func_name);
    PyTuple_SET_ITEM(const_tuple_ab75b3700d923195cced46bbcf43be0a_tuple, 3, const_str_plain_p); Py_INCREF(const_str_plain_p);
    PyTuple_SET_ITEM(const_tuple_ab75b3700d923195cced46bbcf43be0a_tuple, 4, const_str_plain_m); Py_INCREF(const_str_plain_m);
    PyTuple_SET_ITEM(const_tuple_ab75b3700d923195cced46bbcf43be0a_tuple, 5, const_str_plain_resfunc); Py_INCREF(const_str_plain_resfunc);
    const_str_plain_TimerClass = UNSTREAM_STRING_ASCII(&constant_bin[ 55521 ], 10, 1);
    const_str_plain_Method = UNSTREAM_STRING_ASCII(&constant_bin[ 18826 ], 6, 1);
    const_str_digest_151b07cf0606353e8be96c4eef43395e = UNSTREAM_STRING_ASCII(&constant_bin[ 2330195 ], 29, 0);
    const_int_pos_168 = PyLong_FromUnsignedLong(168ul);
    const_str_plain_Timer = UNSTREAM_STRING_ASCII(&constant_bin[ 55521 ], 5, 1);
    const_str_plain_local_count = UNSTREAM_STRING_ASCII(&constant_bin[ 2329411 ], 11, 1);
    const_str_digest_9a106de8a867c4f314789c7f75475ad4 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330224 ], 50, 0);
    const_slice_int_pos_1_int_pos_3_none = PySlice_New(const_int_pos_1, const_int_pos_3, Py_None);
    const_tuple_str_plain_args_str_plain_code_reader_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_args_str_plain_code_reader_tuple, 0, const_str_plain_args); Py_INCREF(const_str_plain_args);
    PyTuple_SET_ITEM(const_tuple_str_plain_args_str_plain_code_reader_tuple, 1, const_str_plain_code_reader); Py_INCREF(const_str_plain_code_reader);
    const_tuple_str_plain___str_plain_stack_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain___str_plain_stack_tuple, 0, const_str_plain__); Py_INCREF(const_str_plain__);
    PyTuple_SET_ITEM(const_tuple_str_plain___str_plain_stack_tuple, 1, const_str_plain_stack); Py_INCREF(const_str_plain_stack);
    const_str_plain__patched_functions = UNSTREAM_STRING_ASCII(&constant_bin[ 2330274 ], 18, 1);
    const_tuple_str_plain_self_str_plain_avm_class_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_avm_class_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_avm_class_tuple, 1, const_str_plain_avm_class); Py_INCREF(const_str_plain_avm_class);
    const_tuple_float_plus_nan_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_float_plus_nan_tuple, 0, const_float_plus_nan); Py_INCREF(const_float_plus_nan);
    const_int_pos_42 = PyLong_FromUnsignedLong(42ul);
    const_int_pos_147 = PyLong_FromUnsignedLong(147ul);
    const_str_plain__builtin_classes = UNSTREAM_STRING_ASCII(&constant_bin[ 55865 ], 16, 1);
    const_str_plain_method_names = UNSTREAM_STRING_ASCII(&constant_bin[ 2330292 ], 12, 1);
    const_str_digest_1eb6262f1e4295521a44ae7158db40a9 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330304 ], 29, 0);
    const_str_plain__all_methods = UNSTREAM_STRING_ASCII(&constant_bin[ 2330333 ], 12, 1);
    const_str_digest_4a6c0ebe6af711fff9c22fed4b3bb8a3 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330345 ], 36, 0);
    const_str_digest_37faf075db7ea2b51d4f135bc484dff8 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330381 ], 19, 0);
    const_int_pos_70 = PyLong_FromUnsignedLong(70ul);
    const_int_pos_175 = PyLong_FromUnsignedLong(175ul);
    const_slice_int_pos_2_int_pos_3_none = PySlice_New(const_int_pos_2, const_int_pos_3, Py_None);
    const_tuple_59f2197dc0ee8b8fe8d52b20ce49f5b1_tuple = PyMarshal_ReadObjectFromString((char *)&constant_bin[ 2330400 ], 213);
    const_str_digest_87d4a5f1d26952268876d006cac28f93 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330613 ], 25, 0);
    const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_c_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_c_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7); Py_INCREF(const_str_digest_b9c4baf879ebd882d40843df3a4dead7);
    PyTuple_SET_ITEM(const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_c_tuple, 1, const_str_plain_c); Py_INCREF(const_str_plain_c);
    const_tuple_6c05aaa47e53a80809688f08cb2a5bc1_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_6c05aaa47e53a80809688f08cb2a5bc1_tuple, 0, const_str_digest_7d97e33f11eb226411bae601871b3089); Py_INCREF(const_str_digest_7d97e33f11eb226411bae601871b3089);
    const_str_plain_ByteArray = UNSTREAM_STRING_ASCII(&constant_bin[ 55929 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_6c05aaa47e53a80809688f08cb2a5bc1_tuple, 1, const_str_plain_ByteArray); Py_INCREF(const_str_plain_ByteArray);
    const_str_digest_cff5114d7a155ebf4931e4e34b122661 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330638 ], 29, 0);
    const_str_plain__AVMClass_Object = UNSTREAM_STRING_ASCII(&constant_bin[ 55393 ], 16, 1);
    const_str_digest_3fbae56d7f588ab8322deb4dfc663c6b = UNSTREAM_STRING_ASCII(&constant_bin[ 2330667 ], 18, 0);
    const_str_plain_TimerEventClass = UNSTREAM_STRING_ASCII(&constant_bin[ 55965 ], 15, 1);
    const_str_plain_MethodInfo = UNSTREAM_STRING_ASCII(&constant_bin[ 2329122 ], 10, 1);
    const_tuple_str_digest_7d97e33f11eb226411bae601871b3089_str_plain_Timer_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_digest_7d97e33f11eb226411bae601871b3089_str_plain_Timer_tuple, 0, const_str_digest_7d97e33f11eb226411bae601871b3089); Py_INCREF(const_str_digest_7d97e33f11eb226411bae601871b3089);
    PyTuple_SET_ITEM(const_tuple_str_digest_7d97e33f11eb226411bae601871b3089_str_plain_Timer_tuple, 1, const_str_plain_Timer); Py_INCREF(const_str_plain_Timer);
    const_str_digest_57983dd117c728618568f1df1cc1fb65 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330685 ], 26, 0);
    const_str_digest_673bc4fb5fea21bfd535d4d1a2315efb = UNSTREAM_STRING_ASCII(&constant_bin[ 2330711 ], 45, 0);
    const_int_pos_130 = PyLong_FromUnsignedLong(130ul);
    const_str_digest_969c69e9fbc42cc6a8915b0b5d93fbb0 = UNSTREAM_STRING_ASCII(&constant_bin[ 1334347 ], 2, 0);
    const_str_digest_6902d3305bfc322b56c69792e0836667 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330756 ], 20, 0);
    const_list_str_plain_code_str_plain_local_count_list = PyList_New(2);
    PyList_SET_ITEM(const_list_str_plain_code_str_plain_local_count_list, 0, const_str_plain_code); Py_INCREF(const_str_plain_code);
    PyList_SET_ITEM(const_list_str_plain_code_str_plain_local_count_list, 1, const_str_plain_local_count); Py_INCREF(const_str_plain_local_count);
    const_str_digest_e914c4598dba29989ce6fd6b1ce4375d = UNSTREAM_STRING_ASCII(&constant_bin[ 2330776 ], 2, 0);
    const_str_digest_13360774c84f0e82036177302531c5ec = UNSTREAM_STRING_ASCII(&constant_bin[ 2330778 ], 29, 0);
    const_tuple_str_plain_compat_str_str_plain_compat_struct_unpack_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_compat_str_str_plain_compat_struct_unpack_tuple, 0, const_str_plain_compat_str); Py_INCREF(const_str_plain_compat_str);
    PyTuple_SET_ITEM(const_tuple_str_plain_compat_str_str_plain_compat_struct_unpack_tuple, 1, const_str_plain_compat_struct_unpack); Py_INCREF(const_str_plain_compat_struct_unpack);
    const_str_digest_ecc6053c70cf260634e6b29be28d3e9b = UNSTREAM_STRING_ASCII(&constant_bin[ 2330807 ], 26, 0);
    const_str_plain_StringClass = UNSTREAM_STRING_ASCII(&constant_bin[ 55800 ], 11, 1);
    const_str_digest_5d357433e98a842107032ad0f0c28eea = UNSTREAM_STRING_ASCII(&constant_bin[ 2330833 ], 13, 0);
    const_tuple_str_plain_self_str_plain_kind_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_kind_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_kind_tuple, 1, const_str_plain_kind); Py_INCREF(const_str_plain_kind);
    const_int_pos_44 = PyLong_FromUnsignedLong(44ul);
    const_str_digest_e31a75d3fd3f3454d980a90ffbcf8a1c = UNSTREAM_STRING_ASCII(&constant_bin[ 2330846 ], 25, 0);
    const_str_plain__Multiname = UNSTREAM_STRING_ASCII(&constant_bin[ 55622 ], 10, 1);
    const_str_digest_27d342e866ff044b7069b3c22c7351da = UNSTREAM_STRING_ASCII(&constant_bin[ 2330871 ], 22, 0);
    const_str_plain_constant_strings = UNSTREAM_STRING_ASCII(&constant_bin[ 2330893 ], 16, 1);
    const_str_digest_f3ea5cba1ddd556fe712544611fa8f54 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330909 ], 25, 0);
    const_tuple_33a97cf0ecd8f0fc6be1a96554b9a3da_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_33a97cf0ecd8f0fc6be1a96554b9a3da_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7); Py_INCREF(const_str_digest_b9c4baf879ebd882d40843df3a4dead7);
    PyTuple_SET_ITEM(const_tuple_33a97cf0ecd8f0fc6be1a96554b9a3da_tuple, 1, const_str_plain_tag_code); Py_INCREF(const_str_plain_tag_code);
    PyTuple_SET_ITEM(const_tuple_33a97cf0ecd8f0fc6be1a96554b9a3da_tuple, 2, const_str_plain_tag); Py_INCREF(const_str_plain_tag);
    const_str_plain_method_pyfunctions = UNSTREAM_STRING_ASCII(&constant_bin[ 2330934 ], 18, 1);
    const_str_plain_make_object = UNSTREAM_STRING_ASCII(&constant_bin[ 2329987 ], 11, 1);
    const_str_digest_aa76b3aaccf16bd99cc11d45b4ccc7b0 = UNSTREAM_STRING_ASCII(&constant_bin[ 2330952 ], 41, 0);
    const_int_pos_86 = PyLong_FromUnsignedLong(86ul);
    const_str_plain_multinames = UNSTREAM_STRING_ASCII(&constant_bin[ 2330993 ], 10, 1);
    const_str_plain_patch_function = UNSTREAM_STRING_ASCII(&constant_bin[ 2330319 ], 14, 1);
    const_tuple_str_plain_reader_str_plain_bs_str_plain_last_byte_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_bs_str_plain_last_byte_tuple, 0, const_str_plain_reader); Py_INCREF(const_str_plain_reader);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_bs_str_plain_last_byte_tuple, 1, const_str_plain_bs); Py_INCREF(const_str_plain_bs);
    PyTuple_SET_ITEM(const_tuple_str_plain_reader_str_plain_bs_str_plain_last_byte_tuple, 2, const_str_plain_last_byte); Py_INCREF(const_str_plain_last_byte);

    constants_created = true;
}

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_youtube_dl$swfinterp(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_29bd29073135328bd75c4e975d16d1d9;
static PyCodeObject *codeobj_b5a0d2ca835660bde4824ba684a89039;
static PyCodeObject *codeobj_95c32b0d132eb5385c712b92df1b5d75;
static PyCodeObject *codeobj_c7571fbbe7d43be0d587eec3e1f09356;
static PyCodeObject *codeobj_72a450eca9e5b990e6a49ab3df13f44f;
static PyCodeObject *codeobj_8cb613d3586e0801204bbaf0144128ff;
static PyCodeObject *codeobj_afeea3dcc9e786e32fc3deed8cc5590e;
static PyCodeObject *codeobj_0e13d059172952bedfbb4183cc8b1865;
static PyCodeObject *codeobj_fcb5f0341f85ccabb31f727618f4264b;
static PyCodeObject *codeobj_119f65c96be4992d383ac7faa009955e;
static PyCodeObject *codeobj_61831b29f7fc8b7d2b3ed8cf1926e0ff;
static PyCodeObject *codeobj_1701a9b8a630eb79a249432dfe8bcecc;
static PyCodeObject *codeobj_323d515b83a7c693618e6a85ceb51b0d;
static PyCodeObject *codeobj_97012d2548b39c788b5d47e2b83539e8;
static PyCodeObject *codeobj_bbb0887acc5c1e2b70b29edf31263a1f;
static PyCodeObject *codeobj_3b85a0a43062564d9409c85d24a80370;
static PyCodeObject *codeobj_92487a9911e920d214082b8d83df448b;
static PyCodeObject *codeobj_a14a632887d3cffbe1469c4ece0d1ec5;
static PyCodeObject *codeobj_c98b5e991fbc2bc11c8cd0b5d23ffab5;
static PyCodeObject *codeobj_603c721a23b126aa9a00b0e281a7cb3c;
static PyCodeObject *codeobj_6d759b5b3ee8116c519c7e999c235f17;
static PyCodeObject *codeobj_ac278f6d269a2be601e0e20769453c1a;
static PyCodeObject *codeobj_2be2265372af409d941aee637dfa7804;
static PyCodeObject *codeobj_9eae021c7fa04ec2da34d9f5baaefdd2;
static PyCodeObject *codeobj_dedd68ecc7475a0dbf5f5f2b8ec3ca28;
static PyCodeObject *codeobj_283805eeeb827293beecfdc3bfc113c9;
static PyCodeObject *codeobj_157ed9a9f582adf0edee1a09f3f32d3f;
static PyCodeObject *codeobj_364e3640986744e9c5fd6572b2388037;
static PyCodeObject *codeobj_a65444fc7d9e6d4ae61241a30298b3f5;
static PyCodeObject *codeobj_c2a959eba4f1bd262e26d4cdbe370e49;
static PyCodeObject *codeobj_bc9efcd56f12620920108218e80bd4c2;
static PyCodeObject *codeobj_1c6f75d6156448f36f16bdb60cfc88ec;
static PyCodeObject *codeobj_041e63b13dfb92036d580a4248e1d665;
static PyCodeObject *codeobj_6479d36875699dd5471e32bc922c77b9;
static PyCodeObject *codeobj_d33aa8da76e0ef79382c0e2e3c781477;
static PyCodeObject *codeobj_8ffd3619d4ffec31ba95b1f15d50bbce;
static PyCodeObject *codeobj_e90da14c7bbe6b419d38b01c027f9ba2;
static PyCodeObject *codeobj_d1d003eb5581bda2b55347cf9afb4f57;
static PyCodeObject *codeobj_f4df11dcdb4179ef241b09fa674aa7e0;
static PyCodeObject *codeobj_79ca84cd05e5d6635637a63a34e8c213;
static PyCodeObject *codeobj_470f2459f8b202e458aae3f5b91790b9;
static PyCodeObject *codeobj_0d60609dbce7a262f5beaf5225aa7433;
static PyCodeObject *codeobj_f73bef25feb220f5910559d7a7c03361;
static PyCodeObject *codeobj_b18b668a85d56a6d033f7548ea794744;
static PyCodeObject *codeobj_7737ff162a8fc8e608c9e8f0a1485cf4;
static PyCodeObject *codeobj_682c55a4955c40e53523f5967dba0e18;
static PyCodeObject *codeobj_c7f299452f55c1d66752a520d5989713;
static PyCodeObject *codeobj_d2364f45a352fed77b77f90ee833242e;
static PyCodeObject *codeobj_6743d1541c747c72d49d9c3fe26785ae;
static PyCodeObject *codeobj_2bea7bcff96360bb620189591cb6fbbc;

static void createModuleCodeObjects(void) {
    module_filename_obj = const_str_digest_61a7515409d9ef2e62d465ba6dc00f37;
    codeobj_29bd29073135328bd75c4e975d16d1d9 = MAKE_CODEOBJECT(module_filename_obj, 372, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_angle_genexpr, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_c_tuple, 1, 0, 0);
    codeobj_b5a0d2ca835660bde4824ba684a89039 = MAKE_CODEOBJECT(module_filename_obj, 88, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_angle_genexpr, const_tuple_17ee3e7f81f620d8e90d1e71bf0755eb_tuple, 1, 0, 0);
    codeobj_95c32b0d132eb5385c712b92df1b5d75 = MAKE_CODEOBJECT(module_filename_obj, 190, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_angle_genexpr, const_tuple_33a97cf0ecd8f0fc6be1a96554b9a3da_tuple, 1, 0, 0);
    codeobj_c7571fbbe7d43be0d587eec3e1f09356 = MAKE_CODEOBJECT(module_filename_obj, 199, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_FUTURE_UNICODE_LITERALS, const_str_angle_lambda, const_tuple_str_plain_args_str_plain_code_reader_tuple, 0, 0, 0);
    codeobj_72a450eca9e5b990e6a49ab3df13f44f = MAKE_CODEOBJECT(module_filename_obj, 200, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_FUTURE_UNICODE_LITERALS, const_str_angle_lambda, const_tuple_str_plain_args_str_plain_code_reader_tuple, 0, 0, 0);
    codeobj_8cb613d3586e0801204bbaf0144128ff = MAKE_CODEOBJECT(module_filename_obj, 201, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_FUTURE_UNICODE_LITERALS, const_str_angle_lambda, const_tuple_str_plain_args_str_plain_code_reader_tuple, 0, 0, 0);
    codeobj_afeea3dcc9e786e32fc3deed8cc5590e = MAKE_CODEOBJECT(module_filename_obj, 202, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_FUTURE_UNICODE_LITERALS, const_str_angle_lambda, const_tuple_str_plain_args_str_plain_code_reader_tuple, 0, 0, 0);
    codeobj_0e13d059172952bedfbb4183cc8b1865 = MAKE_CODEOBJECT(module_filename_obj, 203, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_FUTURE_UNICODE_LITERALS, const_str_angle_lambda, const_tuple_str_plain_args_str_plain_code_reader_tuple, 0, 0, 0);
    codeobj_fcb5f0341f85ccabb31f727618f4264b = MAKE_CODEOBJECT(module_filename_obj, 454, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_UNICODE_LITERALS, const_str_angle_lambda, const_tuple_str_plain_coder_tuple, 0, 0, 0);
    codeobj_119f65c96be4992d383ac7faa009955e = MAKE_CODEOBJECT(module_filename_obj, 455, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_UNICODE_LITERALS, const_str_angle_lambda, const_tuple_str_plain_coder_tuple, 0, 0, 0);
    codeobj_61831b29f7fc8b7d2b3ed8cf1926e0ff = MAKE_CODEOBJECT(module_filename_obj, 188, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_angle_lambda, const_tuple_str_plain_params_tuple, 1, 0, 0);
    codeobj_1701a9b8a630eb79a249432dfe8bcecc = MAKE_CODEOBJECT(module_filename_obj, 524, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_angle_listcomp, const_tuple_str_plain___str_plain_stack_tuple, 1, 0, 0);
    codeobj_323d515b83a7c693618e6a85ceb51b0d = MAKE_CODEOBJECT(module_filename_obj, 533, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_angle_listcomp, const_tuple_str_plain___str_plain_stack_tuple, 1, 0, 0);
    codeobj_97012d2548b39c788b5d47e2b83539e8 = MAKE_CODEOBJECT(module_filename_obj, 612, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_angle_listcomp, const_tuple_str_plain___str_plain_stack_tuple, 1, 0, 0);
    codeobj_bbb0887acc5c1e2b70b29edf31263a1f = MAKE_CODEOBJECT(module_filename_obj, 618, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_angle_listcomp, const_tuple_str_plain___str_plain_stack_tuple, 1, 0, 0);
    codeobj_3b85a0a43062564d9409c85d24a80370 = MAKE_CODEOBJECT(module_filename_obj, 632, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_angle_listcomp, const_tuple_str_plain___str_plain_stack_tuple, 1, 0, 0);
    codeobj_92487a9911e920d214082b8d83df448b = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_digest_13360774c84f0e82036177302531c5ec, const_tuple_empty, 0, 0, 0);
    codeobj_a14a632887d3cffbe1469c4ece0d1ec5 = MAKE_CODEOBJECT(module_filename_obj, 185, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain_SWFInterpreter, const_tuple_str_plain___class___tuple, 0, 0, 0);
    codeobj_c98b5e991fbc2bc11c8cd0b5d23ffab5 = MAKE_CODEOBJECT(module_filename_obj, 66, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__AVMClass, const_tuple_str_plain___class___tuple, 0, 0, 0);
    codeobj_603c721a23b126aa9a00b0e281a7cb3c = MAKE_CODEOBJECT(module_filename_obj, 47, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__AVMClass_Object, const_tuple_str_plain___class___tuple, 0, 0, 0);
    codeobj_6d759b5b3ee8116c519c7e999c235f17 = MAKE_CODEOBJECT(module_filename_obj, 92, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__Multiname, const_tuple_str_plain___class___tuple, 0, 0, 0);
    codeobj_ac278f6d269a2be601e0e20769453c1a = MAKE_CODEOBJECT(module_filename_obj, 55, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__ScopeDict, const_tuple_str_plain___class___tuple, 0, 0, 0);
    codeobj_2be2265372af409d941aee637dfa7804 = MAKE_CODEOBJECT(module_filename_obj, 169, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__Undefined, const_tuple_str_plain___class___tuple, 0, 0, 0);
    codeobj_9eae021c7fa04ec2da34d9f5baaefdd2 = MAKE_CODEOBJECT(module_filename_obj, 170, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain___bool__, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_dedd68ecc7475a0dbf5f5f2b8ec3ca28 = MAKE_CODEOBJECT(module_filename_obj, 174, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain___hash__, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_283805eeeb827293beecfdc3bfc113c9 = MAKE_CODEOBJECT(module_filename_obj, 48, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain___init__, const_tuple_str_plain_self_str_plain_avm_class_tuple, 2, 0, 0);
    codeobj_157ed9a9f582adf0edee1a09f3f32d3f = MAKE_CODEOBJECT(module_filename_obj, 56, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_UNICODE_LITERALS, const_str_plain___init__, const_tuple_str_plain_self_str_plain_avm_class_str_plain___class___tuple, 2, 0, 0);
    codeobj_364e3640986744e9c5fd6572b2388037 = MAKE_CODEOBJECT(module_filename_obj, 186, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain___init__, const_tuple_f8ae60790641829f54a3dd9f6fe63ce7_tuple, 2, 0, 0);
    codeobj_a65444fc7d9e6d4ae61241a30298b3f5 = MAKE_CODEOBJECT(module_filename_obj, 93, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain___init__, const_tuple_str_plain_self_str_plain_kind_tuple, 2, 0, 0);
    codeobj_c2a959eba4f1bd262e26d4cdbe370e49 = MAKE_CODEOBJECT(module_filename_obj, 67, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain___init__, const_tuple_7c7334bd2da53ad344aa78933039f24a_tuple, 4, 0, 0);
    codeobj_bc9efcd56f12620920108218e80bd4c2 = MAKE_CODEOBJECT(module_filename_obj, 51, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain___repr__, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_1c6f75d6156448f36f16bdb60cfc88ec = MAKE_CODEOBJECT(module_filename_obj, 82, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain___repr__, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_041e63b13dfb92036d580a4248e1d665 = MAKE_CODEOBJECT(module_filename_obj, 96, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain___repr__, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_6479d36875699dd5471e32bc922c77b9 = MAKE_CODEOBJECT(module_filename_obj, 60, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_UNICODE_LITERALS, const_str_plain___repr__, const_tuple_str_plain_self_str_plain___class___tuple, 1, 0, 0);
    codeobj_d33aa8da76e0ef79382c0e2e3c781477 = MAKE_CODEOBJECT(module_filename_obj, 177, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain___str__, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_8ffd3619d4ffec31ba95b1f15d50bbce = MAKE_CODEOBJECT(module_filename_obj, 16, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__extract_tags, const_tuple_d1f0ff2cbc0186f88e16c22ca9662477_tuple, 1, 0, 0);
    codeobj_e90da14c7bbe6b419d38b01c027f9ba2 = MAKE_CODEOBJECT(module_filename_obj, 151, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__read_byte, const_tuple_str_plain_reader_str_plain_resb_str_plain_res_tuple, 1, 0, 0);
    codeobj_d1d003eb5581bda2b55347cf9afb4f57 = MAKE_CODEOBJECT(module_filename_obj, 144, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__read_bytes, const_tuple_str_plain_count_str_plain_reader_str_plain_resb_tuple, 2, 0, 0);
    codeobj_f4df11dcdb4179ef241b09fa674aa7e0 = MAKE_CODEOBJECT(module_filename_obj, 100, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__read_int, const_tuple_1bbc81052b7bfa96278da0c8df36d2e8_tuple, 1, 0, 0);
    codeobj_79ca84cd05e5d6635637a63a34e8c213 = MAKE_CODEOBJECT(module_filename_obj, 137, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__read_string, const_tuple_str_plain_reader_str_plain_slen_str_plain_resb_tuple, 1, 0, 0);
    codeobj_470f2459f8b202e458aae3f5b91790b9 = MAKE_CODEOBJECT(module_filename_obj, 130, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__s24, const_tuple_str_plain_reader_str_plain_bs_str_plain_last_byte_tuple, 1, 0, 0);
    codeobj_0d60609dbce7a262f5beaf5225aa7433 = MAKE_CODEOBJECT(module_filename_obj, 123, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__s32, const_tuple_str_plain_reader_str_plain_v_tuple, 1, 0, 0);
    codeobj_f73bef25feb220f5910559d7a7c03361 = MAKE_CODEOBJECT(module_filename_obj, 114, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain__u30, const_tuple_str_plain_reader_str_plain_res_tuple, 1, 0, 0);
    codeobj_b18b668a85d56a6d033f7548ea794744 = MAKE_CODEOBJECT(module_filename_obj, 424, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain_extract_class, const_tuple_4ba31ba07b41fd04d82b171635c279e7_tuple, 3, 0, 0);
    codeobj_7737ff162a8fc8e608c9e8f0a1485cf4 = MAKE_CODEOBJECT(module_filename_obj, 438, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain_extract_function, const_tuple_ab75b3700d923195cced46bbcf43be0a_tuple, 3, 0, 0);
    codeobj_682c55a4955c40e53523f5967dba0e18 = MAKE_CODEOBJECT(module_filename_obj, 79, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain_make_object, const_tuple_str_plain_self_tuple, 1, 0, 0);
    codeobj_c7f299452f55c1d66752a520d5989713 = MAKE_CODEOBJECT(module_filename_obj, 298, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_UNICODE_LITERALS, const_str_plain_parse_traits_info, const_tuple_368621c384c078edc79ff93814cda151_tuple, 0, 0, 0);
    codeobj_d2364f45a352fed77b77f90ee833242e = MAKE_CODEOBJECT(module_filename_obj, 421, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain_patch_function, const_tuple_0851b5a3fac9b4fc24a295b2990c4aa4_tuple, 4, 0, 0);
    codeobj_6743d1541c747c72d49d9c3fe26785ae = MAKE_CODEOBJECT(module_filename_obj, 85, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, const_str_plain_register_methods, const_tuple_str_plain_self_str_plain_methods_tuple, 2, 0, 0);
    codeobj_2bea7bcff96360bb620189591cb6fbbc = MAKE_CODEOBJECT(module_filename_obj, 451, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_UNICODE_LITERALS, const_str_plain_resfunc, const_tuple_59f2197dc0ee8b8fe8d52b20ce49f5b1_tuple, 1, 0, 0);
}

// The module function declarations.
static PyObject *youtube_dl$swfinterp$$$function_1__extract_tags$$$genobj_1__extract_tags_maker(void);


static PyObject *youtube_dl$swfinterp$$$function_9_register_methods$$$genexpr_1_genexpr_maker(void);


static PyObject *youtube_dl$swfinterp$$$function_22___init__$$$genexpr_1_genexpr_maker(void);


static PyObject *youtube_dl$swfinterp$$$function_22___init__$$$genexpr_2_genexpr_maker(void);


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_4__mro_entries_conversion(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_11_complex_call_helper_keywords_star_list(PyObject **python_pars);


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_10___init__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_11___repr__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_12__read_int();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_13__u30();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_14__s32();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_15__s24();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_16__read_string();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_17__read_bytes();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_18__read_byte();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_19___bool__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_1__extract_tags();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_20___hash__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_21___str__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_1_lambda();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_2_lambda();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_3_lambda();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_4_lambda();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_5_lambda();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_6_lambda();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_7_parse_traits_info();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_23_patch_function();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_24_extract_class(PyObject *defaults);


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_1_lambda();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_2_lambda();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_2___init__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_3___repr__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_4___init__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_5___repr__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_6___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_7_make_object();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_8___repr__();


static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_9_register_methods();


// The module function definitions.
static PyObject *impl_youtube_dl$swfinterp$$$function_1__extract_tags(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_file_contents = PyCell_NEW1(python_pars[0]);
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    tmp_return_value = youtube_dl$swfinterp$$$function_1__extract_tags$$$genobj_1__extract_tags_maker();

    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0] = par_file_contents;
    Py_INCREF(((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0]);


    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_file_contents);
    Py_DECREF(par_file_contents);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct youtube_dl$swfinterp$$$function_1__extract_tags$$$genobj_1__extract_tags_locals {
    PyObject *var_content;
    PyObject *var_framesize_nbits;
    PyObject *var_framesize_len;
    PyObject *var_pos;
    PyObject *var_header16;
    PyObject *var_tag_code;
    PyObject *var_tag_len;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    int tmp_res;
    bool tmp_result;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
};

static PyObject *youtube_dl$swfinterp$$$function_1__extract_tags$$$genobj_1__extract_tags_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check( (PyObject *)generator ));

    // Heap access if used.
    struct youtube_dl$swfinterp$$$function_1__extract_tags$$$genobj_1__extract_tags_locals *generator_heap = (struct youtube_dl$swfinterp$$$function_1__extract_tags$$$genobj_1__extract_tags_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_content = NULL;
    generator_heap->var_framesize_nbits = NULL;
    generator_heap->var_framesize_len = NULL;
    generator_heap->var_pos = NULL;
    generator_heap->var_header16 = NULL;
    generator_heap->var_tag_code = NULL;
    generator_heap->var_tag_len = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_8ffd3619d4ffec31ba95b1f15d50bbce, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_tmp_condition_result_1_object_1;
        int tmp_truth_name_1;
        if (PyCell_GET(generator->m_closure[0]) == NULL) {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "file_contents");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 17;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_1 = PyCell_GET(generator->m_closure[0]);
        tmp_subscript_name_1 = const_slice_int_pos_1_int_pos_3_none;
        tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_1, tmp_subscript_name_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 17;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_bytes_digest_8b3725cbb233844b8bcfd45cd8939b08;
        tmp_tmp_condition_result_1_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_tmp_condition_result_1_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 17;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_1_object_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_tmp_condition_result_1_object_1);

            generator_heap->exception_lineno = 17;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_1_object_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_subscript_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_ExtractorError);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_ExtractorError);
        }

        if (tmp_mvar_value_1 == NULL) {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = UNSTREAM_STRING(&constant_bin[ 27135 ], 36, 0);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 18;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_left_name_1 = const_str_digest_cff5114d7a155ebf4931e4e34b122661;
        if (PyCell_GET(generator->m_closure[0]) == NULL) {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "file_contents");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 19;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_2 = PyCell_GET(generator->m_closure[0]);
        tmp_subscript_name_2 = const_slice_none_int_pos_3_none;
        tmp_right_name_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_2, tmp_subscript_name_2);
        if (tmp_right_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 19;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 19;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        generator->m_frame->m_frame.f_lineno = 18;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_raise_type_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 18;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        generator_heap->exception_type = tmp_raise_type_1;
        generator_heap->exception_lineno = 18;
        RAISE_EXCEPTION_WITH_TYPE(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
        generator_heap->type_description_1 = "cooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_tmp_condition_result_2_object_1;
        int tmp_truth_name_2;
        if (PyCell_GET(generator->m_closure[0]) == NULL) {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "file_contents");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 20;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_3 = PyCell_GET(generator->m_closure[0]);
        tmp_subscript_name_3 = const_slice_none_int_pos_1_none;
        tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT(tmp_expression_name_3, tmp_subscript_name_3);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 20;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_bytes_chr_67;
        tmp_tmp_condition_result_2_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_tmp_condition_result_2_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 20;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_tmp_condition_result_2_object_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_tmp_condition_result_2_object_1);

            generator_heap->exception_lineno = 20;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_2_object_1);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_subscript_name_4;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_zlib);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_zlib);
        }

        if (tmp_mvar_value_2 == NULL) {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = UNSTREAM_STRING(&constant_bin[ 22217 ], 26, 0);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 21;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_4 = tmp_mvar_value_2;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, const_str_plain_decompress);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 21;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        if (PyCell_GET(generator->m_closure[0]) == NULL) {
            Py_DECREF(tmp_called_name_2);
            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "file_contents");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 21;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_5 = PyCell_GET(generator->m_closure[0]);
        tmp_subscript_name_4 = const_slice_int_pos_8_none_none;
        tmp_args_element_name_2 = LOOKUP_SUBSCRIPT(tmp_expression_name_5, tmp_subscript_name_4);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_called_name_2);

            generator_heap->exception_lineno = 21;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        generator->m_frame->m_frame.f_lineno = 21;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 21;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        assert(generator_heap->var_content == NULL);
        generator_heap->var_content = tmp_assign_source_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_subscript_name_5;
        tmp_left_name_2 = const_str_digest_c801fce4c68daf4609ac6d6b667069e7;
        if (PyCell_GET(generator->m_closure[0]) == NULL) {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "file_contents");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 25;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_6 = PyCell_GET(generator->m_closure[0]);
        tmp_subscript_name_5 = const_slice_none_int_pos_1_none;
        tmp_right_name_2 = LOOKUP_SUBSCRIPT(tmp_expression_name_6, tmp_subscript_name_5);
        if (tmp_right_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 25;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_2, tmp_right_name_2);
        Py_DECREF(tmp_right_name_2);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 24;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        generator->m_frame->m_frame.f_lineno = 23;
        tmp_raise_type_2 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_NotImplementedError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_2 == NULL));
        generator_heap->exception_type = tmp_raise_type_2;
        generator_heap->exception_lineno = 23;
        RAISE_EXCEPTION_WITH_TYPE(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
        generator_heap->type_description_1 = "cooooooo";
        goto frame_exception_exit_1;
    }
    branch_end_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_expression_name_7;
        PyObject *tmp_called_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_subscript_name_6;
        PyObject *tmp_subscript_name_7;
        PyObject *tmp_right_name_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);
        }

        if (tmp_mvar_value_3 == NULL) {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = UNSTREAM_STRING(&constant_bin[ 31722 ], 42, 0);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 28;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_3 = tmp_mvar_value_3;
        tmp_args_element_name_3 = const_str_digest_11a7e09c00a35df5b21f6600c68e78d8;
        if (generator_heap->var_content == NULL) {

            generator_heap->exception_type = PyExc_UnboundLocalError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "content");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 28;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_8 = generator_heap->var_content;
        tmp_subscript_name_6 = const_slice_none_int_pos_1_none;
        tmp_args_element_name_4 = LOOKUP_SUBSCRIPT(tmp_expression_name_8, tmp_subscript_name_6);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 28;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        generator->m_frame->m_frame.f_lineno = 28;
        {
            PyObject *call_args[] = {tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_expression_name_7 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_3, call_args);
        }

        Py_DECREF(tmp_args_element_name_4);
        if (tmp_expression_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 28;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_7 = const_int_0;
        tmp_left_name_3 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_7, tmp_subscript_name_7, 0);
        Py_DECREF(tmp_expression_name_7);
        if (tmp_left_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 28;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_3 = const_int_pos_3;
        tmp_assign_source_2 = BINARY_OPERATION_RSHIFT_OBJECT_OBJECT_LONG(tmp_left_name_3, tmp_right_name_3);
        Py_DECREF(tmp_left_name_3);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 28;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        assert(generator_heap->var_framesize_nbits == NULL);
        generator_heap->var_framesize_nbits = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_left_name_4;
        PyObject *tmp_left_name_5;
        PyObject *tmp_left_name_6;
        PyObject *tmp_right_name_4;
        PyObject *tmp_left_name_7;
        PyObject *tmp_right_name_5;
        PyObject *tmp_right_name_6;
        PyObject *tmp_right_name_7;
        tmp_left_name_6 = const_int_pos_5;
        tmp_left_name_7 = const_int_pos_4;
        CHECK_OBJECT(generator_heap->var_framesize_nbits);
        tmp_right_name_5 = generator_heap->var_framesize_nbits;
        tmp_right_name_4 = BINARY_OPERATION_MULT_OBJECT_LONG_OBJECT(tmp_left_name_7, tmp_right_name_5);
        if (tmp_right_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 29;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_5 = BINARY_OPERATION_ADD_OBJECT_LONG_OBJECT(tmp_left_name_6, tmp_right_name_4);
        Py_DECREF(tmp_right_name_4);
        if (tmp_left_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 29;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_6 = const_int_pos_7;
        tmp_left_name_4 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_5, tmp_right_name_6);
        Py_DECREF(tmp_left_name_5);
        if (tmp_left_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 29;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_7 = const_int_pos_8;
        tmp_assign_source_3 = BINARY_OPERATION_FLOORDIV_OBJECT_OBJECT_LONG(tmp_left_name_4, tmp_right_name_7);
        Py_DECREF(tmp_left_name_4);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 29;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        assert(generator_heap->var_framesize_len == NULL);
        generator_heap->var_framesize_len = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_name_8;
        PyObject *tmp_left_name_9;
        PyObject *tmp_right_name_8;
        PyObject *tmp_right_name_9;
        CHECK_OBJECT(generator_heap->var_framesize_len);
        tmp_left_name_9 = generator_heap->var_framesize_len;
        tmp_right_name_8 = const_int_pos_2;
        tmp_left_name_8 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_9, tmp_right_name_8);
        if (tmp_left_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 31;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_9 = const_int_pos_2;
        tmp_assign_source_4 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_8, tmp_right_name_9);
        Py_DECREF(tmp_left_name_8);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 31;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        assert(generator_heap->var_pos == NULL);
        generator_heap->var_pos = tmp_assign_source_4;
    }
    loop_start_1:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_compexpr_left_3 = generator_heap->var_pos;
        if (generator_heap->var_content == NULL) {

            generator_heap->exception_type = PyExc_UnboundLocalError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "content");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 32;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_len_arg_1 = generator_heap->var_content;
        tmp_compexpr_right_3 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_compexpr_right_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 32;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = RICH_COMPARE_LT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_right_3);
        if (tmp_operand_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 32;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        generator_heap->tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (generator_heap->tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 32;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = (generator_heap->tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    goto loop_end_1;
    branch_no_3:;
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_called_name_4;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_subscript_name_8;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_left_name_10;
        PyObject *tmp_right_name_10;
        PyObject *tmp_step_name_1;
        PyObject *tmp_subscript_name_9;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);
        }

        if (tmp_mvar_value_4 == NULL) {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = UNSTREAM_STRING(&constant_bin[ 31722 ], 42, 0);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 33;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_4 = tmp_mvar_value_4;
        tmp_args_element_name_5 = const_str_digest_969c69e9fbc42cc6a8915b0b5d93fbb0;
        if (generator_heap->var_content == NULL) {

            generator_heap->exception_type = PyExc_UnboundLocalError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "content");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 33;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_10 = generator_heap->var_content;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_start_name_1 = generator_heap->var_pos;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_left_name_10 = generator_heap->var_pos;
        tmp_right_name_10 = const_int_pos_2;
        tmp_stop_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_10, tmp_right_name_10);
        if (tmp_stop_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 33;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_step_name_1 = Py_None;
        tmp_subscript_name_8 = MAKE_SLICEOBJ3(tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1);
        Py_DECREF(tmp_stop_name_1);
        assert(!(tmp_subscript_name_8 == NULL));
        tmp_args_element_name_6 = LOOKUP_SUBSCRIPT(tmp_expression_name_10, tmp_subscript_name_8);
        Py_DECREF(tmp_subscript_name_8);
        if (tmp_args_element_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 33;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        generator->m_frame->m_frame.f_lineno = 33;
        {
            PyObject *call_args[] = {tmp_args_element_name_5, tmp_args_element_name_6};
            tmp_expression_name_9 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_4, call_args);
        }

        Py_DECREF(tmp_args_element_name_6);
        if (tmp_expression_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 33;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_9 = const_int_0;
        tmp_assign_source_5 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_9, tmp_subscript_name_9, 0);
        Py_DECREF(tmp_expression_name_9);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 33;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = generator_heap->var_header16;
            generator_heap->var_header16 = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_left_name_11;
        PyObject *tmp_right_name_11;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_left_name_11 = generator_heap->var_pos;
        tmp_right_name_11 = const_int_pos_2;
        generator_heap->tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_name_11, tmp_right_name_11);
        if (generator_heap->tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 34;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_6 = tmp_left_name_11;
        generator_heap->var_pos = tmp_assign_source_6;

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_left_name_12;
        PyObject *tmp_right_name_12;
        CHECK_OBJECT(generator_heap->var_header16);
        tmp_left_name_12 = generator_heap->var_header16;
        tmp_right_name_12 = const_int_pos_6;
        tmp_assign_source_7 = BINARY_OPERATION_RSHIFT_OBJECT_OBJECT_LONG(tmp_left_name_12, tmp_right_name_12);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 35;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = generator_heap->var_tag_code;
            generator_heap->var_tag_code = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_left_name_13;
        PyObject *tmp_right_name_13;
        CHECK_OBJECT(generator_heap->var_header16);
        tmp_left_name_13 = generator_heap->var_header16;
        tmp_right_name_13 = const_int_pos_63;
        tmp_assign_source_8 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_13, tmp_right_name_13);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 36;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = generator_heap->var_tag_len;
            generator_heap->var_tag_len = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_tmp_condition_result_4_object_1;
        int tmp_truth_name_3;
        CHECK_OBJECT(generator_heap->var_tag_len);
        tmp_compexpr_left_4 = generator_heap->var_tag_len;
        tmp_compexpr_right_4 = const_int_pos_63;
        tmp_tmp_condition_result_4_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
        if (tmp_tmp_condition_result_4_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 37;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_tmp_condition_result_4_object_1);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_tmp_condition_result_4_object_1);

            generator_heap->exception_lineno = 37;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_4_object_1);
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_expression_name_11;
        PyObject *tmp_called_name_5;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_expression_name_12;
        PyObject *tmp_subscript_name_10;
        PyObject *tmp_start_name_2;
        PyObject *tmp_stop_name_2;
        PyObject *tmp_left_name_14;
        PyObject *tmp_right_name_14;
        PyObject *tmp_step_name_2;
        PyObject *tmp_subscript_name_11;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);
        }

        if (tmp_mvar_value_5 == NULL) {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = UNSTREAM_STRING(&constant_bin[ 31722 ], 42, 0);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 38;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_5 = tmp_mvar_value_5;
        tmp_args_element_name_7 = const_str_digest_54608bc3db8b8899ddc5dce8e06f85a0;
        if (generator_heap->var_content == NULL) {

            generator_heap->exception_type = PyExc_UnboundLocalError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "content");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 38;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_12 = generator_heap->var_content;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_start_name_2 = generator_heap->var_pos;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_left_name_14 = generator_heap->var_pos;
        tmp_right_name_14 = const_int_pos_4;
        tmp_stop_name_2 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_14, tmp_right_name_14);
        if (tmp_stop_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 38;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_step_name_2 = Py_None;
        tmp_subscript_name_10 = MAKE_SLICEOBJ3(tmp_start_name_2, tmp_stop_name_2, tmp_step_name_2);
        Py_DECREF(tmp_stop_name_2);
        assert(!(tmp_subscript_name_10 == NULL));
        tmp_args_element_name_8 = LOOKUP_SUBSCRIPT(tmp_expression_name_12, tmp_subscript_name_10);
        Py_DECREF(tmp_subscript_name_10);
        if (tmp_args_element_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 38;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        generator->m_frame->m_frame.f_lineno = 38;
        {
            PyObject *call_args[] = {tmp_args_element_name_7, tmp_args_element_name_8};
            tmp_expression_name_11 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_5, call_args);
        }

        Py_DECREF(tmp_args_element_name_8);
        if (tmp_expression_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 38;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_11 = const_int_0;
        tmp_assign_source_9 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_11, tmp_subscript_name_11, 0);
        Py_DECREF(tmp_expression_name_11);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 38;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = generator_heap->var_tag_len;
            assert(old != NULL);
            generator_heap->var_tag_len = tmp_assign_source_9;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_left_name_15;
        PyObject *tmp_right_name_15;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_left_name_15 = generator_heap->var_pos;
        tmp_right_name_15 = const_int_pos_4;
        generator_heap->tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_name_15, tmp_right_name_15);
        if (generator_heap->tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 39;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_10 = tmp_left_name_15;
        generator_heap->var_pos = tmp_assign_source_10;

    }
    branch_no_4:;
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_left_name_16;
        PyObject *tmp_right_name_16;
        PyObject *tmp_len_arg_2;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_left_name_16 = generator_heap->var_pos;
        CHECK_OBJECT(generator_heap->var_tag_len);
        tmp_right_name_16 = generator_heap->var_tag_len;
        tmp_compexpr_left_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_16, tmp_right_name_16);
        if (tmp_compexpr_left_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 40;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        if (generator_heap->var_content == NULL) {
            Py_DECREF(tmp_compexpr_left_5);
            generator_heap->exception_type = PyExc_UnboundLocalError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "content");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 40;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_len_arg_2 = generator_heap->var_content;
        tmp_compexpr_right_5 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_compexpr_right_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_compexpr_left_5);

            generator_heap->exception_lineno = 40;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_2 = RICH_COMPARE_LE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_5, tmp_compexpr_right_5);
        Py_DECREF(tmp_compexpr_left_5);
        Py_DECREF(tmp_compexpr_right_5);
        if (tmp_operand_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 40;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        generator_heap->tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        Py_DECREF(tmp_operand_name_2);
        if (generator_heap->tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 40;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = (generator_heap->tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_left_name_17;
        PyObject *tmp_right_name_17;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_len_arg_3;
        tmp_raise_type_3 = PyExc_AssertionError;
        tmp_left_name_17 = const_str_digest_e8f09c79e27a39d5570e75535dc54fa7;
        CHECK_OBJECT(generator_heap->var_tag_code);
        tmp_tuple_element_2 = generator_heap->var_tag_code;
        tmp_right_name_17 = PyTuple_New(4);
        Py_INCREF(tmp_tuple_element_2);
        PyTuple_SET_ITEM(tmp_right_name_17, 0, tmp_tuple_element_2);
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_tuple_element_2 = generator_heap->var_pos;
        Py_INCREF(tmp_tuple_element_2);
        PyTuple_SET_ITEM(tmp_right_name_17, 1, tmp_tuple_element_2);
        CHECK_OBJECT(generator_heap->var_tag_len);
        tmp_tuple_element_2 = generator_heap->var_tag_len;
        Py_INCREF(tmp_tuple_element_2);
        PyTuple_SET_ITEM(tmp_right_name_17, 2, tmp_tuple_element_2);
        if (generator_heap->var_content == NULL) {
            Py_DECREF(tmp_right_name_17);
            generator_heap->exception_type = PyExc_UnboundLocalError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "content");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 42;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_len_arg_3 = generator_heap->var_content;
        tmp_tuple_element_2 = BUILTIN_LEN(tmp_len_arg_3);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_right_name_17);

            generator_heap->exception_lineno = 42;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_right_name_17, 3, tmp_tuple_element_2);
        tmp_tuple_element_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_17, tmp_right_name_17);
        Py_DECREF(tmp_right_name_17);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 41;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_raise_value_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_raise_value_1, 0, tmp_tuple_element_1);
        generator_heap->exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        generator_heap->exception_value = tmp_raise_value_1;
        generator_heap->exception_lineno = 40;
        RAISE_EXCEPTION_WITH_VALUE(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
        generator_heap->type_description_1 = "cooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_5:;
    {
        PyObject *tmp_expression_name_13;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_expression_name_14;
        PyObject *tmp_subscript_name_12;
        PyObject *tmp_start_name_3;
        PyObject *tmp_stop_name_3;
        PyObject *tmp_left_name_18;
        PyObject *tmp_right_name_18;
        PyObject *tmp_step_name_3;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var_tag_code);
        tmp_tuple_element_3 = generator_heap->var_tag_code;
        tmp_expression_name_13 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_3);
        PyTuple_SET_ITEM(tmp_expression_name_13, 0, tmp_tuple_element_3);
        if (generator_heap->var_content == NULL) {
            Py_DECREF(tmp_expression_name_13);
            generator_heap->exception_type = PyExc_UnboundLocalError;
            Py_INCREF(generator_heap->exception_type);
            generator_heap->exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "content");
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 43;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_14 = generator_heap->var_content;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_start_name_3 = generator_heap->var_pos;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_left_name_18 = generator_heap->var_pos;
        CHECK_OBJECT(generator_heap->var_tag_len);
        tmp_right_name_18 = generator_heap->var_tag_len;
        tmp_stop_name_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_18, tmp_right_name_18);
        if (tmp_stop_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_expression_name_13);

            generator_heap->exception_lineno = 43;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_step_name_3 = Py_None;
        tmp_subscript_name_12 = MAKE_SLICEOBJ3(tmp_start_name_3, tmp_stop_name_3, tmp_step_name_3);
        Py_DECREF(tmp_stop_name_3);
        assert(!(tmp_subscript_name_12 == NULL));
        tmp_tuple_element_3 = LOOKUP_SUBSCRIPT(tmp_expression_name_14, tmp_subscript_name_12);
        Py_DECREF(tmp_subscript_name_12);
        if (tmp_tuple_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_expression_name_13);

            generator_heap->exception_lineno = 43;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_expression_name_13, 1, tmp_tuple_element_3);
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_tuple_element_3, sizeof(PyObject *), &tmp_expression_name_14, sizeof(PyObject *), &tmp_subscript_name_12, sizeof(PyObject *), &tmp_start_name_3, sizeof(PyObject *), &tmp_stop_name_3, sizeof(PyObject *), &tmp_left_name_18, sizeof(PyObject *), &tmp_right_name_18, sizeof(PyObject *), &tmp_step_name_3, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_name_13;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_tuple_element_3, sizeof(PyObject *), &tmp_expression_name_14, sizeof(PyObject *), &tmp_subscript_name_12, sizeof(PyObject *), &tmp_start_name_3, sizeof(PyObject *), &tmp_stop_name_3, sizeof(PyObject *), &tmp_left_name_18, sizeof(PyObject *), &tmp_right_name_18, sizeof(PyObject *), &tmp_step_name_3, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 43;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_left_name_19;
        PyObject *tmp_right_name_19;
        CHECK_OBJECT(generator_heap->var_pos);
        tmp_left_name_19 = generator_heap->var_pos;
        CHECK_OBJECT(generator_heap->var_tag_len);
        tmp_right_name_19 = generator_heap->var_tag_len;
        generator_heap->tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_name_19, tmp_right_name_19);
        if (generator_heap->tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 44;
            generator_heap->type_description_1 = "cooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_11 = tmp_left_name_19;
        generator_heap->var_pos = tmp_assign_source_11;

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 32;
        generator_heap->type_description_1 = "cooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            generator->m_closure[0],
            generator_heap->var_content,
            generator_heap->var_framesize_nbits,
            generator_heap->var_framesize_len,
            generator_heap->var_pos,
            generator_heap->var_header16,
            generator_heap->var_tag_code,
            generator_heap->var_tag_len
        );


        // Release cached frame.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(generator->m_frame);
        }
        cache_m_frame = NULL;

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_content);
    generator_heap->var_content = NULL;

    Py_XDECREF(generator_heap->var_framesize_nbits);
    generator_heap->var_framesize_nbits = NULL;

    Py_XDECREF(generator_heap->var_framesize_len);
    generator_heap->var_framesize_len = NULL;

    Py_XDECREF(generator_heap->var_pos);
    generator_heap->var_pos = NULL;

    Py_XDECREF(generator_heap->var_header16);
    generator_heap->var_header16 = NULL;

    Py_XDECREF(generator_heap->var_tag_code);
    generator_heap->var_tag_code = NULL;

    Py_XDECREF(generator_heap->var_tag_len);
    generator_heap->var_tag_len = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:
    try_end_1:;
    Py_XDECREF(generator_heap->var_content);
    generator_heap->var_content = NULL;

    CHECK_OBJECT(generator_heap->var_framesize_nbits);
    Py_DECREF(generator_heap->var_framesize_nbits);
    generator_heap->var_framesize_nbits = NULL;

    CHECK_OBJECT(generator_heap->var_framesize_len);
    Py_DECREF(generator_heap->var_framesize_len);
    generator_heap->var_framesize_len = NULL;

    CHECK_OBJECT(generator_heap->var_pos);
    Py_DECREF(generator_heap->var_pos);
    generator_heap->var_pos = NULL;

    Py_XDECREF(generator_heap->var_header16);
    generator_heap->var_header16 = NULL;

    Py_XDECREF(generator_heap->var_tag_code);
    generator_heap->var_tag_code = NULL;

    Py_XDECREF(generator_heap->var_tag_len);
    generator_heap->var_tag_len = NULL;



    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *youtube_dl$swfinterp$$$function_1__extract_tags$$$genobj_1__extract_tags_maker(void) {
    return Nuitka_Generator_New(
        youtube_dl$swfinterp$$$function_1__extract_tags$$$genobj_1__extract_tags_context,
        module_youtube_dl$swfinterp,
        const_str_plain__extract_tags,
#if PYTHON_VERSION >= 350
        NULL,
#endif
        codeobj_8ffd3619d4ffec31ba95b1f15d50bbce,
        1,
        sizeof(struct youtube_dl$swfinterp$$$function_1__extract_tags$$$genobj_1__extract_tags_locals)
    );
}


static PyObject *impl_youtube_dl$swfinterp$$$function_2___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_avm_class = python_pars[1];
    struct Nuitka_FrameObject *frame_283805eeeb827293beecfdc3bfc113c9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_283805eeeb827293beecfdc3bfc113c9 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_283805eeeb827293beecfdc3bfc113c9)) {
        Py_XDECREF(cache_frame_283805eeeb827293beecfdc3bfc113c9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_283805eeeb827293beecfdc3bfc113c9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_283805eeeb827293beecfdc3bfc113c9 = MAKE_FUNCTION_FRAME(codeobj_283805eeeb827293beecfdc3bfc113c9, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_283805eeeb827293beecfdc3bfc113c9->m_type_description == NULL);
    frame_283805eeeb827293beecfdc3bfc113c9 = cache_frame_283805eeeb827293beecfdc3bfc113c9;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_283805eeeb827293beecfdc3bfc113c9);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_283805eeeb827293beecfdc3bfc113c9) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_avm_class);
        tmp_assattr_name_1 = par_avm_class;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_avm_class, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 49;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_283805eeeb827293beecfdc3bfc113c9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_283805eeeb827293beecfdc3bfc113c9);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_283805eeeb827293beecfdc3bfc113c9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_283805eeeb827293beecfdc3bfc113c9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_283805eeeb827293beecfdc3bfc113c9, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_283805eeeb827293beecfdc3bfc113c9,
        type_description_1,
        par_self,
        par_avm_class
    );


    // Release cached frame.
    if (frame_283805eeeb827293beecfdc3bfc113c9 == cache_frame_283805eeeb827293beecfdc3bfc113c9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_283805eeeb827293beecfdc3bfc113c9);
    }
    cache_frame_283805eeeb827293beecfdc3bfc113c9 = NULL;

    assertFrameObject(frame_283805eeeb827293beecfdc3bfc113c9);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_avm_class);
    Py_DECREF(par_avm_class);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_avm_class);
    Py_DECREF(par_avm_class);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_3___repr__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_bc9efcd56f12620920108218e80bd4c2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_bc9efcd56f12620920108218e80bd4c2 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_bc9efcd56f12620920108218e80bd4c2)) {
        Py_XDECREF(cache_frame_bc9efcd56f12620920108218e80bd4c2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_bc9efcd56f12620920108218e80bd4c2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_bc9efcd56f12620920108218e80bd4c2 = MAKE_FUNCTION_FRAME(codeobj_bc9efcd56f12620920108218e80bd4c2, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_bc9efcd56f12620920108218e80bd4c2->m_type_description == NULL);
    frame_bc9efcd56f12620920108218e80bd4c2 = cache_frame_bc9efcd56f12620920108218e80bd4c2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_bc9efcd56f12620920108218e80bd4c2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_bc9efcd56f12620920108218e80bd4c2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_id_arg_1;
        tmp_left_name_1 = const_str_digest_7dfbe030e10efea1824c35eabfc4ec7a;
        CHECK_OBJECT(par_self);
        tmp_expression_name_2 = par_self;
        tmp_expression_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, const_str_plain_avm_class);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 52;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, const_str_plain_name);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 52;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_self);
        tmp_id_arg_1 = par_self;
        tmp_tuple_element_1 = PyLong_FromVoidPtr(tmp_id_arg_1);
        assert(!(tmp_tuple_element_1 == NULL));
        PyTuple_SET_ITEM(tmp_right_name_1, 1, tmp_tuple_element_1);
        tmp_return_value = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 52;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bc9efcd56f12620920108218e80bd4c2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_bc9efcd56f12620920108218e80bd4c2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bc9efcd56f12620920108218e80bd4c2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bc9efcd56f12620920108218e80bd4c2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_bc9efcd56f12620920108218e80bd4c2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bc9efcd56f12620920108218e80bd4c2, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_bc9efcd56f12620920108218e80bd4c2,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if (frame_bc9efcd56f12620920108218e80bd4c2 == cache_frame_bc9efcd56f12620920108218e80bd4c2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_bc9efcd56f12620920108218e80bd4c2);
    }
    cache_frame_bc9efcd56f12620920108218e80bd4c2 = NULL;

    assertFrameObject(frame_bc9efcd56f12620920108218e80bd4c2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_4___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_avm_class = python_pars[1];
    struct Nuitka_FrameObject *frame_157ed9a9f582adf0edee1a09f3f32d3f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_157ed9a9f582adf0edee1a09f3f32d3f = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_157ed9a9f582adf0edee1a09f3f32d3f)) {
        Py_XDECREF(cache_frame_157ed9a9f582adf0edee1a09f3f32d3f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_157ed9a9f582adf0edee1a09f3f32d3f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_157ed9a9f582adf0edee1a09f3f32d3f = MAKE_FUNCTION_FRAME(codeobj_157ed9a9f582adf0edee1a09f3f32d3f, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_157ed9a9f582adf0edee1a09f3f32d3f->m_type_description == NULL);
    frame_157ed9a9f582adf0edee1a09f3f32d3f = cache_frame_157ed9a9f582adf0edee1a09f3f32d3f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_157ed9a9f582adf0edee1a09f3f32d3f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_157ed9a9f582adf0edee1a09f3f32d3f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_object_name_1;
        PyObject *tmp_call_result_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__ScopeDict);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__ScopeDict);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55355 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 57;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }

        tmp_type_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_self);
        tmp_object_name_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER(tmp_type_name_1, tmp_object_name_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        frame_157ed9a9f582adf0edee1a09f3f32d3f->m_frame.f_lineno = 57;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain___init__);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_avm_class);
        tmp_assattr_name_1 = par_avm_class;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_avm_class, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 58;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_157ed9a9f582adf0edee1a09f3f32d3f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_157ed9a9f582adf0edee1a09f3f32d3f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_157ed9a9f582adf0edee1a09f3f32d3f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_157ed9a9f582adf0edee1a09f3f32d3f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_157ed9a9f582adf0edee1a09f3f32d3f, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_157ed9a9f582adf0edee1a09f3f32d3f,
        type_description_1,
        par_self,
        par_avm_class,
        NULL
    );


    // Release cached frame.
    if (frame_157ed9a9f582adf0edee1a09f3f32d3f == cache_frame_157ed9a9f582adf0edee1a09f3f32d3f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_157ed9a9f582adf0edee1a09f3f32d3f);
    }
    cache_frame_157ed9a9f582adf0edee1a09f3f32d3f = NULL;

    assertFrameObject(frame_157ed9a9f582adf0edee1a09f3f32d3f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_avm_class);
    Py_DECREF(par_avm_class);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_avm_class);
    Py_DECREF(par_avm_class);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_5___repr__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_6479d36875699dd5471e32bc922c77b9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6479d36875699dd5471e32bc922c77b9 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_6479d36875699dd5471e32bc922c77b9)) {
        Py_XDECREF(cache_frame_6479d36875699dd5471e32bc922c77b9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6479d36875699dd5471e32bc922c77b9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6479d36875699dd5471e32bc922c77b9 = MAKE_FUNCTION_FRAME(codeobj_6479d36875699dd5471e32bc922c77b9, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_6479d36875699dd5471e32bc922c77b9->m_type_description == NULL);
    frame_6479d36875699dd5471e32bc922c77b9 = cache_frame_6479d36875699dd5471e32bc922c77b9;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_6479d36875699dd5471e32bc922c77b9);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_6479d36875699dd5471e32bc922c77b9) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_object_name_1;
        tmp_left_name_1 = const_str_digest_5d357433e98a842107032ad0f0c28eea;
        CHECK_OBJECT(par_self);
        tmp_expression_name_2 = par_self;
        tmp_expression_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, const_str_plain_avm_class);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, const_str_plain_name);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_1, 0, tmp_tuple_element_1);
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__ScopeDict);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__ScopeDict);
        }

        if (tmp_mvar_value_1 == NULL) {
            Py_DECREF(tmp_right_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55355 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 63;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }

        tmp_type_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_self);
        tmp_object_name_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER(tmp_type_name_1, tmp_object_name_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_1);

            exception_lineno = 63;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        frame_6479d36875699dd5471e32bc922c77b9->m_frame.f_lineno = 63;
        tmp_tuple_element_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain___repr__);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_1);

            exception_lineno = 63;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_right_name_1, 1, tmp_tuple_element_1);
        tmp_return_value = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6479d36875699dd5471e32bc922c77b9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_6479d36875699dd5471e32bc922c77b9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6479d36875699dd5471e32bc922c77b9);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6479d36875699dd5471e32bc922c77b9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6479d36875699dd5471e32bc922c77b9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6479d36875699dd5471e32bc922c77b9, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6479d36875699dd5471e32bc922c77b9,
        type_description_1,
        par_self,
        NULL
    );


    // Release cached frame.
    if (frame_6479d36875699dd5471e32bc922c77b9 == cache_frame_6479d36875699dd5471e32bc922c77b9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_6479d36875699dd5471e32bc922c77b9);
    }
    cache_frame_6479d36875699dd5471e32bc922c77b9 = NULL;

    assertFrameObject(frame_6479d36875699dd5471e32bc922c77b9);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_6___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_name_idx = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_static_properties = python_pars[3];
    struct Nuitka_FrameObject *frame_c2a959eba4f1bd262e26d4cdbe370e49;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c2a959eba4f1bd262e26d4cdbe370e49 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c2a959eba4f1bd262e26d4cdbe370e49)) {
        Py_XDECREF(cache_frame_c2a959eba4f1bd262e26d4cdbe370e49);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c2a959eba4f1bd262e26d4cdbe370e49 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c2a959eba4f1bd262e26d4cdbe370e49 = MAKE_FUNCTION_FRAME(codeobj_c2a959eba4f1bd262e26d4cdbe370e49, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c2a959eba4f1bd262e26d4cdbe370e49->m_type_description == NULL);
    frame_c2a959eba4f1bd262e26d4cdbe370e49 = cache_frame_c2a959eba4f1bd262e26d4cdbe370e49;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c2a959eba4f1bd262e26d4cdbe370e49);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c2a959eba4f1bd262e26d4cdbe370e49) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_name_idx);
        tmp_assattr_name_1 = par_name_idx;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_name_idx, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_name);
        tmp_assattr_name_2 = par_name;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_name, tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 69;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = PyDict_New();
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_method_names, tmp_assattr_name_3);
        Py_DECREF(tmp_assattr_name_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 70;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_name_4 = PyDict_New();
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_method_idxs, tmp_assattr_name_4);
        Py_DECREF(tmp_assattr_name_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 71;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = PyDict_New();
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, const_str_plain_methods, tmp_assattr_name_5);
        Py_DECREF(tmp_assattr_name_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 72;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_assattr_target_6;
        tmp_assattr_name_6 = PyDict_New();
        CHECK_OBJECT(par_self);
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, const_str_plain_method_pyfunctions, tmp_assattr_name_6);
        Py_DECREF(tmp_assattr_name_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 73;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_7;
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        PyObject *tmp_assattr_target_7;
        CHECK_OBJECT(par_static_properties);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_static_properties);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(par_static_properties);
        tmp_assattr_name_7 = par_static_properties;
        Py_INCREF(tmp_assattr_name_7);
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_assattr_name_7 = PyDict_New();
        condexpr_end_1:;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_7, const_str_plain_static_properties, tmp_assattr_name_7);
        Py_DECREF(tmp_assattr_name_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_8;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_assattr_target_8;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__ScopeDict);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__ScopeDict);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55355 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 76;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_self);
        tmp_args_element_name_1 = par_self;
        frame_c2a959eba4f1bd262e26d4cdbe370e49->m_frame.f_lineno = 76;
        tmp_assattr_name_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assattr_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 76;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_8 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_8, const_str_plain_variables, tmp_assattr_name_8);
        Py_DECREF(tmp_assattr_name_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 76;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_9;
        PyObject *tmp_assattr_target_9;
        tmp_assattr_name_9 = PyDict_New();
        CHECK_OBJECT(par_self);
        tmp_assattr_target_9 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_9, const_str_plain_constants, tmp_assattr_name_9);
        Py_DECREF(tmp_assattr_name_9);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 77;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c2a959eba4f1bd262e26d4cdbe370e49);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c2a959eba4f1bd262e26d4cdbe370e49);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c2a959eba4f1bd262e26d4cdbe370e49, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c2a959eba4f1bd262e26d4cdbe370e49->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c2a959eba4f1bd262e26d4cdbe370e49, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c2a959eba4f1bd262e26d4cdbe370e49,
        type_description_1,
        par_self,
        par_name_idx,
        par_name,
        par_static_properties
    );


    // Release cached frame.
    if (frame_c2a959eba4f1bd262e26d4cdbe370e49 == cache_frame_c2a959eba4f1bd262e26d4cdbe370e49) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_c2a959eba4f1bd262e26d4cdbe370e49);
    }
    cache_frame_c2a959eba4f1bd262e26d4cdbe370e49 = NULL;

    assertFrameObject(frame_c2a959eba4f1bd262e26d4cdbe370e49);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_name_idx);
    Py_DECREF(par_name_idx);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_static_properties);
    Py_DECREF(par_static_properties);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_name_idx);
    Py_DECREF(par_name_idx);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_static_properties);
    Py_DECREF(par_static_properties);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_7_make_object(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_682c55a4955c40e53523f5967dba0e18;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_682c55a4955c40e53523f5967dba0e18 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_682c55a4955c40e53523f5967dba0e18)) {
        Py_XDECREF(cache_frame_682c55a4955c40e53523f5967dba0e18);

#if _DEBUG_REFCOUNTS
        if (cache_frame_682c55a4955c40e53523f5967dba0e18 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_682c55a4955c40e53523f5967dba0e18 = MAKE_FUNCTION_FRAME(codeobj_682c55a4955c40e53523f5967dba0e18, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_682c55a4955c40e53523f5967dba0e18->m_type_description == NULL);
    frame_682c55a4955c40e53523f5967dba0e18 = cache_frame_682c55a4955c40e53523f5967dba0e18;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_682c55a4955c40e53523f5967dba0e18);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_682c55a4955c40e53523f5967dba0e18) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass_Object);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass_Object);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55387 ], 38, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 80;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_self);
        tmp_args_element_name_1 = par_self;
        frame_682c55a4955c40e53523f5967dba0e18->m_frame.f_lineno = 80;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 80;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_682c55a4955c40e53523f5967dba0e18);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_682c55a4955c40e53523f5967dba0e18);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_682c55a4955c40e53523f5967dba0e18);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_682c55a4955c40e53523f5967dba0e18, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_682c55a4955c40e53523f5967dba0e18->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_682c55a4955c40e53523f5967dba0e18, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_682c55a4955c40e53523f5967dba0e18,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if (frame_682c55a4955c40e53523f5967dba0e18 == cache_frame_682c55a4955c40e53523f5967dba0e18) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_682c55a4955c40e53523f5967dba0e18);
    }
    cache_frame_682c55a4955c40e53523f5967dba0e18 = NULL;

    assertFrameObject(frame_682c55a4955c40e53523f5967dba0e18);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_8___repr__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_1c6f75d6156448f36f16bdb60cfc88ec;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1c6f75d6156448f36f16bdb60cfc88ec = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1c6f75d6156448f36f16bdb60cfc88ec)) {
        Py_XDECREF(cache_frame_1c6f75d6156448f36f16bdb60cfc88ec);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1c6f75d6156448f36f16bdb60cfc88ec == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1c6f75d6156448f36f16bdb60cfc88ec = MAKE_FUNCTION_FRAME(codeobj_1c6f75d6156448f36f16bdb60cfc88ec, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1c6f75d6156448f36f16bdb60cfc88ec->m_type_description == NULL);
    frame_1c6f75d6156448f36f16bdb60cfc88ec = cache_frame_1c6f75d6156448f36f16bdb60cfc88ec;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1c6f75d6156448f36f16bdb60cfc88ec);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1c6f75d6156448f36f16bdb60cfc88ec) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_expression_name_1;
        tmp_left_name_1 = const_str_digest_f047a88c631820751549f2d9896c20f9;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_right_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, const_str_plain_name);
        if (tmp_right_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1c6f75d6156448f36f16bdb60cfc88ec);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1c6f75d6156448f36f16bdb60cfc88ec);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1c6f75d6156448f36f16bdb60cfc88ec);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1c6f75d6156448f36f16bdb60cfc88ec, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1c6f75d6156448f36f16bdb60cfc88ec->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1c6f75d6156448f36f16bdb60cfc88ec, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1c6f75d6156448f36f16bdb60cfc88ec,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if (frame_1c6f75d6156448f36f16bdb60cfc88ec == cache_frame_1c6f75d6156448f36f16bdb60cfc88ec) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_1c6f75d6156448f36f16bdb60cfc88ec);
    }
    cache_frame_1c6f75d6156448f36f16bdb60cfc88ec = NULL;

    assertFrameObject(frame_1c6f75d6156448f36f16bdb60cfc88ec);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_9_register_methods(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_methods = python_pars[1];
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_6743d1541c747c72d49d9c3fe26785ae;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6743d1541c747c72d49d9c3fe26785ae = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_6743d1541c747c72d49d9c3fe26785ae)) {
        Py_XDECREF(cache_frame_6743d1541c747c72d49d9c3fe26785ae);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6743d1541c747c72d49d9c3fe26785ae == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6743d1541c747c72d49d9c3fe26785ae = MAKE_FUNCTION_FRAME(codeobj_6743d1541c747c72d49d9c3fe26785ae, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_6743d1541c747c72d49d9c3fe26785ae->m_type_description == NULL);
    frame_6743d1541c747c72d49d9c3fe26785ae = cache_frame_6743d1541c747c72d49d9c3fe26785ae;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_6743d1541c747c72d49d9c3fe26785ae);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_6743d1541c747c72d49d9c3fe26785ae) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_2 = par_self;
        tmp_expression_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, const_str_plain_method_names);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, const_str_plain_update);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_methods);
        tmp_called_instance_1 = par_methods;
        frame_6743d1541c747c72d49d9c3fe26785ae->m_frame.f_lineno = 86;
        tmp_args_element_name_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_items);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 86;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_6743d1541c747c72d49d9c3fe26785ae->m_frame.f_lineno = 86;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_dict_seq_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_4 = par_self;
        tmp_expression_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, const_str_plain_method_idxs);
        if (tmp_expression_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, const_str_plain_update);
        Py_DECREF(tmp_expression_name_3);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_instance_2;
            CHECK_OBJECT(par_methods);
            tmp_called_instance_2 = par_methods;
            frame_6743d1541c747c72d49d9c3fe26785ae->m_frame.f_lineno = 89;
            tmp_iter_arg_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_items);
            if (tmp_iter_arg_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 89;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
            Py_DECREF(tmp_iter_arg_1);
            if (tmp_assign_source_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 88;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            assert(tmp_genexpr_1__$0 == NULL);
            tmp_genexpr_1__$0 = tmp_assign_source_1;
        }
        // Tried code:
        tmp_dict_seq_1 = youtube_dl$swfinterp$$$function_9_register_methods$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_dict_seq_1)->m_closure[0] = PyCell_NEW0(tmp_genexpr_1__$0);


        goto try_return_handler_1;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_1:;
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;

        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_1:;
        tmp_args_element_name_2 = TO_DICT(tmp_dict_seq_1, NULL);
        Py_DECREF(tmp_dict_seq_1);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 87;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_6743d1541c747c72d49d9c3fe26785ae->m_frame.f_lineno = 87;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6743d1541c747c72d49d9c3fe26785ae);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6743d1541c747c72d49d9c3fe26785ae);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6743d1541c747c72d49d9c3fe26785ae, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6743d1541c747c72d49d9c3fe26785ae->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6743d1541c747c72d49d9c3fe26785ae, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6743d1541c747c72d49d9c3fe26785ae,
        type_description_1,
        par_self,
        par_methods
    );


    // Release cached frame.
    if (frame_6743d1541c747c72d49d9c3fe26785ae == cache_frame_6743d1541c747c72d49d9c3fe26785ae) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_6743d1541c747c72d49d9c3fe26785ae);
    }
    cache_frame_6743d1541c747c72d49d9c3fe26785ae = NULL;

    assertFrameObject(frame_6743d1541c747c72d49d9c3fe26785ae);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_methods);
    Py_DECREF(par_methods);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_methods);
    Py_DECREF(par_methods);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct youtube_dl$swfinterp$$$function_9_register_methods$$$genexpr_1_genexpr_locals {
    PyObject *var_name;
    PyObject *var_idx;
    PyObject *tmp_iter_value_0;
    PyObject *tmp_tuple_unpack_1__element_1;
    PyObject *tmp_tuple_unpack_1__element_2;
    PyObject *tmp_tuple_unpack_1__source_iter;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
};

static PyObject *youtube_dl$swfinterp$$$function_9_register_methods$$$genexpr_1_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check( (PyObject *)generator ));

    // Heap access if used.
    struct youtube_dl$swfinterp$$$function_9_register_methods$$$genexpr_1_genexpr_locals *generator_heap = (struct youtube_dl$swfinterp$$$function_9_register_methods$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_name = NULL;
    generator_heap->var_idx = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_b5a0d2ca835660bde4824ba684a89039, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(PyCell_GET(generator->m_closure[0]));
        tmp_next_source_1 = PyCell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "Noo";
                generator_heap->exception_lineno = 88;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_iter_arg_1 = generator_heap->tmp_iter_value_0;
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 88;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__source_iter;
            generator_heap->tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_3 == NULL) {
            if (!ERROR_OCCURRED()) {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF(generator_heap->exception_type);
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            }


            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 88;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_1;
            generator_heap->tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF(generator_heap->exception_type);
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            }


            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 88;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_2;
            generator_heap->tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        generator_heap->tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(generator_heap->tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);

                    generator_heap->type_description_1 = "Noo";
                    generator_heap->exception_lineno = 88;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(generator_heap->tmp_iterator_attempt);

            generator_heap->exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            generator_heap->exception_value = const_str_digest_fcf040720b88d60da4ce975010c44a3a;
            Py_INCREF(generator_heap->exception_value);
            generator_heap->exception_tb = NULL;

            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 88;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
    Py_DECREF(generator_heap->tmp_tuple_unpack_1__source_iter);
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_1);
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_2);
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
    Py_DECREF(generator_heap->tmp_tuple_unpack_1__source_iter);
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__element_1);
        tmp_assign_source_5 = generator_heap->tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = generator_heap->var_name;
            generator_heap->var_name = tmp_assign_source_5;
            Py_INCREF(generator_heap->var_name);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_1);
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__element_2);
        tmp_assign_source_6 = generator_heap->tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = generator_heap->var_idx;
            generator_heap->var_idx = tmp_assign_source_6;
            Py_INCREF(generator_heap->var_idx);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_2);
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_tuple_element_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var_idx);
        tmp_tuple_element_1 = generator_heap->var_idx;
        tmp_expression_name_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_expression_name_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(generator_heap->var_name);
        tmp_tuple_element_1 = generator_heap->var_name;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_expression_name_1, 1, tmp_tuple_element_1);
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_tuple_element_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_tuple_element_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 88;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 88;
        generator_heap->type_description_1 = "Noo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_3 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_3 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_3 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_3 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_3;
    generator_heap->exception_value = generator_heap->exception_keeper_value_3;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_3;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_name,
            generator_heap->var_idx
        );


        // Release cached frame.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(generator->m_frame);
        }
        cache_m_frame = NULL;

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_4 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_4 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_4 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_4 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_name);
    generator_heap->var_name = NULL;

    Py_XDECREF(generator_heap->var_idx);
    generator_heap->var_idx = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_4;
    generator_heap->exception_value = generator_heap->exception_keeper_value_4;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_4;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:
    try_end_4:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF(generator_heap->var_name);
    generator_heap->var_name = NULL;

    Py_XDECREF(generator_heap->var_idx);
    generator_heap->var_idx = NULL;



    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *youtube_dl$swfinterp$$$function_9_register_methods$$$genexpr_1_genexpr_maker(void) {
    return Nuitka_Generator_New(
        youtube_dl$swfinterp$$$function_9_register_methods$$$genexpr_1_genexpr_context,
        module_youtube_dl$swfinterp,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_673bc4fb5fea21bfd535d4d1a2315efb,
#endif
        codeobj_b5a0d2ca835660bde4824ba684a89039,
        1,
        sizeof(struct youtube_dl$swfinterp$$$function_9_register_methods$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_youtube_dl$swfinterp$$$function_10___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_kind = python_pars[1];
    struct Nuitka_FrameObject *frame_a65444fc7d9e6d4ae61241a30298b3f5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a65444fc7d9e6d4ae61241a30298b3f5 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a65444fc7d9e6d4ae61241a30298b3f5)) {
        Py_XDECREF(cache_frame_a65444fc7d9e6d4ae61241a30298b3f5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a65444fc7d9e6d4ae61241a30298b3f5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a65444fc7d9e6d4ae61241a30298b3f5 = MAKE_FUNCTION_FRAME(codeobj_a65444fc7d9e6d4ae61241a30298b3f5, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a65444fc7d9e6d4ae61241a30298b3f5->m_type_description == NULL);
    frame_a65444fc7d9e6d4ae61241a30298b3f5 = cache_frame_a65444fc7d9e6d4ae61241a30298b3f5;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a65444fc7d9e6d4ae61241a30298b3f5);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a65444fc7d9e6d4ae61241a30298b3f5) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_kind);
        tmp_assattr_name_1 = par_kind;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_kind, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 94;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a65444fc7d9e6d4ae61241a30298b3f5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a65444fc7d9e6d4ae61241a30298b3f5);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a65444fc7d9e6d4ae61241a30298b3f5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a65444fc7d9e6d4ae61241a30298b3f5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a65444fc7d9e6d4ae61241a30298b3f5, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a65444fc7d9e6d4ae61241a30298b3f5,
        type_description_1,
        par_self,
        par_kind
    );


    // Release cached frame.
    if (frame_a65444fc7d9e6d4ae61241a30298b3f5 == cache_frame_a65444fc7d9e6d4ae61241a30298b3f5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_a65444fc7d9e6d4ae61241a30298b3f5);
    }
    cache_frame_a65444fc7d9e6d4ae61241a30298b3f5 = NULL;

    assertFrameObject(frame_a65444fc7d9e6d4ae61241a30298b3f5);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kind);
    Py_DECREF(par_kind);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kind);
    Py_DECREF(par_kind);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_11___repr__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_041e63b13dfb92036d580a4248e1d665;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_041e63b13dfb92036d580a4248e1d665 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_041e63b13dfb92036d580a4248e1d665)) {
        Py_XDECREF(cache_frame_041e63b13dfb92036d580a4248e1d665);

#if _DEBUG_REFCOUNTS
        if (cache_frame_041e63b13dfb92036d580a4248e1d665 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_041e63b13dfb92036d580a4248e1d665 = MAKE_FUNCTION_FRAME(codeobj_041e63b13dfb92036d580a4248e1d665, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_041e63b13dfb92036d580a4248e1d665->m_type_description == NULL);
    frame_041e63b13dfb92036d580a4248e1d665 = cache_frame_041e63b13dfb92036d580a4248e1d665;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_041e63b13dfb92036d580a4248e1d665);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_041e63b13dfb92036d580a4248e1d665) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_expression_name_1;
        tmp_left_name_1 = const_str_digest_27d342e866ff044b7069b3c22c7351da;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_right_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, const_str_plain_kind);
        if (tmp_right_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 97;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 97;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_041e63b13dfb92036d580a4248e1d665);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_041e63b13dfb92036d580a4248e1d665);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_041e63b13dfb92036d580a4248e1d665);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_041e63b13dfb92036d580a4248e1d665, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_041e63b13dfb92036d580a4248e1d665->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_041e63b13dfb92036d580a4248e1d665, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_041e63b13dfb92036d580a4248e1d665,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if (frame_041e63b13dfb92036d580a4248e1d665 == cache_frame_041e63b13dfb92036d580a4248e1d665) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_041e63b13dfb92036d580a4248e1d665);
    }
    cache_frame_041e63b13dfb92036d580a4248e1d665 = NULL;

    assertFrameObject(frame_041e63b13dfb92036d580a4248e1d665);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_12__read_int(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_reader = python_pars[0];
    PyObject *var_res = NULL;
    PyObject *var_shift = NULL;
    PyObject *var__ = NULL;
    PyObject *var_buf = NULL;
    PyObject *var_b = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_f4df11dcdb4179ef241b09fa674aa7e0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_f4df11dcdb4179ef241b09fa674aa7e0 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = const_int_0;
        assert(var_res == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_res = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = const_int_0;
        assert(var_shift == NULL);
        Py_INCREF(tmp_assign_source_2);
        var_shift = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        tmp_iter_arg_1 = const_xrange_0_5;
        tmp_assign_source_3 = MAKE_ITERATOR(tmp_iter_arg_1);
        assert(!(tmp_assign_source_3 == NULL));
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    if (isFrameUnusable(cache_frame_f4df11dcdb4179ef241b09fa674aa7e0)) {
        Py_XDECREF(cache_frame_f4df11dcdb4179ef241b09fa674aa7e0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f4df11dcdb4179ef241b09fa674aa7e0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f4df11dcdb4179ef241b09fa674aa7e0 = MAKE_FUNCTION_FRAME(codeobj_f4df11dcdb4179ef241b09fa674aa7e0, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f4df11dcdb4179ef241b09fa674aa7e0->m_type_description == NULL);
    frame_f4df11dcdb4179ef241b09fa674aa7e0 = cache_frame_f4df11dcdb4179ef241b09fa674aa7e0;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f4df11dcdb4179ef241b09fa674aa7e0);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f4df11dcdb4179ef241b09fa674aa7e0) == 2); // Frame stack

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_4 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooo";
                exception_lineno = 103;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_5 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var__;
            var__ = tmp_assign_source_5;
            Py_INCREF(var__);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_reader);
        tmp_called_instance_1 = par_reader;
        frame_f4df11dcdb4179ef241b09fa674aa7e0->m_frame.f_lineno = 104;
        tmp_assign_source_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_read, &PyTuple_GET_ITEM(const_tuple_int_pos_1_tuple, 0));

        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 104;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_buf;
            var_buf = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_tmp_condition_result_1_object_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_buf);
        tmp_len_arg_1 = var_buf;
        tmp_compexpr_left_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_compexpr_right_1 = const_int_pos_1;
        tmp_tmp_condition_result_1_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        assert(!(tmp_tmp_condition_result_1_object_1 == NULL));
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_1_object_1);
        assert(!(tmp_truth_name_1 == -1));
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_1_object_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 105;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 31722 ], 42, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 106;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_element_name_1 = const_str_digest_e914c4598dba29989ce6fd6b1ce4375d;
        CHECK_OBJECT(var_buf);
        tmp_args_element_name_2 = var_buf;
        frame_f4df11dcdb4179ef241b09fa674aa7e0->m_frame.f_lineno = 106;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
            tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_1, call_args);
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 106;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_assign_source_7 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_1, tmp_subscript_name_1, 0);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 106;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_b;
            var_b = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_2;
        PyObject *tmp_right_name_3;
        CHECK_OBJECT(var_res);
        tmp_left_name_1 = var_res;
        CHECK_OBJECT(var_b);
        tmp_left_name_3 = var_b;
        tmp_right_name_2 = const_int_pos_127;
        tmp_left_name_2 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_3, tmp_right_name_2);
        if (tmp_left_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_shift);
        tmp_right_name_3 = var_shift;
        tmp_right_name_1 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_name_2, tmp_right_name_3);
        Py_DECREF(tmp_left_name_2);
        if (tmp_right_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_8 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_res;
            assert(old != NULL);
            var_res = tmp_assign_source_8;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        PyObject *tmp_tmp_condition_result_2_object_1;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_b);
        tmp_left_name_4 = var_b;
        tmp_right_name_4 = const_int_pos_128;
        tmp_compexpr_left_2 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_4, tmp_right_name_4);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_compexpr_right_2 = const_int_0;
        tmp_tmp_condition_result_2_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_tmp_condition_result_2_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_tmp_condition_result_2_object_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_2_object_1);

            exception_lineno = 108;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_2_object_1);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    goto loop_end_1;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_5;
        CHECK_OBJECT(var_shift);
        tmp_left_name_5 = var_shift;
        tmp_right_name_5 = const_int_pos_7;
        tmp_result = BINARY_OPERATION_ADD_LONG_LONG_INPLACE(&tmp_left_name_5, tmp_right_name_5);
        assert(!(tmp_result == false));
        tmp_assign_source_9 = tmp_left_name_5;
        var_shift = tmp_assign_source_9;

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 103;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    if (var_res == NULL) {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF(exception_type);
        exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "res");
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 111;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_res;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f4df11dcdb4179ef241b09fa674aa7e0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_f4df11dcdb4179ef241b09fa674aa7e0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f4df11dcdb4179ef241b09fa674aa7e0);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f4df11dcdb4179ef241b09fa674aa7e0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f4df11dcdb4179ef241b09fa674aa7e0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f4df11dcdb4179ef241b09fa674aa7e0, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f4df11dcdb4179ef241b09fa674aa7e0,
        type_description_1,
        par_reader,
        var_res,
        var_shift,
        var__,
        var_buf,
        var_b
    );


    // Release cached frame.
    if (frame_f4df11dcdb4179ef241b09fa674aa7e0 == cache_frame_f4df11dcdb4179ef241b09fa674aa7e0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_f4df11dcdb4179ef241b09fa674aa7e0);
    }
    cache_frame_f4df11dcdb4179ef241b09fa674aa7e0 = NULL;

    assertFrameObject(frame_f4df11dcdb4179ef241b09fa674aa7e0);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_res);
    var_res = NULL;

    CHECK_OBJECT(var_shift);
    Py_DECREF(var_shift);
    var_shift = NULL;

    Py_XDECREF(var__);
    var__ = NULL;

    Py_XDECREF(var_buf);
    var_buf = NULL;

    Py_XDECREF(var_b);
    var_b = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_res);
    var_res = NULL;

    CHECK_OBJECT(var_shift);
    Py_DECREF(var_shift);
    var_shift = NULL;

    Py_XDECREF(var__);
    var__ = NULL;

    Py_XDECREF(var_buf);
    var_buf = NULL;

    Py_XDECREF(var_b);
    var_b = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_13__u30(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_reader = python_pars[0];
    PyObject *var_res = NULL;
    struct Nuitka_FrameObject *frame_f73bef25feb220f5910559d7a7c03361;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_f73bef25feb220f5910559d7a7c03361 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_f73bef25feb220f5910559d7a7c03361)) {
        Py_XDECREF(cache_frame_f73bef25feb220f5910559d7a7c03361);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f73bef25feb220f5910559d7a7c03361 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f73bef25feb220f5910559d7a7c03361 = MAKE_FUNCTION_FRAME(codeobj_f73bef25feb220f5910559d7a7c03361, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f73bef25feb220f5910559d7a7c03361->m_type_description == NULL);
    frame_f73bef25feb220f5910559d7a7c03361 = cache_frame_f73bef25feb220f5910559d7a7c03361;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f73bef25feb220f5910559d7a7c03361);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f73bef25feb220f5910559d7a7c03361) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_int);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__read_int);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55425 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 115;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_reader);
        tmp_args_element_name_1 = par_reader;
        frame_f73bef25feb220f5910559d7a7c03361->m_frame.f_lineno = 115;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert(var_res == NULL);
        var_res = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT(var_res);
        tmp_left_name_1 = var_res;
        tmp_right_name_1 = const_int_pos_4026531840;
        tmp_compexpr_left_1 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_1, tmp_right_name_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_0;
        tmp_operand_name_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_operand_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 116;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f73bef25feb220f5910559d7a7c03361);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f73bef25feb220f5910559d7a7c03361);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f73bef25feb220f5910559d7a7c03361, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f73bef25feb220f5910559d7a7c03361->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f73bef25feb220f5910559d7a7c03361, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f73bef25feb220f5910559d7a7c03361,
        type_description_1,
        par_reader,
        var_res
    );


    // Release cached frame.
    if (frame_f73bef25feb220f5910559d7a7c03361 == cache_frame_f73bef25feb220f5910559d7a7c03361) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_f73bef25feb220f5910559d7a7c03361);
    }
    cache_frame_f73bef25feb220f5910559d7a7c03361 = NULL;

    assertFrameObject(frame_f73bef25feb220f5910559d7a7c03361);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_res);
    tmp_return_value = var_res;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_res);
    Py_DECREF(var_res);
    var_res = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_res);
    var_res = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_14__s32(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_reader = python_pars[0];
    PyObject *var_v = NULL;
    struct Nuitka_FrameObject *frame_0d60609dbce7a262f5beaf5225aa7433;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0d60609dbce7a262f5beaf5225aa7433 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_0d60609dbce7a262f5beaf5225aa7433)) {
        Py_XDECREF(cache_frame_0d60609dbce7a262f5beaf5225aa7433);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0d60609dbce7a262f5beaf5225aa7433 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0d60609dbce7a262f5beaf5225aa7433 = MAKE_FUNCTION_FRAME(codeobj_0d60609dbce7a262f5beaf5225aa7433, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_0d60609dbce7a262f5beaf5225aa7433->m_type_description == NULL);
    frame_0d60609dbce7a262f5beaf5225aa7433 = cache_frame_0d60609dbce7a262f5beaf5225aa7433;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_0d60609dbce7a262f5beaf5225aa7433);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_0d60609dbce7a262f5beaf5225aa7433) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_int);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__read_int);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55425 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 124;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_reader);
        tmp_args_element_name_1 = par_reader;
        frame_0d60609dbce7a262f5beaf5225aa7433->m_frame.f_lineno = 124;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert(var_v == NULL);
        var_v = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tmp_condition_result_1_object_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_v);
        tmp_left_name_1 = var_v;
        tmp_right_name_1 = const_int_pos_2147483648;
        tmp_compexpr_left_1 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_1, tmp_right_name_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_0;
        tmp_tmp_condition_result_1_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_tmp_condition_result_1_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_1_object_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_1_object_1);

            exception_lineno = 125;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_1_object_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_2;
        PyObject *tmp_right_name_3;
        CHECK_OBJECT(var_v);
        tmp_left_name_3 = var_v;
        tmp_right_name_2 = const_int_pos_4294967295;
        tmp_left_name_2 = BINARY_OPERATION_BITXOR_OBJECT_OBJECT_LONG(tmp_left_name_3, tmp_right_name_2);
        if (tmp_left_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_3 = const_int_pos_1;
        tmp_operand_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_2, tmp_right_name_3);
        Py_DECREF(tmp_left_name_2);
        if (tmp_operand_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = UNARY_OPERATION(PyNumber_Negative, tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_v;
            assert(old != NULL);
            var_v = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0d60609dbce7a262f5beaf5225aa7433);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0d60609dbce7a262f5beaf5225aa7433);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0d60609dbce7a262f5beaf5225aa7433, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0d60609dbce7a262f5beaf5225aa7433->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0d60609dbce7a262f5beaf5225aa7433, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0d60609dbce7a262f5beaf5225aa7433,
        type_description_1,
        par_reader,
        var_v
    );


    // Release cached frame.
    if (frame_0d60609dbce7a262f5beaf5225aa7433 == cache_frame_0d60609dbce7a262f5beaf5225aa7433) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_0d60609dbce7a262f5beaf5225aa7433);
    }
    cache_frame_0d60609dbce7a262f5beaf5225aa7433 = NULL;

    assertFrameObject(frame_0d60609dbce7a262f5beaf5225aa7433);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_v);
    tmp_return_value = var_v;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_v);
    Py_DECREF(var_v);
    var_v = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_v);
    var_v = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_15__s24(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_reader = python_pars[0];
    PyObject *var_bs = NULL;
    PyObject *var_last_byte = NULL;
    struct Nuitka_FrameObject *frame_470f2459f8b202e458aae3f5b91790b9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_470f2459f8b202e458aae3f5b91790b9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_470f2459f8b202e458aae3f5b91790b9)) {
        Py_XDECREF(cache_frame_470f2459f8b202e458aae3f5b91790b9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_470f2459f8b202e458aae3f5b91790b9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_470f2459f8b202e458aae3f5b91790b9 = MAKE_FUNCTION_FRAME(codeobj_470f2459f8b202e458aae3f5b91790b9, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_470f2459f8b202e458aae3f5b91790b9->m_type_description == NULL);
    frame_470f2459f8b202e458aae3f5b91790b9 = cache_frame_470f2459f8b202e458aae3f5b91790b9;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_470f2459f8b202e458aae3f5b91790b9);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_470f2459f8b202e458aae3f5b91790b9) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_reader);
        tmp_called_instance_1 = par_reader;
        frame_470f2459f8b202e458aae3f5b91790b9->m_frame.f_lineno = 131;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_read, &PyTuple_GET_ITEM(const_tuple_int_pos_3_tuple, 0));

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 131;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_bs == NULL);
        var_bs = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_tmp_condition_result_1_object_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_bs);
        tmp_len_arg_1 = var_bs;
        tmp_compexpr_left_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_pos_3;
        tmp_tmp_condition_result_1_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        assert(!(tmp_tmp_condition_result_1_object_1 == NULL));
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_1_object_1);
        assert(!(tmp_truth_name_1 == -1));
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_1_object_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 132;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_ord_arg_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_tmp_condition_result_2_object_1;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_bs);
        tmp_expression_name_1 = var_bs;
        tmp_subscript_name_1 = const_slice_int_pos_2_int_pos_3_none;
        tmp_ord_arg_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_1, tmp_subscript_name_1);
        if (tmp_ord_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_2 = BUILTIN_ORD(tmp_ord_arg_1);
        Py_DECREF(tmp_ord_arg_1);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_int_pos_128;
        tmp_tmp_condition_result_2_object_1 = RICH_COMPARE_GE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_tmp_condition_result_2_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_tmp_condition_result_2_object_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_2_object_1);

            exception_lineno = 133;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_2_object_1);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_assign_source_2 = const_bytes_chr_255;
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_assign_source_2 = const_bytes_chr_0;
        condexpr_end_1:;
        assert(var_last_byte == NULL);
        Py_INCREF(tmp_assign_source_2);
        var_last_byte = tmp_assign_source_2;
    }
    {
        PyObject *tmp_expression_name_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_subscript_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 31722 ], 42, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 134;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_element_name_1 = const_str_digest_c6ccceacb61480b9230ce3733fbc80d1;
        CHECK_OBJECT(var_bs);
        tmp_left_name_1 = var_bs;
        CHECK_OBJECT(var_last_byte);
        tmp_right_name_1 = var_last_byte;
        tmp_args_element_name_2 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_1, tmp_right_name_1);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 134;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_470f2459f8b202e458aae3f5b91790b9->m_frame.f_lineno = 134;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
            tmp_expression_name_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_args_element_name_2);
        if (tmp_expression_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 134;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_int_0;
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_2, tmp_subscript_name_2, 0);
        Py_DECREF(tmp_expression_name_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 134;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_470f2459f8b202e458aae3f5b91790b9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_470f2459f8b202e458aae3f5b91790b9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_470f2459f8b202e458aae3f5b91790b9);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_470f2459f8b202e458aae3f5b91790b9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_470f2459f8b202e458aae3f5b91790b9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_470f2459f8b202e458aae3f5b91790b9, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_470f2459f8b202e458aae3f5b91790b9,
        type_description_1,
        par_reader,
        var_bs,
        var_last_byte
    );


    // Release cached frame.
    if (frame_470f2459f8b202e458aae3f5b91790b9 == cache_frame_470f2459f8b202e458aae3f5b91790b9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_470f2459f8b202e458aae3f5b91790b9);
    }
    cache_frame_470f2459f8b202e458aae3f5b91790b9 = NULL;

    assertFrameObject(frame_470f2459f8b202e458aae3f5b91790b9);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_bs);
    Py_DECREF(var_bs);
    var_bs = NULL;

    CHECK_OBJECT(var_last_byte);
    Py_DECREF(var_last_byte);
    var_last_byte = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_bs);
    var_bs = NULL;

    Py_XDECREF(var_last_byte);
    var_last_byte = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_16__read_string(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_reader = python_pars[0];
    PyObject *var_slen = NULL;
    PyObject *var_resb = NULL;
    struct Nuitka_FrameObject *frame_79ca84cd05e5d6635637a63a34e8c213;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_79ca84cd05e5d6635637a63a34e8c213 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_79ca84cd05e5d6635637a63a34e8c213)) {
        Py_XDECREF(cache_frame_79ca84cd05e5d6635637a63a34e8c213);

#if _DEBUG_REFCOUNTS
        if (cache_frame_79ca84cd05e5d6635637a63a34e8c213 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_79ca84cd05e5d6635637a63a34e8c213 = MAKE_FUNCTION_FRAME(codeobj_79ca84cd05e5d6635637a63a34e8c213, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_79ca84cd05e5d6635637a63a34e8c213->m_type_description == NULL);
    frame_79ca84cd05e5d6635637a63a34e8c213 = cache_frame_79ca84cd05e5d6635637a63a34e8c213;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_79ca84cd05e5d6635637a63a34e8c213);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_79ca84cd05e5d6635637a63a34e8c213) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__u30);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__u30);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55456 ], 26, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 138;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_reader);
        tmp_args_element_name_1 = par_reader;
        frame_79ca84cd05e5d6635637a63a34e8c213->m_frame.f_lineno = 138;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_slen == NULL);
        var_slen = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT(par_reader);
        tmp_called_instance_1 = par_reader;
        CHECK_OBJECT(var_slen);
        tmp_args_element_name_2 = var_slen;
        frame_79ca84cd05e5d6635637a63a34e8c213->m_frame.f_lineno = 139;
        {
            PyObject *call_args[] = {tmp_args_element_name_2};
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_read, call_args);
        }

        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_resb == NULL);
        var_resb = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(var_resb);
        tmp_len_arg_1 = var_resb;
        tmp_compexpr_left_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_slen);
        tmp_compexpr_right_1 = var_slen;
        tmp_operand_name_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_operand_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 140;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_resb);
        tmp_called_instance_2 = var_resb;
        frame_79ca84cd05e5d6635637a63a34e8c213->m_frame.f_lineno = 141;
        tmp_return_value = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_decode, &PyTuple_GET_ITEM(const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple, 0));

        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 141;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_79ca84cd05e5d6635637a63a34e8c213);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_79ca84cd05e5d6635637a63a34e8c213);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_79ca84cd05e5d6635637a63a34e8c213);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_79ca84cd05e5d6635637a63a34e8c213, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_79ca84cd05e5d6635637a63a34e8c213->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_79ca84cd05e5d6635637a63a34e8c213, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_79ca84cd05e5d6635637a63a34e8c213,
        type_description_1,
        par_reader,
        var_slen,
        var_resb
    );


    // Release cached frame.
    if (frame_79ca84cd05e5d6635637a63a34e8c213 == cache_frame_79ca84cd05e5d6635637a63a34e8c213) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_79ca84cd05e5d6635637a63a34e8c213);
    }
    cache_frame_79ca84cd05e5d6635637a63a34e8c213 = NULL;

    assertFrameObject(frame_79ca84cd05e5d6635637a63a34e8c213);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_slen);
    Py_DECREF(var_slen);
    var_slen = NULL;

    CHECK_OBJECT(var_resb);
    Py_DECREF(var_resb);
    var_resb = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_slen);
    var_slen = NULL;

    Py_XDECREF(var_resb);
    var_resb = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_17__read_bytes(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_count = python_pars[0];
    PyObject *par_reader = python_pars[1];
    PyObject *var_resb = NULL;
    struct Nuitka_FrameObject *frame_d1d003eb5581bda2b55347cf9afb4f57;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_d1d003eb5581bda2b55347cf9afb4f57 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d1d003eb5581bda2b55347cf9afb4f57)) {
        Py_XDECREF(cache_frame_d1d003eb5581bda2b55347cf9afb4f57);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d1d003eb5581bda2b55347cf9afb4f57 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d1d003eb5581bda2b55347cf9afb4f57 = MAKE_FUNCTION_FRAME(codeobj_d1d003eb5581bda2b55347cf9afb4f57, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d1d003eb5581bda2b55347cf9afb4f57->m_type_description == NULL);
    frame_d1d003eb5581bda2b55347cf9afb4f57 = cache_frame_d1d003eb5581bda2b55347cf9afb4f57;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d1d003eb5581bda2b55347cf9afb4f57);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d1d003eb5581bda2b55347cf9afb4f57) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(par_count);
        tmp_compexpr_left_1 = par_count;
        tmp_compexpr_right_1 = const_int_0;
        tmp_operand_name_1 = RICH_COMPARE_GE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_operand_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 145;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 145;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(par_reader);
        tmp_called_instance_1 = par_reader;
        CHECK_OBJECT(par_count);
        tmp_args_element_name_1 = par_count;
        frame_d1d003eb5581bda2b55347cf9afb4f57->m_frame.f_lineno = 146;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_read, call_args);
        }

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_resb == NULL);
        var_resb = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(var_resb);
        tmp_len_arg_1 = var_resb;
        tmp_compexpr_left_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 147;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_count);
        tmp_compexpr_right_2 = par_count;
        tmp_operand_name_2 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_operand_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 147;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        Py_DECREF(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 147;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_2;
        tmp_raise_type_2 = PyExc_AssertionError;
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_lineno = 147;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d1d003eb5581bda2b55347cf9afb4f57);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d1d003eb5581bda2b55347cf9afb4f57);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d1d003eb5581bda2b55347cf9afb4f57, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d1d003eb5581bda2b55347cf9afb4f57->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d1d003eb5581bda2b55347cf9afb4f57, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d1d003eb5581bda2b55347cf9afb4f57,
        type_description_1,
        par_count,
        par_reader,
        var_resb
    );


    // Release cached frame.
    if (frame_d1d003eb5581bda2b55347cf9afb4f57 == cache_frame_d1d003eb5581bda2b55347cf9afb4f57) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_d1d003eb5581bda2b55347cf9afb4f57);
    }
    cache_frame_d1d003eb5581bda2b55347cf9afb4f57 = NULL;

    assertFrameObject(frame_d1d003eb5581bda2b55347cf9afb4f57);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_resb);
    tmp_return_value = var_resb;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_resb);
    Py_DECREF(var_resb);
    var_resb = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_resb);
    var_resb = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_count);
    Py_DECREF(par_count);
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_count);
    Py_DECREF(par_count);
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_18__read_byte(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_reader = python_pars[0];
    PyObject *var_resb = NULL;
    PyObject *var_res = NULL;
    struct Nuitka_FrameObject *frame_e90da14c7bbe6b419d38b01c027f9ba2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_e90da14c7bbe6b419d38b01c027f9ba2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_e90da14c7bbe6b419d38b01c027f9ba2)) {
        Py_XDECREF(cache_frame_e90da14c7bbe6b419d38b01c027f9ba2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e90da14c7bbe6b419d38b01c027f9ba2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e90da14c7bbe6b419d38b01c027f9ba2 = MAKE_FUNCTION_FRAME(codeobj_e90da14c7bbe6b419d38b01c027f9ba2, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e90da14c7bbe6b419d38b01c027f9ba2->m_type_description == NULL);
    frame_e90da14c7bbe6b419d38b01c027f9ba2 = cache_frame_e90da14c7bbe6b419d38b01c027f9ba2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e90da14c7bbe6b419d38b01c027f9ba2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e90da14c7bbe6b419d38b01c027f9ba2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_bytes);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__read_bytes);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55482 ], 33, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 152;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_name_1 = const_tuple_int_pos_1_tuple;
        tmp_dict_key_1 = const_str_plain_reader;
        CHECK_OBJECT(par_reader);
        tmp_dict_value_1 = par_reader;
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_e90da14c7bbe6b419d38b01c027f9ba2->m_frame.f_lineno = 152;
        tmp_assign_source_1 = CALL_FUNCTION(tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 152;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_resb == NULL);
        var_resb = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 31722 ], 42, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 153;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        tmp_args_element_name_1 = const_str_digest_e914c4598dba29989ce6fd6b1ce4375d;
        CHECK_OBJECT(var_resb);
        tmp_args_element_name_2 = var_resb;
        frame_e90da14c7bbe6b419d38b01c027f9ba2->m_frame.f_lineno = 153;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2};
            tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
        }

        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 153;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_assign_source_2 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_1, tmp_subscript_name_1, 0);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 153;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_res == NULL);
        var_res = tmp_assign_source_2;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e90da14c7bbe6b419d38b01c027f9ba2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e90da14c7bbe6b419d38b01c027f9ba2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e90da14c7bbe6b419d38b01c027f9ba2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e90da14c7bbe6b419d38b01c027f9ba2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e90da14c7bbe6b419d38b01c027f9ba2, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e90da14c7bbe6b419d38b01c027f9ba2,
        type_description_1,
        par_reader,
        var_resb,
        var_res
    );


    // Release cached frame.
    if (frame_e90da14c7bbe6b419d38b01c027f9ba2 == cache_frame_e90da14c7bbe6b419d38b01c027f9ba2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_e90da14c7bbe6b419d38b01c027f9ba2);
    }
    cache_frame_e90da14c7bbe6b419d38b01c027f9ba2 = NULL;

    assertFrameObject(frame_e90da14c7bbe6b419d38b01c027f9ba2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_res);
    tmp_return_value = var_res;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_resb);
    Py_DECREF(var_resb);
    var_resb = NULL;

    CHECK_OBJECT(var_res);
    Py_DECREF(var_res);
    var_res = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_resb);
    var_resb = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_reader);
    Py_DECREF(par_reader);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_19___bool__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    tmp_return_value = Py_False;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_20___hash__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    tmp_return_value = const_int_0;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_21___str__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    tmp_return_value = const_str_plain_undefined;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_22___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1(python_pars[0]);
    PyObject *par_file_contents = python_pars[1];
    PyObject *var_code_tag = NULL;
    PyObject *var_p = NULL;
    struct Nuitka_CellObject *var_code_reader = PyCell_EMPTY();
    struct Nuitka_CellObject *var_u30 = PyCell_EMPTY();
    PyObject *var_s32 = NULL;
    PyObject *var_u32 = NULL;
    PyObject *var_read_bytes = NULL;
    struct Nuitka_CellObject *var_read_byte = PyCell_EMPTY();
    PyObject *var_int_count = NULL;
    PyObject *var__c = NULL;
    PyObject *var_uint_count = NULL;
    PyObject *var_double_count = NULL;
    PyObject *var_string_count = NULL;
    PyObject *var_s = NULL;
    PyObject *var_namespace_count = NULL;
    PyObject *var_ns_set_count = NULL;
    PyObject *var_count = NULL;
    PyObject *var__c2 = NULL;
    PyObject *var_multiname_count = NULL;
    PyObject *var_MULTINAME_SIZES = NULL;
    PyObject *var_kind = NULL;
    PyObject *var_name_idx = NULL;
    PyObject *var_method_count = NULL;
    PyObject *var_MethodInfo = NULL;
    PyObject *var_method_infos = NULL;
    PyObject *var_method_id = NULL;
    PyObject *var_param_count = NULL;
    PyObject *var__ = NULL;
    PyObject *var_flags = NULL;
    PyObject *var_option_count = NULL;
    PyObject *var_c = NULL;
    PyObject *var_mi = NULL;
    PyObject *var_metadata_count = NULL;
    PyObject *var_item_count = NULL;
    PyObject *var_parse_traits_info = NULL;
    PyObject *var_class_count = NULL;
    PyObject *var_classes = NULL;
    PyObject *var_class_id = NULL;
    PyObject *var_cname = NULL;
    PyObject *var_avm_class = NULL;
    PyObject *var_intrf_count = NULL;
    PyObject *var_trait_count = NULL;
    PyObject *var_trait_methods = NULL;
    PyObject *var_trait_constants = NULL;
    PyObject *var_script_count = NULL;
    PyObject *var_method_body_count = NULL;
    PyObject *var_Method = NULL;
    PyObject *var_method_idx = NULL;
    PyObject *var_local_count = NULL;
    PyObject *var_code_length = NULL;
    PyObject *var_code = NULL;
    PyObject *var_m = NULL;
    PyObject *var_exception_count = NULL;
    PyObject *tmp_for_loop_10__for_iterator = NULL;
    PyObject *tmp_for_loop_10__iter_value = NULL;
    PyObject *tmp_for_loop_11__for_iterator = NULL;
    PyObject *tmp_for_loop_11__iter_value = NULL;
    PyObject *tmp_for_loop_12__for_iterator = NULL;
    PyObject *tmp_for_loop_12__iter_value = NULL;
    PyObject *tmp_for_loop_13__for_iterator = NULL;
    PyObject *tmp_for_loop_13__iter_value = NULL;
    PyObject *tmp_for_loop_14__for_iterator = NULL;
    PyObject *tmp_for_loop_14__iter_value = NULL;
    PyObject *tmp_for_loop_15__for_iterator = NULL;
    PyObject *tmp_for_loop_15__iter_value = NULL;
    PyObject *tmp_for_loop_16__for_iterator = NULL;
    PyObject *tmp_for_loop_16__iter_value = NULL;
    PyObject *tmp_for_loop_17__for_iterator = NULL;
    PyObject *tmp_for_loop_17__iter_value = NULL;
    PyObject *tmp_for_loop_18__for_iterator = NULL;
    PyObject *tmp_for_loop_18__iter_value = NULL;
    PyObject *tmp_for_loop_19__for_iterator = NULL;
    PyObject *tmp_for_loop_19__iter_value = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_20__for_iterator = NULL;
    PyObject *tmp_for_loop_20__iter_value = NULL;
    PyObject *tmp_for_loop_21__for_iterator = NULL;
    PyObject *tmp_for_loop_21__iter_value = NULL;
    PyObject *tmp_for_loop_22__for_iterator = NULL;
    PyObject *tmp_for_loop_22__iter_value = NULL;
    PyObject *tmp_for_loop_23__for_iterator = NULL;
    PyObject *tmp_for_loop_23__iter_value = NULL;
    PyObject *tmp_for_loop_24__for_iterator = NULL;
    PyObject *tmp_for_loop_24__iter_value = NULL;
    PyObject *tmp_for_loop_25__for_iterator = NULL;
    PyObject *tmp_for_loop_25__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *tmp_for_loop_7__for_iterator = NULL;
    PyObject *tmp_for_loop_7__iter_value = NULL;
    PyObject *tmp_for_loop_8__for_iterator = NULL;
    PyObject *tmp_for_loop_8__iter_value = NULL;
    PyObject *tmp_for_loop_9__for_iterator = NULL;
    PyObject *tmp_for_loop_9__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_genexpr_2__$0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    struct Nuitka_FrameObject *frame_364e3640986744e9c5fd6572b2388037;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    static struct Nuitka_FrameObject *cache_frame_364e3640986744e9c5fd6572b2388037 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_364e3640986744e9c5fd6572b2388037)) {
        Py_XDECREF(cache_frame_364e3640986744e9c5fd6572b2388037);

#if _DEBUG_REFCOUNTS
        if (cache_frame_364e3640986744e9c5fd6572b2388037 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_364e3640986744e9c5fd6572b2388037 = MAKE_FUNCTION_FRAME(codeobj_364e3640986744e9c5fd6572b2388037, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_364e3640986744e9c5fd6572b2388037->m_type_description == NULL);
    frame_364e3640986744e9c5fd6572b2388037 = cache_frame_364e3640986744e9c5fd6572b2388037;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_364e3640986744e9c5fd6572b2388037);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_364e3640986744e9c5fd6572b2388037) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_TimerClass);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_TimerClass);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55515 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 188;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = tmp_mvar_value_1;
        tmp_dict_key_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_dict_key_1, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = const_str_plain_addEventListener;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_dict_key_1, 1, tmp_tuple_element_1);
        tmp_dict_value_1 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_1_lambda();



        tmp_assattr_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_assattr_name_1, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_value_1);
        Py_DECREF(tmp_dict_key_1);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assattr_name_1);

            exception_lineno = 187;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_1 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain__patched_functions, tmp_assattr_name_1);
        Py_DECREF(tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_value_name_1;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_1;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__extract_tags);

            if (unlikely(tmp_mvar_value_2 == NULL)) {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__extract_tags);
            }

            if (tmp_mvar_value_2 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 55547 ], 35, 0);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 191;
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_2;
            CHECK_OBJECT(par_file_contents);
            tmp_args_element_name_1 = par_file_contents;
            frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 191;
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
            if (tmp_iter_arg_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 191;
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
            Py_DECREF(tmp_iter_arg_1);
            if (tmp_assign_source_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 190;
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_genexpr_1__$0 == NULL);
            tmp_genexpr_1__$0 = tmp_assign_source_2;
        }
        // Tried code:
        tmp_value_name_1 = youtube_dl$swfinterp$$$function_22___init__$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_value_name_1)->m_closure[0] = PyCell_NEW0(tmp_genexpr_1__$0);


        goto try_return_handler_2;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;

        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_1:;
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_value_name_1);
        Py_DECREF(tmp_value_name_1);
        if (tmp_assign_source_1 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            exception_lineno = 190;
            goto frame_exception_exit_1;
        }
        assert(var_code_tag == NULL);
        var_code_tag = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_left_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT(var_code_tag);
        tmp_called_instance_1 = var_code_tag;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 193;
        tmp_left_name_1 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_1, const_str_plain_index, &PyTuple_GET_ITEM(const_tuple_bytes_chr_0_int_pos_4_tuple, 0));

        if (tmp_left_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_1;
        tmp_assign_source_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_left_name_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_p == NULL);
        var_p = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_step_name_1;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_io);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_io);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 13577 ], 24, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 194;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_1 = tmp_mvar_value_3;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, const_str_plain_BytesIO);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 194;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_code_tag);
        tmp_expression_name_2 = var_code_tag;
        CHECK_OBJECT(var_p);
        tmp_start_name_1 = var_p;
        tmp_stop_name_1 = Py_None;
        tmp_step_name_1 = Py_None;
        tmp_subscript_name_1 = MAKE_SLICEOBJ3(tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1);
        assert(!(tmp_subscript_name_1 == NULL));
        tmp_args_element_name_2 = LOOKUP_SUBSCRIPT(tmp_expression_name_2, tmp_subscript_name_1);
        Py_DECREF(tmp_subscript_name_1);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 194;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 194;
        tmp_assign_source_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 194;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(PyCell_GET(var_code_reader) == NULL);
        PyCell_SET(var_code_reader, tmp_assign_source_4);

    }
    {
        PyObject *tmp_assign_source_5;
        tmp_assign_source_5 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_2_lambda();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_5)->m_closure[0] = var_code_reader;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_5)->m_closure[0]);


        assert(PyCell_GET(var_u30) == NULL);
        PyCell_SET(var_u30, tmp_assign_source_5);

    }
    {
        PyObject *tmp_assign_source_6;
        tmp_assign_source_6 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_3_lambda();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_6)->m_closure[0] = var_code_reader;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_6)->m_closure[0]);


        assert(var_s32 == NULL);
        var_s32 = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        tmp_assign_source_7 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_4_lambda();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_7)->m_closure[0] = var_code_reader;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_7)->m_closure[0]);


        assert(var_u32 == NULL);
        var_u32 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        tmp_assign_source_8 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_5_lambda();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_8)->m_closure[0] = var_code_reader;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_8)->m_closure[0]);


        assert(var_read_bytes == NULL);
        var_read_bytes = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        tmp_assign_source_9 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_6_lambda();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_9)->m_closure[0] = var_code_reader;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_9)->m_closure[0]);


        assert(PyCell_GET(var_read_byte) == NULL);
        PyCell_SET(var_read_byte, tmp_assign_source_9);

    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(var_read_bytes);
        tmp_called_name_3 = var_read_bytes;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 206;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, const_int_pos_4);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_name_4;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_4 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 209;
        tmp_assign_source_10 = CALL_FUNCTION_NO_ARGS(tmp_called_name_4);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 209;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_int_count == NULL);
        var_int_count = tmp_assign_source_10;
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = LIST_COPY(const_list_int_0_list);
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_2 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_constant_ints, tmp_assattr_name_2);
        Py_DECREF(tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_xrange_low_1;
        PyObject *tmp_xrange_high_1;
        tmp_xrange_low_1 = const_int_pos_1;
        CHECK_OBJECT(var_int_count);
        tmp_xrange_high_1 = var_int_count;
        tmp_iter_arg_2 = BUILTIN_XRANGE2(tmp_xrange_low_1, tmp_xrange_high_1);
        if (tmp_iter_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_11 = MAKE_ITERATOR(tmp_iter_arg_2);
        Py_DECREF(tmp_iter_arg_2);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_11;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_12 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_12 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 211;
                goto try_except_handler_3;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_12;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_13 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var__c;
            var__c = tmp_assign_source_13;
            Py_INCREF(var__c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_5;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_called_name_6;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_4 = PyCell_GET(par_self);
        tmp_expression_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, const_str_plain_constant_ints);
        if (tmp_expression_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 212;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, const_str_plain_append);
        Py_DECREF(tmp_expression_name_3);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 212;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT(var_s32);
        tmp_called_name_6 = var_s32;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 212;
        tmp_args_element_name_3 = CALL_FUNCTION_NO_ARGS(tmp_called_name_6);
        if (tmp_args_element_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 212;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_3;
        }
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 212;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_3);
        Py_DECREF(tmp_called_name_5);
        Py_DECREF(tmp_args_element_name_3);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 212;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_2);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 211;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = LIST_COPY(const_list_int_0_list);
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_3 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_constant_uints, tmp_assattr_name_3);
        Py_DECREF(tmp_assattr_name_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 213;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_name_7;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_7 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 214;
        tmp_assign_source_14 = CALL_FUNCTION_NO_ARGS(tmp_called_name_7);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 214;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_uint_count == NULL);
        var_uint_count = tmp_assign_source_14;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_xrange_low_2;
        PyObject *tmp_xrange_high_2;
        tmp_xrange_low_2 = const_int_pos_1;
        CHECK_OBJECT(var_uint_count);
        tmp_xrange_high_2 = var_uint_count;
        tmp_iter_arg_3 = BUILTIN_XRANGE2(tmp_xrange_low_2, tmp_xrange_high_2);
        if (tmp_iter_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_15 = MAKE_ITERATOR(tmp_iter_arg_3);
        Py_DECREF(tmp_iter_arg_3);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_2__for_iterator == NULL);
        tmp_for_loop_2__for_iterator = tmp_assign_source_15;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT(tmp_for_loop_2__for_iterator);
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_16 = ITERATOR_NEXT(tmp_next_source_2);
        if (tmp_assign_source_16 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_2;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 215;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_16;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_17;
        CHECK_OBJECT(tmp_for_loop_2__iter_value);
        tmp_assign_source_17 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var__c;
            var__c = tmp_assign_source_17;
            Py_INCREF(var__c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_8;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_called_name_9;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_6 = PyCell_GET(par_self);
        tmp_expression_name_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, const_str_plain_constant_uints);
        if (tmp_expression_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_called_name_8 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, const_str_plain_append);
        Py_DECREF(tmp_expression_name_5);
        if (tmp_called_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(var_u32);
        tmp_called_name_9 = var_u32;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 216;
        tmp_args_element_name_4 = CALL_FUNCTION_NO_ARGS(tmp_called_name_9);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_8);

            exception_lineno = 216;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 216;
        tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_8, tmp_args_element_name_4);
        Py_DECREF(tmp_called_name_8);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF(tmp_call_result_3);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 215;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_4;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_called_name_10;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_10 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 217;
        tmp_assign_source_18 = CALL_FUNCTION_NO_ARGS(tmp_called_name_10);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_double_count == NULL);
        var_double_count = tmp_assign_source_18;
    }
    {
        PyObject *tmp_called_name_11;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_left_name_2;
        PyObject *tmp_called_name_12;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_2;
        PyObject *tmp_right_name_3;
        CHECK_OBJECT(var_read_bytes);
        tmp_called_name_11 = var_read_bytes;
        tmp_called_name_12 = LOOKUP_BUILTIN(const_str_plain_max);
        assert(tmp_called_name_12 != NULL);
        tmp_args_element_name_6 = const_int_0;
        CHECK_OBJECT(var_double_count);
        tmp_left_name_3 = var_double_count;
        tmp_right_name_2 = const_int_pos_1;
        tmp_args_element_name_7 = BINARY_OPERATION_SUB_OBJECT_OBJECT_LONG(tmp_left_name_3, tmp_right_name_2);
        if (tmp_args_element_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 218;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 218;
        {
            PyObject *call_args[] = {tmp_args_element_name_6, tmp_args_element_name_7};
            tmp_left_name_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_12, call_args);
        }

        Py_DECREF(tmp_args_element_name_7);
        if (tmp_left_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 218;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_3 = const_int_pos_8;
        tmp_args_element_name_5 = BINARY_OPERATION_MULT_OBJECT_OBJECT_LONG(tmp_left_name_2, tmp_right_name_3);
        Py_DECREF(tmp_left_name_2);
        if (tmp_args_element_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 218;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 218;
        tmp_call_result_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_11, tmp_args_element_name_5);
        Py_DECREF(tmp_args_element_name_5);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 218;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_name_13;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_13 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 219;
        tmp_assign_source_19 = CALL_FUNCTION_NO_ARGS(tmp_called_name_13);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_string_count == NULL);
        var_string_count = tmp_assign_source_19;
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_name_4 = LIST_COPY(const_list_str_empty_list);
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_4 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_constant_strings, tmp_assattr_name_4);
        Py_DECREF(tmp_assattr_name_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_iter_arg_4;
        PyObject *tmp_xrange_low_3;
        PyObject *tmp_xrange_high_3;
        tmp_xrange_low_3 = const_int_pos_1;
        CHECK_OBJECT(var_string_count);
        tmp_xrange_high_3 = var_string_count;
        tmp_iter_arg_4 = BUILTIN_XRANGE2(tmp_xrange_low_3, tmp_xrange_high_3);
        if (tmp_iter_arg_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_20 = MAKE_ITERATOR(tmp_iter_arg_4);
        Py_DECREF(tmp_iter_arg_4);
        if (tmp_assign_source_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_3__for_iterator == NULL);
        tmp_for_loop_3__for_iterator = tmp_assign_source_20;
    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT(tmp_for_loop_3__for_iterator);
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_21 = ITERATOR_NEXT(tmp_next_source_3);
        if (tmp_assign_source_21 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_3;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 221;
                goto try_except_handler_5;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_21;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_22;
        CHECK_OBJECT(tmp_for_loop_3__iter_value);
        tmp_assign_source_22 = tmp_for_loop_3__iter_value;
        {
            PyObject *old = var__c;
            var__c = tmp_assign_source_22;
            Py_INCREF(var__c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_called_name_14;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_element_name_8;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_string);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__read_string);
        }

        if (tmp_mvar_value_4 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55582 ], 34, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 222;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }

        tmp_called_name_14 = tmp_mvar_value_4;
        CHECK_OBJECT(PyCell_GET(var_code_reader));
        tmp_args_element_name_8 = PyCell_GET(var_code_reader);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 222;
        tmp_assign_source_23 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_14, tmp_args_element_name_8);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 222;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = var_s;
            var_s = tmp_assign_source_23;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_expression_name_7;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_9;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_7 = PyCell_GET(par_self);
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_7, const_str_plain_constant_strings);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 223;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        CHECK_OBJECT(var_s);
        tmp_args_element_name_9 = var_s;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 223;
        {
            PyObject *call_args[] = {tmp_args_element_name_9};
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_append, call_args);
        }

        Py_DECREF(tmp_called_instance_2);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 223;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        Py_DECREF(tmp_call_result_5);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 221;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_5;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_called_name_15;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_15 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 224;
        tmp_assign_source_24 = CALL_FUNCTION_NO_ARGS(tmp_called_name_15);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 224;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_namespace_count == NULL);
        var_namespace_count = tmp_assign_source_24;
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_iter_arg_5;
        PyObject *tmp_xrange_low_4;
        PyObject *tmp_xrange_high_4;
        tmp_xrange_low_4 = const_int_pos_1;
        CHECK_OBJECT(var_namespace_count);
        tmp_xrange_high_4 = var_namespace_count;
        tmp_iter_arg_5 = BUILTIN_XRANGE2(tmp_xrange_low_4, tmp_xrange_high_4);
        if (tmp_iter_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 225;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_25 = MAKE_ITERATOR(tmp_iter_arg_5);
        Py_DECREF(tmp_iter_arg_5);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 225;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_4__for_iterator == NULL);
        tmp_for_loop_4__for_iterator = tmp_assign_source_25;
    }
    // Tried code:
    loop_start_4:;
    {
        PyObject *tmp_next_source_4;
        PyObject *tmp_assign_source_26;
        CHECK_OBJECT(tmp_for_loop_4__for_iterator);
        tmp_next_source_4 = tmp_for_loop_4__for_iterator;
        tmp_assign_source_26 = ITERATOR_NEXT(tmp_next_source_4);
        if (tmp_assign_source_26 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_4;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 225;
                goto try_except_handler_6;
            }
        }

        {
            PyObject *old = tmp_for_loop_4__iter_value;
            tmp_for_loop_4__iter_value = tmp_assign_source_26;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_27;
        CHECK_OBJECT(tmp_for_loop_4__iter_value);
        tmp_assign_source_27 = tmp_for_loop_4__iter_value;
        {
            PyObject *old = var__c;
            var__c = tmp_assign_source_27;
            Py_INCREF(var__c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_16;
        PyObject *tmp_call_result_6;
        CHECK_OBJECT(var_read_bytes);
        tmp_called_name_16 = var_read_bytes;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 226;
        tmp_call_result_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_16, const_int_pos_1);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 226;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_called_name_17;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_17 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 227;
        tmp_call_result_7 = CALL_FUNCTION_NO_ARGS(tmp_called_name_17);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 227;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        Py_DECREF(tmp_call_result_7);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 225;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_4__iter_value);
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_4__for_iterator);
    Py_DECREF(tmp_for_loop_4__for_iterator);
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF(tmp_for_loop_4__iter_value);
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_4__for_iterator);
    Py_DECREF(tmp_for_loop_4__for_iterator);
    tmp_for_loop_4__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_called_name_18;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_18 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 228;
        tmp_assign_source_28 = CALL_FUNCTION_NO_ARGS(tmp_called_name_18);
        if (tmp_assign_source_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 228;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_ns_set_count == NULL);
        var_ns_set_count = tmp_assign_source_28;
    }
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_iter_arg_6;
        PyObject *tmp_xrange_low_5;
        PyObject *tmp_xrange_high_5;
        tmp_xrange_low_5 = const_int_pos_1;
        CHECK_OBJECT(var_ns_set_count);
        tmp_xrange_high_5 = var_ns_set_count;
        tmp_iter_arg_6 = BUILTIN_XRANGE2(tmp_xrange_low_5, tmp_xrange_high_5);
        if (tmp_iter_arg_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_29 = MAKE_ITERATOR(tmp_iter_arg_6);
        Py_DECREF(tmp_iter_arg_6);
        if (tmp_assign_source_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_5__for_iterator == NULL);
        tmp_for_loop_5__for_iterator = tmp_assign_source_29;
    }
    // Tried code:
    loop_start_5:;
    {
        PyObject *tmp_next_source_5;
        PyObject *tmp_assign_source_30;
        CHECK_OBJECT(tmp_for_loop_5__for_iterator);
        tmp_next_source_5 = tmp_for_loop_5__for_iterator;
        tmp_assign_source_30 = ITERATOR_NEXT(tmp_next_source_5);
        if (tmp_assign_source_30 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_5;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 229;
                goto try_except_handler_7;
            }
        }

        {
            PyObject *old = tmp_for_loop_5__iter_value;
            tmp_for_loop_5__iter_value = tmp_assign_source_30;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_31;
        CHECK_OBJECT(tmp_for_loop_5__iter_value);
        tmp_assign_source_31 = tmp_for_loop_5__iter_value;
        {
            PyObject *old = var__c;
            var__c = tmp_assign_source_31;
            Py_INCREF(var__c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_called_name_19;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_19 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 230;
        tmp_assign_source_32 = CALL_FUNCTION_NO_ARGS(tmp_called_name_19);
        if (tmp_assign_source_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = var_count;
            var_count = tmp_assign_source_32;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_iter_arg_7;
        PyObject *tmp_xrange_low_6;
        CHECK_OBJECT(var_count);
        tmp_xrange_low_6 = var_count;
        tmp_iter_arg_7 = BUILTIN_XRANGE1(tmp_xrange_low_6);
        if (tmp_iter_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_33 = MAKE_ITERATOR(tmp_iter_arg_7);
        Py_DECREF(tmp_iter_arg_7);
        if (tmp_assign_source_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = tmp_for_loop_6__for_iterator;
            tmp_for_loop_6__for_iterator = tmp_assign_source_33;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_6:;
    {
        PyObject *tmp_next_source_6;
        PyObject *tmp_assign_source_34;
        CHECK_OBJECT(tmp_for_loop_6__for_iterator);
        tmp_next_source_6 = tmp_for_loop_6__for_iterator;
        tmp_assign_source_34 = ITERATOR_NEXT(tmp_next_source_6);
        if (tmp_assign_source_34 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_6;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 231;
                goto try_except_handler_8;
            }
        }

        {
            PyObject *old = tmp_for_loop_6__iter_value;
            tmp_for_loop_6__iter_value = tmp_assign_source_34;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_35;
        CHECK_OBJECT(tmp_for_loop_6__iter_value);
        tmp_assign_source_35 = tmp_for_loop_6__iter_value;
        {
            PyObject *old = var__c2;
            var__c2 = tmp_assign_source_35;
            Py_INCREF(var__c2);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_20;
        PyObject *tmp_call_result_8;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_20 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 232;
        tmp_call_result_8 = CALL_FUNCTION_NO_ARGS(tmp_called_name_20);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        Py_DECREF(tmp_call_result_8);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 231;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_8;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_6__iter_value);
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_6__for_iterator);
    Py_DECREF(tmp_for_loop_6__for_iterator);
    tmp_for_loop_6__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_7;
    // End of try:
    try_end_5:;
    Py_XDECREF(tmp_for_loop_6__iter_value);
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_6__for_iterator);
    Py_DECREF(tmp_for_loop_6__for_iterator);
    tmp_for_loop_6__for_iterator = NULL;

    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 229;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_7;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_5__iter_value);
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_5__for_iterator);
    Py_DECREF(tmp_for_loop_5__for_iterator);
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF(tmp_for_loop_5__iter_value);
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_5__for_iterator);
    Py_DECREF(tmp_for_loop_5__for_iterator);
    tmp_for_loop_5__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_called_name_21;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_21 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 233;
        tmp_assign_source_36 = CALL_FUNCTION_NO_ARGS(tmp_called_name_21);
        if (tmp_assign_source_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 233;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_multiname_count == NULL);
        var_multiname_count = tmp_assign_source_36;
    }
    {
        PyObject *tmp_assign_source_37;
        tmp_assign_source_37 = PyDict_Copy(const_dict_ac3d774bcf145ccba9eb73242f9fba02);
        assert(var_MULTINAME_SIZES == NULL);
        var_MULTINAME_SIZES = tmp_assign_source_37;
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = LIST_COPY(const_list_str_empty_list);
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_5 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, const_str_plain_multinames, tmp_assattr_name_5);
        Py_DECREF(tmp_assattr_name_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 246;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_iter_arg_8;
        PyObject *tmp_xrange_low_7;
        PyObject *tmp_xrange_high_6;
        tmp_xrange_low_7 = const_int_pos_1;
        CHECK_OBJECT(var_multiname_count);
        tmp_xrange_high_6 = var_multiname_count;
        tmp_iter_arg_8 = BUILTIN_XRANGE2(tmp_xrange_low_7, tmp_xrange_high_6);
        if (tmp_iter_arg_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 247;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_38 = MAKE_ITERATOR(tmp_iter_arg_8);
        Py_DECREF(tmp_iter_arg_8);
        if (tmp_assign_source_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 247;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_7__for_iterator == NULL);
        tmp_for_loop_7__for_iterator = tmp_assign_source_38;
    }
    // Tried code:
    loop_start_7:;
    {
        PyObject *tmp_next_source_7;
        PyObject *tmp_assign_source_39;
        CHECK_OBJECT(tmp_for_loop_7__for_iterator);
        tmp_next_source_7 = tmp_for_loop_7__for_iterator;
        tmp_assign_source_39 = ITERATOR_NEXT(tmp_next_source_7);
        if (tmp_assign_source_39 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_7;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 247;
                goto try_except_handler_9;
            }
        }

        {
            PyObject *old = tmp_for_loop_7__iter_value;
            tmp_for_loop_7__iter_value = tmp_assign_source_39;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_40;
        CHECK_OBJECT(tmp_for_loop_7__iter_value);
        tmp_assign_source_40 = tmp_for_loop_7__iter_value;
        {
            PyObject *old = var__c;
            var__c = tmp_assign_source_40;
            Py_INCREF(var__c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_41;
        PyObject *tmp_called_name_22;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_22 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 248;
        tmp_assign_source_41 = CALL_FUNCTION_NO_ARGS(tmp_called_name_22);
        if (tmp_assign_source_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 248;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        {
            PyObject *old = var_kind;
            var_kind = tmp_assign_source_41;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_name_1;
        CHECK_OBJECT(var_kind);
        tmp_key_name_1 = var_kind;
        CHECK_OBJECT(var_MULTINAME_SIZES);
        tmp_dict_name_1 = var_MULTINAME_SIZES;
        tmp_res = PyDict_Contains(tmp_dict_name_1, tmp_key_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        tmp_raise_type_1 = PyExc_AssertionError;
        tmp_left_name_4 = const_str_digest_e31a75d3fd3f3454d980a90ffbcf8a1c;
        CHECK_OBJECT(var_kind);
        tmp_right_name_4 = var_kind;
        tmp_tuple_element_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_4, tmp_right_name_4);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_raise_value_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_raise_value_1, 0, tmp_tuple_element_2);
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 249;
        RAISE_EXCEPTION_WITH_VALUE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_9;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_tmp_condition_result_2_object_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_kind);
        tmp_compexpr_left_1 = var_kind;
        tmp_compexpr_right_1 = const_int_pos_7;
        tmp_tmp_condition_result_2_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_tmp_condition_result_2_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 250;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_2_object_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_2_object_1);

            exception_lineno = 250;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_2_object_1);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_name_23;
        PyObject *tmp_call_result_9;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_23 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 251;
        tmp_call_result_9 = CALL_FUNCTION_NO_ARGS(tmp_called_name_23);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 251;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        PyObject *tmp_assign_source_42;
        PyObject *tmp_called_name_24;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_24 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 252;
        tmp_assign_source_42 = CALL_FUNCTION_NO_ARGS(tmp_called_name_24);
        if (tmp_assign_source_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        {
            PyObject *old = var_name_idx;
            var_name_idx = tmp_assign_source_42;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_25;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_expression_name_11;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_9 = PyCell_GET(par_self);
        tmp_expression_name_8 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, const_str_plain_multinames);
        if (tmp_expression_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_called_name_25 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, const_str_plain_append);
        Py_DECREF(tmp_expression_name_8);
        if (tmp_called_name_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_11 = PyCell_GET(par_self);
        tmp_expression_name_10 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, const_str_plain_constant_strings);
        if (tmp_expression_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_25);

            exception_lineno = 253;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        CHECK_OBJECT(var_name_idx);
        tmp_subscript_name_2 = var_name_idx;
        tmp_args_element_name_10 = LOOKUP_SUBSCRIPT(tmp_expression_name_10, tmp_subscript_name_2);
        Py_DECREF(tmp_expression_name_10);
        if (tmp_args_element_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_25);

            exception_lineno = 253;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 253;
        tmp_call_result_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_25, tmp_args_element_name_10);
        Py_DECREF(tmp_called_name_25);
        Py_DECREF(tmp_args_element_name_10);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        Py_DECREF(tmp_call_result_10);
    }
    goto branch_end_2;
    branch_no_2:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_tmp_condition_result_3_object_1;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_kind);
        tmp_compexpr_left_2 = var_kind;
        tmp_compexpr_right_2 = const_int_pos_9;
        tmp_tmp_condition_result_3_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        if (tmp_tmp_condition_result_3_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_tmp_condition_result_3_object_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_3_object_1);

            exception_lineno = 254;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_condition_result_3 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_3_object_1);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_43;
        PyObject *tmp_called_name_26;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_26 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 255;
        tmp_assign_source_43 = CALL_FUNCTION_NO_ARGS(tmp_called_name_26);
        if (tmp_assign_source_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 255;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        {
            PyObject *old = var_name_idx;
            var_name_idx = tmp_assign_source_43;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_27;
        PyObject *tmp_call_result_11;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_27 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 256;
        tmp_call_result_11 = CALL_FUNCTION_NO_ARGS(tmp_called_name_27);
        if (tmp_call_result_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        Py_DECREF(tmp_call_result_11);
    }
    {
        PyObject *tmp_called_name_28;
        PyObject *tmp_expression_name_12;
        PyObject *tmp_expression_name_13;
        PyObject *tmp_call_result_12;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_expression_name_14;
        PyObject *tmp_expression_name_15;
        PyObject *tmp_subscript_name_3;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_13 = PyCell_GET(par_self);
        tmp_expression_name_12 = LOOKUP_ATTRIBUTE(tmp_expression_name_13, const_str_plain_multinames);
        if (tmp_expression_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 257;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_called_name_28 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, const_str_plain_append);
        Py_DECREF(tmp_expression_name_12);
        if (tmp_called_name_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 257;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_15 = PyCell_GET(par_self);
        tmp_expression_name_14 = LOOKUP_ATTRIBUTE(tmp_expression_name_15, const_str_plain_constant_strings);
        if (tmp_expression_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_28);

            exception_lineno = 257;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        CHECK_OBJECT(var_name_idx);
        tmp_subscript_name_3 = var_name_idx;
        tmp_args_element_name_11 = LOOKUP_SUBSCRIPT(tmp_expression_name_14, tmp_subscript_name_3);
        Py_DECREF(tmp_expression_name_14);
        if (tmp_args_element_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_28);

            exception_lineno = 257;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 257;
        tmp_call_result_12 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_28, tmp_args_element_name_11);
        Py_DECREF(tmp_called_name_28);
        Py_DECREF(tmp_args_element_name_11);
        if (tmp_call_result_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 257;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        Py_DECREF(tmp_call_result_12);
    }
    goto branch_end_3;
    branch_no_3:;
    {
        PyObject *tmp_called_name_29;
        PyObject *tmp_expression_name_16;
        PyObject *tmp_expression_name_17;
        PyObject *tmp_call_result_13;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_called_name_30;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_args_element_name_13;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_17 = PyCell_GET(par_self);
        tmp_expression_name_16 = LOOKUP_ATTRIBUTE(tmp_expression_name_17, const_str_plain_multinames);
        if (tmp_expression_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_called_name_29 = LOOKUP_ATTRIBUTE(tmp_expression_name_16, const_str_plain_append);
        Py_DECREF(tmp_expression_name_16);
        if (tmp_called_name_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__Multiname);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__Multiname);
        }

        if (tmp_mvar_value_5 == NULL) {
            Py_DECREF(tmp_called_name_29);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55616 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 259;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }

        tmp_called_name_30 = tmp_mvar_value_5;
        CHECK_OBJECT(var_kind);
        tmp_args_element_name_13 = var_kind;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 259;
        tmp_args_element_name_12 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_30, tmp_args_element_name_13);
        if (tmp_args_element_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_29);

            exception_lineno = 259;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 259;
        tmp_call_result_13 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_29, tmp_args_element_name_12);
        Py_DECREF(tmp_called_name_29);
        Py_DECREF(tmp_args_element_name_12);
        if (tmp_call_result_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        Py_DECREF(tmp_call_result_13);
    }
    {
        PyObject *tmp_assign_source_44;
        PyObject *tmp_iter_arg_9;
        PyObject *tmp_xrange_low_8;
        PyObject *tmp_dict_name_2;
        PyObject *tmp_key_name_2;
        CHECK_OBJECT(var_MULTINAME_SIZES);
        tmp_dict_name_2 = var_MULTINAME_SIZES;
        CHECK_OBJECT(var_kind);
        tmp_key_name_2 = var_kind;
        tmp_xrange_low_8 = DICT_GET_ITEM(tmp_dict_name_2, tmp_key_name_2);
        if (tmp_xrange_low_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_iter_arg_9 = BUILTIN_XRANGE1(tmp_xrange_low_8);
        Py_DECREF(tmp_xrange_low_8);
        if (tmp_iter_arg_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_assign_source_44 = MAKE_ITERATOR(tmp_iter_arg_9);
        Py_DECREF(tmp_iter_arg_9);
        if (tmp_assign_source_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        {
            PyObject *old = tmp_for_loop_8__for_iterator;
            tmp_for_loop_8__for_iterator = tmp_assign_source_44;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_8:;
    {
        PyObject *tmp_next_source_8;
        PyObject *tmp_assign_source_45;
        CHECK_OBJECT(tmp_for_loop_8__for_iterator);
        tmp_next_source_8 = tmp_for_loop_8__for_iterator;
        tmp_assign_source_45 = ITERATOR_NEXT(tmp_next_source_8);
        if (tmp_assign_source_45 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_8;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 260;
                goto try_except_handler_10;
            }
        }

        {
            PyObject *old = tmp_for_loop_8__iter_value;
            tmp_for_loop_8__iter_value = tmp_assign_source_45;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_46;
        CHECK_OBJECT(tmp_for_loop_8__iter_value);
        tmp_assign_source_46 = tmp_for_loop_8__iter_value;
        {
            PyObject *old = var__c2;
            var__c2 = tmp_assign_source_46;
            Py_INCREF(var__c2);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_31;
        PyObject *tmp_call_result_14;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_31 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 261;
        tmp_call_result_14 = CALL_FUNCTION_NO_ARGS(tmp_called_name_31);
        if (tmp_call_result_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_10;
        }
        Py_DECREF(tmp_call_result_14);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 260;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_10;
    }
    goto loop_start_8;
    loop_end_8:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_8__iter_value);
    tmp_for_loop_8__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_8__for_iterator);
    Py_DECREF(tmp_for_loop_8__for_iterator);
    tmp_for_loop_8__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto try_except_handler_9;
    // End of try:
    try_end_7:;
    Py_XDECREF(tmp_for_loop_8__iter_value);
    tmp_for_loop_8__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_8__for_iterator);
    Py_DECREF(tmp_for_loop_8__for_iterator);
    tmp_for_loop_8__for_iterator = NULL;

    branch_end_3:;
    branch_end_2:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 247;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_9;
    }
    goto loop_start_7;
    loop_end_7:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_7__iter_value);
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_7__for_iterator);
    Py_DECREF(tmp_for_loop_7__for_iterator);
    tmp_for_loop_7__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    Py_XDECREF(tmp_for_loop_7__iter_value);
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_7__for_iterator);
    Py_DECREF(tmp_for_loop_7__for_iterator);
    tmp_for_loop_7__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_47;
        PyObject *tmp_called_name_32;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_32 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 264;
        tmp_assign_source_47 = CALL_FUNCTION_NO_ARGS(tmp_called_name_32);
        if (tmp_assign_source_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 264;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_method_count == NULL);
        var_method_count = tmp_assign_source_47;
    }
    {
        PyObject *tmp_assign_source_48;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_call_arg_element_1;
        PyObject *tmp_call_arg_element_2;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_collections);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_collections);
        }

        if (tmp_mvar_value_6 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 22077 ], 33, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 265;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_3 = tmp_mvar_value_6;
        tmp_call_arg_element_1 = const_str_plain_MethodInfo;
        tmp_call_arg_element_2 = LIST_COPY(const_list_str_plain_NEED_ARGUMENTS_str_plain_NEED_REST_list);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 265;
        {
            PyObject *call_args[] = {tmp_call_arg_element_1, tmp_call_arg_element_2};
            tmp_assign_source_48 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_3, const_str_plain_namedtuple, call_args);
        }

        Py_DECREF(tmp_call_arg_element_2);
        if (tmp_assign_source_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 265;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_MethodInfo == NULL);
        var_MethodInfo = tmp_assign_source_48;
    }
    {
        PyObject *tmp_assign_source_49;
        tmp_assign_source_49 = PyList_New(0);
        assert(var_method_infos == NULL);
        var_method_infos = tmp_assign_source_49;
    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_iter_arg_10;
        PyObject *tmp_xrange_low_9;
        CHECK_OBJECT(var_method_count);
        tmp_xrange_low_9 = var_method_count;
        tmp_iter_arg_10 = BUILTIN_XRANGE1(tmp_xrange_low_9);
        if (tmp_iter_arg_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 269;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_50 = MAKE_ITERATOR(tmp_iter_arg_10);
        Py_DECREF(tmp_iter_arg_10);
        if (tmp_assign_source_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 269;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_9__for_iterator == NULL);
        tmp_for_loop_9__for_iterator = tmp_assign_source_50;
    }
    // Tried code:
    loop_start_9:;
    {
        PyObject *tmp_next_source_9;
        PyObject *tmp_assign_source_51;
        CHECK_OBJECT(tmp_for_loop_9__for_iterator);
        tmp_next_source_9 = tmp_for_loop_9__for_iterator;
        tmp_assign_source_51 = ITERATOR_NEXT(tmp_next_source_9);
        if (tmp_assign_source_51 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_9;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 269;
                goto try_except_handler_11;
            }
        }

        {
            PyObject *old = tmp_for_loop_9__iter_value;
            tmp_for_loop_9__iter_value = tmp_assign_source_51;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_52;
        CHECK_OBJECT(tmp_for_loop_9__iter_value);
        tmp_assign_source_52 = tmp_for_loop_9__iter_value;
        {
            PyObject *old = var_method_id;
            var_method_id = tmp_assign_source_52;
            Py_INCREF(var_method_id);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_53;
        PyObject *tmp_called_name_33;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_33 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 270;
        tmp_assign_source_53 = CALL_FUNCTION_NO_ARGS(tmp_called_name_33);
        if (tmp_assign_source_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 270;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = var_param_count;
            var_param_count = tmp_assign_source_53;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_34;
        PyObject *tmp_call_result_15;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_34 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 271;
        tmp_call_result_15 = CALL_FUNCTION_NO_ARGS(tmp_called_name_34);
        if (tmp_call_result_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        Py_DECREF(tmp_call_result_15);
    }
    {
        PyObject *tmp_assign_source_54;
        PyObject *tmp_iter_arg_11;
        PyObject *tmp_xrange_low_10;
        CHECK_OBJECT(var_param_count);
        tmp_xrange_low_10 = var_param_count;
        tmp_iter_arg_11 = BUILTIN_XRANGE1(tmp_xrange_low_10);
        if (tmp_iter_arg_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 272;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_assign_source_54 = MAKE_ITERATOR(tmp_iter_arg_11);
        Py_DECREF(tmp_iter_arg_11);
        if (tmp_assign_source_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 272;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = tmp_for_loop_10__for_iterator;
            tmp_for_loop_10__for_iterator = tmp_assign_source_54;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_10:;
    {
        PyObject *tmp_next_source_10;
        PyObject *tmp_assign_source_55;
        CHECK_OBJECT(tmp_for_loop_10__for_iterator);
        tmp_next_source_10 = tmp_for_loop_10__for_iterator;
        tmp_assign_source_55 = ITERATOR_NEXT(tmp_next_source_10);
        if (tmp_assign_source_55 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_10;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 272;
                goto try_except_handler_12;
            }
        }

        {
            PyObject *old = tmp_for_loop_10__iter_value;
            tmp_for_loop_10__iter_value = tmp_assign_source_55;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_56;
        CHECK_OBJECT(tmp_for_loop_10__iter_value);
        tmp_assign_source_56 = tmp_for_loop_10__iter_value;
        {
            PyObject *old = var__;
            var__ = tmp_assign_source_56;
            Py_INCREF(var__);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_35;
        PyObject *tmp_call_result_16;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_35 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 273;
        tmp_call_result_16 = CALL_FUNCTION_NO_ARGS(tmp_called_name_35);
        if (tmp_call_result_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 273;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_12;
        }
        Py_DECREF(tmp_call_result_16);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 272;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_12;
    }
    goto loop_start_10;
    loop_end_10:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_10__iter_value);
    tmp_for_loop_10__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_10__for_iterator);
    Py_DECREF(tmp_for_loop_10__for_iterator);
    tmp_for_loop_10__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto try_except_handler_11;
    // End of try:
    try_end_9:;
    Py_XDECREF(tmp_for_loop_10__iter_value);
    tmp_for_loop_10__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_10__for_iterator);
    Py_DECREF(tmp_for_loop_10__for_iterator);
    tmp_for_loop_10__for_iterator = NULL;

    {
        PyObject *tmp_called_name_36;
        PyObject *tmp_call_result_17;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_36 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 274;
        tmp_call_result_17 = CALL_FUNCTION_NO_ARGS(tmp_called_name_36);
        if (tmp_call_result_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        Py_DECREF(tmp_call_result_17);
    }
    {
        PyObject *tmp_assign_source_57;
        PyObject *tmp_called_name_37;
        CHECK_OBJECT(PyCell_GET(var_read_byte));
        tmp_called_name_37 = PyCell_GET(var_read_byte);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 275;
        tmp_assign_source_57 = CALL_FUNCTION_NO_ARGS(tmp_called_name_37);
        if (tmp_assign_source_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 275;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = var_flags;
            var_flags = tmp_assign_source_57;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_5;
        PyObject *tmp_tmp_condition_result_4_object_1;
        int tmp_truth_name_3;
        CHECK_OBJECT(var_flags);
        tmp_left_name_5 = var_flags;
        tmp_right_name_5 = const_int_pos_8;
        tmp_compexpr_left_3 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_5, tmp_right_name_5);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_compexpr_right_3 = const_int_0;
        tmp_tmp_condition_result_4_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        if (tmp_tmp_condition_result_4_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_tmp_condition_result_4_object_1);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_4_object_1);

            exception_lineno = 276;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_4 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_4_object_1);
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_58;
        PyObject *tmp_called_name_38;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_38 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 278;
        tmp_assign_source_58 = CALL_FUNCTION_NO_ARGS(tmp_called_name_38);
        if (tmp_assign_source_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = var_option_count;
            var_option_count = tmp_assign_source_58;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_59;
        PyObject *tmp_iter_arg_12;
        PyObject *tmp_xrange_low_11;
        CHECK_OBJECT(var_option_count);
        tmp_xrange_low_11 = var_option_count;
        tmp_iter_arg_12 = BUILTIN_XRANGE1(tmp_xrange_low_11);
        if (tmp_iter_arg_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_assign_source_59 = MAKE_ITERATOR(tmp_iter_arg_12);
        Py_DECREF(tmp_iter_arg_12);
        if (tmp_assign_source_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = tmp_for_loop_11__for_iterator;
            tmp_for_loop_11__for_iterator = tmp_assign_source_59;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_11:;
    {
        PyObject *tmp_next_source_11;
        PyObject *tmp_assign_source_60;
        CHECK_OBJECT(tmp_for_loop_11__for_iterator);
        tmp_next_source_11 = tmp_for_loop_11__for_iterator;
        tmp_assign_source_60 = ITERATOR_NEXT(tmp_next_source_11);
        if (tmp_assign_source_60 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_11;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 279;
                goto try_except_handler_13;
            }
        }

        {
            PyObject *old = tmp_for_loop_11__iter_value;
            tmp_for_loop_11__iter_value = tmp_assign_source_60;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_61;
        CHECK_OBJECT(tmp_for_loop_11__iter_value);
        tmp_assign_source_61 = tmp_for_loop_11__iter_value;
        {
            PyObject *old = var_c;
            var_c = tmp_assign_source_61;
            Py_INCREF(var_c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_39;
        PyObject *tmp_call_result_18;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_39 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 280;
        tmp_call_result_18 = CALL_FUNCTION_NO_ARGS(tmp_called_name_39);
        if (tmp_call_result_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_13;
        }
        Py_DECREF(tmp_call_result_18);
    }
    {
        PyObject *tmp_called_name_40;
        PyObject *tmp_call_result_19;
        CHECK_OBJECT(var_read_bytes);
        tmp_called_name_40 = var_read_bytes;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 281;
        tmp_call_result_19 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_40, const_int_pos_1);
        if (tmp_call_result_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 281;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_13;
        }
        Py_DECREF(tmp_call_result_19);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 279;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_13;
    }
    goto loop_start_11;
    loop_end_11:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_11__iter_value);
    tmp_for_loop_11__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_11__for_iterator);
    Py_DECREF(tmp_for_loop_11__for_iterator);
    tmp_for_loop_11__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto try_except_handler_11;
    // End of try:
    try_end_10:;
    Py_XDECREF(tmp_for_loop_11__iter_value);
    tmp_for_loop_11__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_11__for_iterator);
    Py_DECREF(tmp_for_loop_11__for_iterator);
    tmp_for_loop_11__for_iterator = NULL;

    branch_no_4:;
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_left_name_6;
        PyObject *tmp_right_name_6;
        PyObject *tmp_tmp_condition_result_5_object_1;
        int tmp_truth_name_4;
        CHECK_OBJECT(var_flags);
        tmp_left_name_6 = var_flags;
        tmp_right_name_6 = const_int_pos_128;
        tmp_compexpr_left_4 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_6, tmp_right_name_6);
        if (tmp_compexpr_left_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 282;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_compexpr_right_4 = const_int_0;
        tmp_tmp_condition_result_5_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
        Py_DECREF(tmp_compexpr_left_4);
        if (tmp_tmp_condition_result_5_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 282;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_tmp_condition_result_5_object_1);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_5_object_1);

            exception_lineno = 282;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_5 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_5_object_1);
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_assign_source_62;
        PyObject *tmp_iter_arg_13;
        PyObject *tmp_xrange_low_12;
        CHECK_OBJECT(var_param_count);
        tmp_xrange_low_12 = var_param_count;
        tmp_iter_arg_13 = BUILTIN_XRANGE1(tmp_xrange_low_12);
        if (tmp_iter_arg_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_assign_source_62 = MAKE_ITERATOR(tmp_iter_arg_13);
        Py_DECREF(tmp_iter_arg_13);
        if (tmp_assign_source_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = tmp_for_loop_12__for_iterator;
            tmp_for_loop_12__for_iterator = tmp_assign_source_62;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_12:;
    {
        PyObject *tmp_next_source_12;
        PyObject *tmp_assign_source_63;
        CHECK_OBJECT(tmp_for_loop_12__for_iterator);
        tmp_next_source_12 = tmp_for_loop_12__for_iterator;
        tmp_assign_source_63 = ITERATOR_NEXT(tmp_next_source_12);
        if (tmp_assign_source_63 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_12;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 284;
                goto try_except_handler_14;
            }
        }

        {
            PyObject *old = tmp_for_loop_12__iter_value;
            tmp_for_loop_12__iter_value = tmp_assign_source_63;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_64;
        CHECK_OBJECT(tmp_for_loop_12__iter_value);
        tmp_assign_source_64 = tmp_for_loop_12__iter_value;
        {
            PyObject *old = var__;
            var__ = tmp_assign_source_64;
            Py_INCREF(var__);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_41;
        PyObject *tmp_call_result_20;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_41 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 285;
        tmp_call_result_20 = CALL_FUNCTION_NO_ARGS(tmp_called_name_41);
        if (tmp_call_result_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 285;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_14;
        }
        Py_DECREF(tmp_call_result_20);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 284;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_14;
    }
    goto loop_start_12;
    loop_end_12:;
    goto try_end_11;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_12__iter_value);
    tmp_for_loop_12__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_12__for_iterator);
    Py_DECREF(tmp_for_loop_12__for_iterator);
    tmp_for_loop_12__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto try_except_handler_11;
    // End of try:
    try_end_11:;
    Py_XDECREF(tmp_for_loop_12__iter_value);
    tmp_for_loop_12__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_12__for_iterator);
    Py_DECREF(tmp_for_loop_12__for_iterator);
    tmp_for_loop_12__for_iterator = NULL;

    branch_no_5:;
    {
        PyObject *tmp_assign_source_65;
        PyObject *tmp_called_name_42;
        PyObject *tmp_args_element_name_14;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_left_name_7;
        PyObject *tmp_right_name_7;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        PyObject *tmp_left_name_8;
        PyObject *tmp_right_name_8;
        CHECK_OBJECT(var_MethodInfo);
        tmp_called_name_42 = var_MethodInfo;
        CHECK_OBJECT(var_flags);
        tmp_left_name_7 = var_flags;
        tmp_right_name_7 = const_int_pos_1;
        tmp_compexpr_left_5 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_7, tmp_right_name_7);
        if (tmp_compexpr_left_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_compexpr_right_5 = const_int_0;
        tmp_args_element_name_14 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_5, tmp_compexpr_right_5);
        Py_DECREF(tmp_compexpr_left_5);
        if (tmp_args_element_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        CHECK_OBJECT(var_flags);
        tmp_left_name_8 = var_flags;
        tmp_right_name_8 = const_int_pos_4;
        tmp_compexpr_left_6 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_8, tmp_right_name_8);
        if (tmp_compexpr_left_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_name_14);

            exception_lineno = 286;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        tmp_compexpr_right_6 = const_int_0;
        tmp_args_element_name_15 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_6, tmp_compexpr_right_6);
        Py_DECREF(tmp_compexpr_left_6);
        if (tmp_args_element_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_name_14);

            exception_lineno = 286;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 286;
        {
            PyObject *call_args[] = {tmp_args_element_name_14, tmp_args_element_name_15};
            tmp_assign_source_65 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_42, call_args);
        }

        Py_DECREF(tmp_args_element_name_14);
        Py_DECREF(tmp_args_element_name_15);
        if (tmp_assign_source_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = var_mi;
            var_mi = tmp_assign_source_65;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_21;
        PyObject *tmp_args_element_name_16;
        CHECK_OBJECT(var_method_infos);
        tmp_called_instance_4 = var_method_infos;
        CHECK_OBJECT(var_mi);
        tmp_args_element_name_16 = var_mi;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 287;
        {
            PyObject *call_args[] = {tmp_args_element_name_16};
            tmp_call_result_21 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_append, call_args);
        }

        if (tmp_call_result_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 287;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        Py_DECREF(tmp_call_result_21);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 269;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_11;
    }
    goto loop_start_9;
    loop_end_9:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_9__iter_value);
    tmp_for_loop_9__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_9__for_iterator);
    Py_DECREF(tmp_for_loop_9__for_iterator);
    tmp_for_loop_9__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    Py_XDECREF(tmp_for_loop_9__iter_value);
    tmp_for_loop_9__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_9__for_iterator);
    Py_DECREF(tmp_for_loop_9__for_iterator);
    tmp_for_loop_9__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_66;
        PyObject *tmp_called_name_43;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_43 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 290;
        tmp_assign_source_66 = CALL_FUNCTION_NO_ARGS(tmp_called_name_43);
        if (tmp_assign_source_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_metadata_count == NULL);
        var_metadata_count = tmp_assign_source_66;
    }
    {
        PyObject *tmp_assign_source_67;
        PyObject *tmp_iter_arg_14;
        PyObject *tmp_xrange_low_13;
        CHECK_OBJECT(var_metadata_count);
        tmp_xrange_low_13 = var_metadata_count;
        tmp_iter_arg_14 = BUILTIN_XRANGE1(tmp_xrange_low_13);
        if (tmp_iter_arg_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_67 = MAKE_ITERATOR(tmp_iter_arg_14);
        Py_DECREF(tmp_iter_arg_14);
        if (tmp_assign_source_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_13__for_iterator == NULL);
        tmp_for_loop_13__for_iterator = tmp_assign_source_67;
    }
    // Tried code:
    loop_start_13:;
    {
        PyObject *tmp_next_source_13;
        PyObject *tmp_assign_source_68;
        CHECK_OBJECT(tmp_for_loop_13__for_iterator);
        tmp_next_source_13 = tmp_for_loop_13__for_iterator;
        tmp_assign_source_68 = ITERATOR_NEXT(tmp_next_source_13);
        if (tmp_assign_source_68 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_13;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 291;
                goto try_except_handler_15;
            }
        }

        {
            PyObject *old = tmp_for_loop_13__iter_value;
            tmp_for_loop_13__iter_value = tmp_assign_source_68;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_69;
        CHECK_OBJECT(tmp_for_loop_13__iter_value);
        tmp_assign_source_69 = tmp_for_loop_13__iter_value;
        {
            PyObject *old = var__c;
            var__c = tmp_assign_source_69;
            Py_INCREF(var__c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_44;
        PyObject *tmp_call_result_22;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_44 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 292;
        tmp_call_result_22 = CALL_FUNCTION_NO_ARGS(tmp_called_name_44);
        if (tmp_call_result_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_15;
        }
        Py_DECREF(tmp_call_result_22);
    }
    {
        PyObject *tmp_assign_source_70;
        PyObject *tmp_called_name_45;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_45 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 293;
        tmp_assign_source_70 = CALL_FUNCTION_NO_ARGS(tmp_called_name_45);
        if (tmp_assign_source_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 293;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_15;
        }
        {
            PyObject *old = var_item_count;
            var_item_count = tmp_assign_source_70;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_71;
        PyObject *tmp_iter_arg_15;
        PyObject *tmp_xrange_low_14;
        CHECK_OBJECT(var_item_count);
        tmp_xrange_low_14 = var_item_count;
        tmp_iter_arg_15 = BUILTIN_XRANGE1(tmp_xrange_low_14);
        if (tmp_iter_arg_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_15;
        }
        tmp_assign_source_71 = MAKE_ITERATOR(tmp_iter_arg_15);
        Py_DECREF(tmp_iter_arg_15);
        if (tmp_assign_source_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 294;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_15;
        }
        {
            PyObject *old = tmp_for_loop_14__for_iterator;
            tmp_for_loop_14__for_iterator = tmp_assign_source_71;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_14:;
    {
        PyObject *tmp_next_source_14;
        PyObject *tmp_assign_source_72;
        CHECK_OBJECT(tmp_for_loop_14__for_iterator);
        tmp_next_source_14 = tmp_for_loop_14__for_iterator;
        tmp_assign_source_72 = ITERATOR_NEXT(tmp_next_source_14);
        if (tmp_assign_source_72 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_14;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 294;
                goto try_except_handler_16;
            }
        }

        {
            PyObject *old = tmp_for_loop_14__iter_value;
            tmp_for_loop_14__iter_value = tmp_assign_source_72;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_73;
        CHECK_OBJECT(tmp_for_loop_14__iter_value);
        tmp_assign_source_73 = tmp_for_loop_14__iter_value;
        {
            PyObject *old = var__c2;
            var__c2 = tmp_assign_source_73;
            Py_INCREF(var__c2);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_46;
        PyObject *tmp_call_result_23;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_46 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 295;
        tmp_call_result_23 = CALL_FUNCTION_NO_ARGS(tmp_called_name_46);
        if (tmp_call_result_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_16;
        }
        Py_DECREF(tmp_call_result_23);
    }
    {
        PyObject *tmp_called_name_47;
        PyObject *tmp_call_result_24;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_47 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 296;
        tmp_call_result_24 = CALL_FUNCTION_NO_ARGS(tmp_called_name_47);
        if (tmp_call_result_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_16;
        }
        Py_DECREF(tmp_call_result_24);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 294;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_16;
    }
    goto loop_start_14;
    loop_end_14:;
    goto try_end_13;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_14__iter_value);
    tmp_for_loop_14__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_14__for_iterator);
    Py_DECREF(tmp_for_loop_14__for_iterator);
    tmp_for_loop_14__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto try_except_handler_15;
    // End of try:
    try_end_13:;
    Py_XDECREF(tmp_for_loop_14__iter_value);
    tmp_for_loop_14__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_14__for_iterator);
    Py_DECREF(tmp_for_loop_14__for_iterator);
    tmp_for_loop_14__for_iterator = NULL;

    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 291;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_15;
    }
    goto loop_start_13;
    loop_end_13:;
    goto try_end_14;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_13__iter_value);
    tmp_for_loop_13__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_13__for_iterator);
    Py_DECREF(tmp_for_loop_13__for_iterator);
    tmp_for_loop_13__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    Py_XDECREF(tmp_for_loop_13__iter_value);
    tmp_for_loop_13__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_13__for_iterator);
    Py_DECREF(tmp_for_loop_13__for_iterator);
    tmp_for_loop_13__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_74;
        tmp_assign_source_74 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_7_parse_traits_info();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_74)->m_closure[0] = var_read_byte;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_74)->m_closure[0]);
        ((struct Nuitka_FunctionObject *)tmp_assign_source_74)->m_closure[1] = par_self;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_74)->m_closure[1]);
        ((struct Nuitka_FunctionObject *)tmp_assign_source_74)->m_closure[2] = var_u30;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_74)->m_closure[2]);


        assert(var_parse_traits_info == NULL);
        var_parse_traits_info = tmp_assign_source_74;
    }
    {
        PyObject *tmp_assign_source_75;
        PyObject *tmp_called_name_48;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_48 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 347;
        tmp_assign_source_75 = CALL_FUNCTION_NO_ARGS(tmp_called_name_48);
        if (tmp_assign_source_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_class_count == NULL);
        var_class_count = tmp_assign_source_75;
    }
    {
        PyObject *tmp_assign_source_76;
        tmp_assign_source_76 = PyList_New(0);
        assert(var_classes == NULL);
        var_classes = tmp_assign_source_76;
    }
    {
        PyObject *tmp_assign_source_77;
        PyObject *tmp_iter_arg_16;
        PyObject *tmp_xrange_low_15;
        CHECK_OBJECT(var_class_count);
        tmp_xrange_low_15 = var_class_count;
        tmp_iter_arg_16 = BUILTIN_XRANGE1(tmp_xrange_low_15);
        if (tmp_iter_arg_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 349;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_77 = MAKE_ITERATOR(tmp_iter_arg_16);
        Py_DECREF(tmp_iter_arg_16);
        if (tmp_assign_source_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 349;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_15__for_iterator == NULL);
        tmp_for_loop_15__for_iterator = tmp_assign_source_77;
    }
    // Tried code:
    loop_start_15:;
    {
        PyObject *tmp_next_source_15;
        PyObject *tmp_assign_source_78;
        CHECK_OBJECT(tmp_for_loop_15__for_iterator);
        tmp_next_source_15 = tmp_for_loop_15__for_iterator;
        tmp_assign_source_78 = ITERATOR_NEXT(tmp_next_source_15);
        if (tmp_assign_source_78 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_15;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 349;
                goto try_except_handler_17;
            }
        }

        {
            PyObject *old = tmp_for_loop_15__iter_value;
            tmp_for_loop_15__iter_value = tmp_assign_source_78;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_79;
        CHECK_OBJECT(tmp_for_loop_15__iter_value);
        tmp_assign_source_79 = tmp_for_loop_15__iter_value;
        {
            PyObject *old = var_class_id;
            var_class_id = tmp_assign_source_79;
            Py_INCREF(var_class_id);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_80;
        PyObject *tmp_called_name_49;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_49 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 350;
        tmp_assign_source_80 = CALL_FUNCTION_NO_ARGS(tmp_called_name_49);
        if (tmp_assign_source_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 350;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        {
            PyObject *old = var_name_idx;
            var_name_idx = tmp_assign_source_80;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_81;
        PyObject *tmp_expression_name_18;
        PyObject *tmp_expression_name_19;
        PyObject *tmp_subscript_name_4;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_19 = PyCell_GET(par_self);
        tmp_expression_name_18 = LOOKUP_ATTRIBUTE(tmp_expression_name_19, const_str_plain_multinames);
        if (tmp_expression_name_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        CHECK_OBJECT(var_name_idx);
        tmp_subscript_name_4 = var_name_idx;
        tmp_assign_source_81 = LOOKUP_SUBSCRIPT(tmp_expression_name_18, tmp_subscript_name_4);
        Py_DECREF(tmp_expression_name_18);
        if (tmp_assign_source_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        {
            PyObject *old = var_cname;
            var_cname = tmp_assign_source_81;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_82;
        PyObject *tmp_called_name_50;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_args_element_name_17;
        PyObject *tmp_args_element_name_18;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass);
        }

        if (tmp_mvar_value_7 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55648 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 353;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }

        tmp_called_name_50 = tmp_mvar_value_7;
        CHECK_OBJECT(var_name_idx);
        tmp_args_element_name_17 = var_name_idx;
        CHECK_OBJECT(var_cname);
        tmp_args_element_name_18 = var_cname;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 353;
        {
            PyObject *call_args[] = {tmp_args_element_name_17, tmp_args_element_name_18};
            tmp_assign_source_82 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_50, call_args);
        }

        if (tmp_assign_source_82 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 353;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        {
            PyObject *old = var_avm_class;
            var_avm_class = tmp_assign_source_82;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_25;
        PyObject *tmp_args_element_name_19;
        CHECK_OBJECT(var_classes);
        tmp_called_instance_5 = var_classes;
        CHECK_OBJECT(var_avm_class);
        tmp_args_element_name_19 = var_avm_class;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 354;
        {
            PyObject *call_args[] = {tmp_args_element_name_19};
            tmp_call_result_25 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_append, call_args);
        }

        if (tmp_call_result_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 354;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        Py_DECREF(tmp_call_result_25);
    }
    {
        PyObject *tmp_called_name_51;
        PyObject *tmp_call_result_26;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_51 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 356;
        tmp_call_result_26 = CALL_FUNCTION_NO_ARGS(tmp_called_name_51);
        if (tmp_call_result_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        Py_DECREF(tmp_call_result_26);
    }
    {
        PyObject *tmp_assign_source_83;
        PyObject *tmp_called_name_52;
        CHECK_OBJECT(PyCell_GET(var_read_byte));
        tmp_called_name_52 = PyCell_GET(var_read_byte);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 357;
        tmp_assign_source_83 = CALL_FUNCTION_NO_ARGS(tmp_called_name_52);
        if (tmp_assign_source_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 357;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        {
            PyObject *old = var_flags;
            var_flags = tmp_assign_source_83;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_left_name_9;
        PyObject *tmp_right_name_9;
        PyObject *tmp_tmp_condition_result_6_object_1;
        int tmp_truth_name_5;
        CHECK_OBJECT(var_flags);
        tmp_left_name_9 = var_flags;
        tmp_right_name_9 = const_int_pos_8;
        tmp_compexpr_left_7 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_9, tmp_right_name_9);
        if (tmp_compexpr_left_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        tmp_compexpr_right_7 = const_int_0;
        tmp_tmp_condition_result_6_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_7, tmp_compexpr_right_7);
        Py_DECREF(tmp_compexpr_left_7);
        if (tmp_tmp_condition_result_6_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_tmp_condition_result_6_object_1);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_6_object_1);

            exception_lineno = 358;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        tmp_condition_result_6 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_6_object_1);
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_called_name_53;
        PyObject *tmp_call_result_27;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_53 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 359;
        tmp_call_result_27 = CALL_FUNCTION_NO_ARGS(tmp_called_name_53);
        if (tmp_call_result_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 359;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        Py_DECREF(tmp_call_result_27);
    }
    branch_no_6:;
    {
        PyObject *tmp_assign_source_84;
        PyObject *tmp_called_name_54;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_54 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 360;
        tmp_assign_source_84 = CALL_FUNCTION_NO_ARGS(tmp_called_name_54);
        if (tmp_assign_source_84 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        {
            PyObject *old = var_intrf_count;
            var_intrf_count = tmp_assign_source_84;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_85;
        PyObject *tmp_iter_arg_17;
        PyObject *tmp_xrange_low_16;
        CHECK_OBJECT(var_intrf_count);
        tmp_xrange_low_16 = var_intrf_count;
        tmp_iter_arg_17 = BUILTIN_XRANGE1(tmp_xrange_low_16);
        if (tmp_iter_arg_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        tmp_assign_source_85 = MAKE_ITERATOR(tmp_iter_arg_17);
        Py_DECREF(tmp_iter_arg_17);
        if (tmp_assign_source_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 361;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        {
            PyObject *old = tmp_for_loop_16__for_iterator;
            tmp_for_loop_16__for_iterator = tmp_assign_source_85;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_16:;
    {
        PyObject *tmp_next_source_16;
        PyObject *tmp_assign_source_86;
        CHECK_OBJECT(tmp_for_loop_16__for_iterator);
        tmp_next_source_16 = tmp_for_loop_16__for_iterator;
        tmp_assign_source_86 = ITERATOR_NEXT(tmp_next_source_16);
        if (tmp_assign_source_86 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_16;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 361;
                goto try_except_handler_18;
            }
        }

        {
            PyObject *old = tmp_for_loop_16__iter_value;
            tmp_for_loop_16__iter_value = tmp_assign_source_86;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_87;
        CHECK_OBJECT(tmp_for_loop_16__iter_value);
        tmp_assign_source_87 = tmp_for_loop_16__iter_value;
        {
            PyObject *old = var__c2;
            var__c2 = tmp_assign_source_87;
            Py_INCREF(var__c2);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_55;
        PyObject *tmp_call_result_28;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_55 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 362;
        tmp_call_result_28 = CALL_FUNCTION_NO_ARGS(tmp_called_name_55);
        if (tmp_call_result_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 362;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_18;
        }
        Py_DECREF(tmp_call_result_28);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 361;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_18;
    }
    goto loop_start_16;
    loop_end_16:;
    goto try_end_15;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_16__iter_value);
    tmp_for_loop_16__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_16__for_iterator);
    Py_DECREF(tmp_for_loop_16__for_iterator);
    tmp_for_loop_16__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto try_except_handler_17;
    // End of try:
    try_end_15:;
    Py_XDECREF(tmp_for_loop_16__iter_value);
    tmp_for_loop_16__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_16__for_iterator);
    Py_DECREF(tmp_for_loop_16__for_iterator);
    tmp_for_loop_16__for_iterator = NULL;

    {
        PyObject *tmp_called_name_56;
        PyObject *tmp_call_result_29;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_56 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 363;
        tmp_call_result_29 = CALL_FUNCTION_NO_ARGS(tmp_called_name_56);
        if (tmp_call_result_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 363;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        Py_DECREF(tmp_call_result_29);
    }
    {
        PyObject *tmp_assign_source_88;
        PyObject *tmp_called_name_57;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_57 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 364;
        tmp_assign_source_88 = CALL_FUNCTION_NO_ARGS(tmp_called_name_57);
        if (tmp_assign_source_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        {
            PyObject *old = var_trait_count;
            var_trait_count = tmp_assign_source_88;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_89;
        PyObject *tmp_iter_arg_18;
        PyObject *tmp_xrange_low_17;
        CHECK_OBJECT(var_trait_count);
        tmp_xrange_low_17 = var_trait_count;
        tmp_iter_arg_18 = BUILTIN_XRANGE1(tmp_xrange_low_17);
        if (tmp_iter_arg_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 365;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        tmp_assign_source_89 = MAKE_ITERATOR(tmp_iter_arg_18);
        Py_DECREF(tmp_iter_arg_18);
        if (tmp_assign_source_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 365;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_17;
        }
        {
            PyObject *old = tmp_for_loop_17__for_iterator;
            tmp_for_loop_17__for_iterator = tmp_assign_source_89;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_17:;
    {
        PyObject *tmp_next_source_17;
        PyObject *tmp_assign_source_90;
        CHECK_OBJECT(tmp_for_loop_17__for_iterator);
        tmp_next_source_17 = tmp_for_loop_17__for_iterator;
        tmp_assign_source_90 = ITERATOR_NEXT(tmp_next_source_17);
        if (tmp_assign_source_90 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_17;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 365;
                goto try_except_handler_19;
            }
        }

        {
            PyObject *old = tmp_for_loop_17__iter_value;
            tmp_for_loop_17__iter_value = tmp_assign_source_90;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_91;
        CHECK_OBJECT(tmp_for_loop_17__iter_value);
        tmp_assign_source_91 = tmp_for_loop_17__iter_value;
        {
            PyObject *old = var__c2;
            var__c2 = tmp_assign_source_91;
            Py_INCREF(var__c2);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_92;
        PyObject *tmp_iter_arg_19;
        PyObject *tmp_called_name_58;
        CHECK_OBJECT(var_parse_traits_info);
        tmp_called_name_58 = var_parse_traits_info;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 366;
        tmp_iter_arg_19 = CALL_FUNCTION_NO_ARGS(tmp_called_name_58);
        if (tmp_iter_arg_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 366;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_20;
        }
        tmp_assign_source_92 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_19);
        Py_DECREF(tmp_iter_arg_19);
        if (tmp_assign_source_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 366;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_20;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_92;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_93;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_93 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_93 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            exception_lineno = 366;
            goto try_except_handler_21;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_93;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_94;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_94 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_94 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            exception_lineno = 366;
            goto try_except_handler_21;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_94;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                    exception_lineno = 366;
                    goto try_except_handler_21;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = const_str_digest_fcf040720b88d60da4ce975010c44a3a;
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            exception_lineno = 366;
            goto try_except_handler_21;
        }
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto try_except_handler_20;
    // End of try:
    try_end_16:;
    goto try_end_17;
    // Exception handler code:
    try_except_handler_20:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto try_except_handler_19;
    // End of try:
    try_end_17:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_95;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_95 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_trait_methods;
            var_trait_methods = tmp_assign_source_95;
            Py_INCREF(var_trait_methods);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_96;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_96 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_trait_constants;
            var_trait_constants = tmp_assign_source_96;
            Py_INCREF(var_trait_constants);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_call_result_30;
        PyObject *tmp_args_element_name_20;
        CHECK_OBJECT(var_avm_class);
        tmp_called_instance_6 = var_avm_class;
        CHECK_OBJECT(var_trait_methods);
        tmp_args_element_name_20 = var_trait_methods;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 367;
        {
            PyObject *call_args[] = {tmp_args_element_name_20};
            tmp_call_result_30 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_register_methods, call_args);
        }

        if (tmp_call_result_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 367;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_19;
        }
        Py_DECREF(tmp_call_result_30);
    }
    {
        nuitka_bool tmp_condition_result_7;
        int tmp_truth_name_6;
        CHECK_OBJECT(var_trait_constants);
        tmp_truth_name_6 = CHECK_IF_TRUE(var_trait_constants);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 368;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_19;
        }
        tmp_condition_result_7 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_expression_name_20;
        PyObject *tmp_call_result_31;
        PyObject *tmp_args_element_name_21;
        CHECK_OBJECT(var_avm_class);
        tmp_expression_name_20 = var_avm_class;
        tmp_called_instance_7 = LOOKUP_ATTRIBUTE(tmp_expression_name_20, const_str_plain_constants);
        if (tmp_called_instance_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 369;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_19;
        }
        CHECK_OBJECT(var_trait_constants);
        tmp_args_element_name_21 = var_trait_constants;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 369;
        {
            PyObject *call_args[] = {tmp_args_element_name_21};
            tmp_call_result_31 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_update, call_args);
        }

        Py_DECREF(tmp_called_instance_7);
        if (tmp_call_result_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 369;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_19;
        }
        Py_DECREF(tmp_call_result_31);
    }
    branch_no_7:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 365;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_19;
    }
    goto loop_start_17;
    loop_end_17:;
    goto try_end_18;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_17__iter_value);
    tmp_for_loop_17__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_17__for_iterator);
    Py_DECREF(tmp_for_loop_17__for_iterator);
    tmp_for_loop_17__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto try_except_handler_17;
    // End of try:
    try_end_18:;
    Py_XDECREF(tmp_for_loop_17__iter_value);
    tmp_for_loop_17__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_17__for_iterator);
    Py_DECREF(tmp_for_loop_17__for_iterator);
    tmp_for_loop_17__for_iterator = NULL;

    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 349;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_17;
    }
    goto loop_start_15;
    loop_end_15:;
    goto try_end_19;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_15__iter_value);
    tmp_for_loop_15__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_15__for_iterator);
    Py_DECREF(tmp_for_loop_15__for_iterator);
    tmp_for_loop_15__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    Py_XDECREF(tmp_for_loop_15__iter_value);
    tmp_for_loop_15__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_15__for_iterator);
    Py_DECREF(tmp_for_loop_15__for_iterator);
    tmp_for_loop_15__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(var_classes);
        tmp_len_arg_1 = var_classes;
        tmp_compexpr_left_8 = BUILTIN_LEN(tmp_len_arg_1);
        assert(!(tmp_compexpr_left_8 == NULL));
        CHECK_OBJECT(var_class_count);
        tmp_compexpr_right_8 = var_class_count;
        tmp_operand_name_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_8, tmp_compexpr_right_8);
        Py_DECREF(tmp_compexpr_left_8);
        if (tmp_operand_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 371;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 371;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_raise_type_2;
        tmp_raise_type_2 = PyExc_AssertionError;
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_lineno = 371;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_8:;
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_dict_seq_1;
        PyObject *tmp_assattr_target_6;
        {
            PyObject *tmp_assign_source_97;
            PyObject *tmp_iter_arg_20;
            CHECK_OBJECT(var_classes);
            tmp_iter_arg_20 = var_classes;
            tmp_assign_source_97 = MAKE_ITERATOR(tmp_iter_arg_20);
            if (tmp_assign_source_97 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 372;
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_genexpr_2__$0 == NULL);
            tmp_genexpr_2__$0 = tmp_assign_source_97;
        }
        // Tried code:
        tmp_dict_seq_1 = youtube_dl$swfinterp$$$function_22___init__$$$genexpr_2_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_dict_seq_1)->m_closure[0] = PyCell_NEW0(tmp_genexpr_2__$0);


        goto try_return_handler_22;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_22:;
        CHECK_OBJECT(tmp_genexpr_2__$0);
        Py_DECREF(tmp_genexpr_2__$0);
        tmp_genexpr_2__$0 = NULL;

        goto outline_result_2;
        // End of try:
        CHECK_OBJECT(tmp_genexpr_2__$0);
        Py_DECREF(tmp_genexpr_2__$0);
        tmp_genexpr_2__$0 = NULL;

        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_2:;
        tmp_assattr_name_6 = TO_DICT(tmp_dict_seq_1, NULL);
        Py_DECREF(tmp_dict_seq_1);
        if (tmp_assattr_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 372;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_6 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, const_str_plain__classes_by_name, tmp_assattr_name_6);
        Py_DECREF(tmp_assattr_name_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 372;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_98;
        PyObject *tmp_iter_arg_21;
        CHECK_OBJECT(var_classes);
        tmp_iter_arg_21 = var_classes;
        tmp_assign_source_98 = MAKE_ITERATOR(tmp_iter_arg_21);
        if (tmp_assign_source_98 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 374;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_18__for_iterator == NULL);
        tmp_for_loop_18__for_iterator = tmp_assign_source_98;
    }
    // Tried code:
    loop_start_18:;
    {
        PyObject *tmp_next_source_18;
        PyObject *tmp_assign_source_99;
        CHECK_OBJECT(tmp_for_loop_18__for_iterator);
        tmp_next_source_18 = tmp_for_loop_18__for_iterator;
        tmp_assign_source_99 = ITERATOR_NEXT(tmp_next_source_18);
        if (tmp_assign_source_99 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_18;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 374;
                goto try_except_handler_23;
            }
        }

        {
            PyObject *old = tmp_for_loop_18__iter_value;
            tmp_for_loop_18__iter_value = tmp_assign_source_99;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_100;
        CHECK_OBJECT(tmp_for_loop_18__iter_value);
        tmp_assign_source_100 = tmp_for_loop_18__iter_value;
        {
            PyObject *old = var_avm_class;
            var_avm_class = tmp_assign_source_100;
            Py_INCREF(var_avm_class);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assattr_name_7;
        PyObject *tmp_called_name_59;
        PyObject *tmp_assattr_target_7;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_59 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 375;
        tmp_assattr_name_7 = CALL_FUNCTION_NO_ARGS(tmp_called_name_59);
        if (tmp_assattr_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 375;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_23;
        }
        CHECK_OBJECT(var_avm_class);
        tmp_assattr_target_7 = var_avm_class;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_7, const_str_plain_cinit_idx, tmp_assattr_name_7);
        Py_DECREF(tmp_assattr_name_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 375;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_23;
        }
    }
    {
        PyObject *tmp_assign_source_101;
        PyObject *tmp_called_name_60;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_60 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 376;
        tmp_assign_source_101 = CALL_FUNCTION_NO_ARGS(tmp_called_name_60);
        if (tmp_assign_source_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 376;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_23;
        }
        {
            PyObject *old = var_trait_count;
            var_trait_count = tmp_assign_source_101;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_102;
        PyObject *tmp_iter_arg_22;
        PyObject *tmp_xrange_low_18;
        CHECK_OBJECT(var_trait_count);
        tmp_xrange_low_18 = var_trait_count;
        tmp_iter_arg_22 = BUILTIN_XRANGE1(tmp_xrange_low_18);
        if (tmp_iter_arg_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 377;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_23;
        }
        tmp_assign_source_102 = MAKE_ITERATOR(tmp_iter_arg_22);
        Py_DECREF(tmp_iter_arg_22);
        if (tmp_assign_source_102 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 377;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_23;
        }
        {
            PyObject *old = tmp_for_loop_19__for_iterator;
            tmp_for_loop_19__for_iterator = tmp_assign_source_102;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_19:;
    {
        PyObject *tmp_next_source_19;
        PyObject *tmp_assign_source_103;
        CHECK_OBJECT(tmp_for_loop_19__for_iterator);
        tmp_next_source_19 = tmp_for_loop_19__for_iterator;
        tmp_assign_source_103 = ITERATOR_NEXT(tmp_next_source_19);
        if (tmp_assign_source_103 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_19;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 377;
                goto try_except_handler_24;
            }
        }

        {
            PyObject *old = tmp_for_loop_19__iter_value;
            tmp_for_loop_19__iter_value = tmp_assign_source_103;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_104;
        CHECK_OBJECT(tmp_for_loop_19__iter_value);
        tmp_assign_source_104 = tmp_for_loop_19__iter_value;
        {
            PyObject *old = var__c2;
            var__c2 = tmp_assign_source_104;
            Py_INCREF(var__c2);
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_105;
        PyObject *tmp_iter_arg_23;
        PyObject *tmp_called_name_61;
        CHECK_OBJECT(var_parse_traits_info);
        tmp_called_name_61 = var_parse_traits_info;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 378;
        tmp_iter_arg_23 = CALL_FUNCTION_NO_ARGS(tmp_called_name_61);
        if (tmp_iter_arg_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 378;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_25;
        }
        tmp_assign_source_105 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_23);
        Py_DECREF(tmp_iter_arg_23);
        if (tmp_assign_source_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 378;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_25;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__source_iter;
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_105;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_106;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_106 = UNPACK_NEXT(tmp_unpack_3, 0, 2);
        if (tmp_assign_source_106 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            exception_lineno = 378;
            goto try_except_handler_26;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_1;
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_106;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_107;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_107 = UNPACK_NEXT(tmp_unpack_4, 1, 2);
        if (tmp_assign_source_107 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            exception_lineno = 378;
            goto try_except_handler_26;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_2;
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_107;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_2); assert(HAS_ITERNEXT(tmp_iterator_name_2));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_2)->tp_iternext)(tmp_iterator_name_2);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                    exception_lineno = 378;
                    goto try_except_handler_26;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = const_str_digest_fcf040720b88d60da4ce975010c44a3a;
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            exception_lineno = 378;
            goto try_except_handler_26;
        }
    }
    goto try_end_20;
    // Exception handler code:
    try_except_handler_26:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
    Py_DECREF(tmp_tuple_unpack_2__source_iter);
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_20;
    exception_value = exception_keeper_value_20;
    exception_tb = exception_keeper_tb_20;
    exception_lineno = exception_keeper_lineno_20;

    goto try_except_handler_25;
    // End of try:
    try_end_20:;
    goto try_end_21;
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_2__element_1);
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF(tmp_tuple_unpack_2__element_2);
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto try_except_handler_24;
    // End of try:
    try_end_21:;
    CHECK_OBJECT(tmp_tuple_unpack_2__source_iter);
    Py_DECREF(tmp_tuple_unpack_2__source_iter);
    tmp_tuple_unpack_2__source_iter = NULL;

    {
        PyObject *tmp_assign_source_108;
        CHECK_OBJECT(tmp_tuple_unpack_2__element_1);
        tmp_assign_source_108 = tmp_tuple_unpack_2__element_1;
        {
            PyObject *old = var_trait_methods;
            var_trait_methods = tmp_assign_source_108;
            Py_INCREF(var_trait_methods);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_2__element_1);
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_109;
        CHECK_OBJECT(tmp_tuple_unpack_2__element_2);
        tmp_assign_source_109 = tmp_tuple_unpack_2__element_2;
        {
            PyObject *old = var_trait_constants;
            var_trait_constants = tmp_assign_source_109;
            Py_INCREF(var_trait_constants);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_2__element_2);
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        PyObject *tmp_called_instance_8;
        PyObject *tmp_call_result_32;
        PyObject *tmp_args_element_name_22;
        CHECK_OBJECT(var_avm_class);
        tmp_called_instance_8 = var_avm_class;
        CHECK_OBJECT(var_trait_methods);
        tmp_args_element_name_22 = var_trait_methods;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 379;
        {
            PyObject *call_args[] = {tmp_args_element_name_22};
            tmp_call_result_32 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_register_methods, call_args);
        }

        if (tmp_call_result_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_24;
        }
        Py_DECREF(tmp_call_result_32);
    }
    {
        nuitka_bool tmp_condition_result_9;
        int tmp_truth_name_7;
        CHECK_OBJECT(var_trait_constants);
        tmp_truth_name_7 = CHECK_IF_TRUE(var_trait_constants);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_24;
        }
        tmp_condition_result_9 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    {
        PyObject *tmp_called_instance_9;
        PyObject *tmp_expression_name_21;
        PyObject *tmp_call_result_33;
        PyObject *tmp_args_element_name_23;
        CHECK_OBJECT(var_avm_class);
        tmp_expression_name_21 = var_avm_class;
        tmp_called_instance_9 = LOOKUP_ATTRIBUTE(tmp_expression_name_21, const_str_plain_constants);
        if (tmp_called_instance_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 381;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_24;
        }
        CHECK_OBJECT(var_trait_constants);
        tmp_args_element_name_23 = var_trait_constants;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 381;
        {
            PyObject *call_args[] = {tmp_args_element_name_23};
            tmp_call_result_33 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_update, call_args);
        }

        Py_DECREF(tmp_called_instance_9);
        if (tmp_call_result_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 381;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_24;
        }
        Py_DECREF(tmp_call_result_33);
    }
    branch_no_9:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 377;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_24;
    }
    goto loop_start_19;
    loop_end_19:;
    goto try_end_22;
    // Exception handler code:
    try_except_handler_24:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_keeper_lineno_22 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_19__iter_value);
    tmp_for_loop_19__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_19__for_iterator);
    Py_DECREF(tmp_for_loop_19__for_iterator);
    tmp_for_loop_19__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_22;
    exception_value = exception_keeper_value_22;
    exception_tb = exception_keeper_tb_22;
    exception_lineno = exception_keeper_lineno_22;

    goto try_except_handler_23;
    // End of try:
    try_end_22:;
    Py_XDECREF(tmp_for_loop_19__iter_value);
    tmp_for_loop_19__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_19__for_iterator);
    Py_DECREF(tmp_for_loop_19__for_iterator);
    tmp_for_loop_19__for_iterator = NULL;

    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 374;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_23;
    }
    goto loop_start_18;
    loop_end_18:;
    goto try_end_23;
    // Exception handler code:
    try_except_handler_23:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_18__iter_value);
    tmp_for_loop_18__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_18__for_iterator);
    Py_DECREF(tmp_for_loop_18__for_iterator);
    tmp_for_loop_18__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_23;
    exception_value = exception_keeper_value_23;
    exception_tb = exception_keeper_tb_23;
    exception_lineno = exception_keeper_lineno_23;

    goto frame_exception_exit_1;
    // End of try:
    try_end_23:;
    Py_XDECREF(tmp_for_loop_18__iter_value);
    tmp_for_loop_18__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_18__for_iterator);
    Py_DECREF(tmp_for_loop_18__for_iterator);
    tmp_for_loop_18__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_110;
        PyObject *tmp_called_name_62;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_62 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 384;
        tmp_assign_source_110 = CALL_FUNCTION_NO_ARGS(tmp_called_name_62);
        if (tmp_assign_source_110 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_script_count == NULL);
        var_script_count = tmp_assign_source_110;
    }
    {
        PyObject *tmp_assign_source_111;
        PyObject *tmp_iter_arg_24;
        PyObject *tmp_xrange_low_19;
        CHECK_OBJECT(var_script_count);
        tmp_xrange_low_19 = var_script_count;
        tmp_iter_arg_24 = BUILTIN_XRANGE1(tmp_xrange_low_19);
        if (tmp_iter_arg_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 385;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_111 = MAKE_ITERATOR(tmp_iter_arg_24);
        Py_DECREF(tmp_iter_arg_24);
        if (tmp_assign_source_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 385;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_20__for_iterator == NULL);
        tmp_for_loop_20__for_iterator = tmp_assign_source_111;
    }
    // Tried code:
    loop_start_20:;
    {
        PyObject *tmp_next_source_20;
        PyObject *tmp_assign_source_112;
        CHECK_OBJECT(tmp_for_loop_20__for_iterator);
        tmp_next_source_20 = tmp_for_loop_20__for_iterator;
        tmp_assign_source_112 = ITERATOR_NEXT(tmp_next_source_20);
        if (tmp_assign_source_112 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_20;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 385;
                goto try_except_handler_27;
            }
        }

        {
            PyObject *old = tmp_for_loop_20__iter_value;
            tmp_for_loop_20__iter_value = tmp_assign_source_112;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_113;
        CHECK_OBJECT(tmp_for_loop_20__iter_value);
        tmp_assign_source_113 = tmp_for_loop_20__iter_value;
        {
            PyObject *old = var__c;
            var__c = tmp_assign_source_113;
            Py_INCREF(var__c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_63;
        PyObject *tmp_call_result_34;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_63 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 386;
        tmp_call_result_34 = CALL_FUNCTION_NO_ARGS(tmp_called_name_63);
        if (tmp_call_result_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 386;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_27;
        }
        Py_DECREF(tmp_call_result_34);
    }
    {
        PyObject *tmp_assign_source_114;
        PyObject *tmp_called_name_64;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_64 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 387;
        tmp_assign_source_114 = CALL_FUNCTION_NO_ARGS(tmp_called_name_64);
        if (tmp_assign_source_114 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 387;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_27;
        }
        {
            PyObject *old = var_trait_count;
            var_trait_count = tmp_assign_source_114;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_115;
        PyObject *tmp_iter_arg_25;
        PyObject *tmp_xrange_low_20;
        CHECK_OBJECT(var_trait_count);
        tmp_xrange_low_20 = var_trait_count;
        tmp_iter_arg_25 = BUILTIN_XRANGE1(tmp_xrange_low_20);
        if (tmp_iter_arg_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_27;
        }
        tmp_assign_source_115 = MAKE_ITERATOR(tmp_iter_arg_25);
        Py_DECREF(tmp_iter_arg_25);
        if (tmp_assign_source_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_27;
        }
        {
            PyObject *old = tmp_for_loop_21__for_iterator;
            tmp_for_loop_21__for_iterator = tmp_assign_source_115;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_21:;
    {
        PyObject *tmp_next_source_21;
        PyObject *tmp_assign_source_116;
        CHECK_OBJECT(tmp_for_loop_21__for_iterator);
        tmp_next_source_21 = tmp_for_loop_21__for_iterator;
        tmp_assign_source_116 = ITERATOR_NEXT(tmp_next_source_21);
        if (tmp_assign_source_116 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_21;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 388;
                goto try_except_handler_28;
            }
        }

        {
            PyObject *old = tmp_for_loop_21__iter_value;
            tmp_for_loop_21__iter_value = tmp_assign_source_116;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_117;
        CHECK_OBJECT(tmp_for_loop_21__iter_value);
        tmp_assign_source_117 = tmp_for_loop_21__iter_value;
        {
            PyObject *old = var__c2;
            var__c2 = tmp_assign_source_117;
            Py_INCREF(var__c2);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_65;
        PyObject *tmp_call_result_35;
        CHECK_OBJECT(var_parse_traits_info);
        tmp_called_name_65 = var_parse_traits_info;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 389;
        tmp_call_result_35 = CALL_FUNCTION_NO_ARGS(tmp_called_name_65);
        if (tmp_call_result_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_28;
        }
        Py_DECREF(tmp_call_result_35);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 388;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_28;
    }
    goto loop_start_21;
    loop_end_21:;
    goto try_end_24;
    // Exception handler code:
    try_except_handler_28:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_21__iter_value);
    tmp_for_loop_21__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_21__for_iterator);
    Py_DECREF(tmp_for_loop_21__for_iterator);
    tmp_for_loop_21__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_24;
    exception_value = exception_keeper_value_24;
    exception_tb = exception_keeper_tb_24;
    exception_lineno = exception_keeper_lineno_24;

    goto try_except_handler_27;
    // End of try:
    try_end_24:;
    Py_XDECREF(tmp_for_loop_21__iter_value);
    tmp_for_loop_21__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_21__for_iterator);
    Py_DECREF(tmp_for_loop_21__for_iterator);
    tmp_for_loop_21__for_iterator = NULL;

    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 385;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_27;
    }
    goto loop_start_20;
    loop_end_20:;
    goto try_end_25;
    // Exception handler code:
    try_except_handler_27:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_20__iter_value);
    tmp_for_loop_20__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_20__for_iterator);
    Py_DECREF(tmp_for_loop_20__for_iterator);
    tmp_for_loop_20__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    Py_XDECREF(tmp_for_loop_20__iter_value);
    tmp_for_loop_20__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_20__for_iterator);
    Py_DECREF(tmp_for_loop_20__for_iterator);
    tmp_for_loop_20__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_118;
        PyObject *tmp_called_name_66;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_66 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 392;
        tmp_assign_source_118 = CALL_FUNCTION_NO_ARGS(tmp_called_name_66);
        if (tmp_assign_source_118 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 392;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_method_body_count == NULL);
        var_method_body_count = tmp_assign_source_118;
    }
    {
        PyObject *tmp_assign_source_119;
        PyObject *tmp_called_instance_10;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_call_arg_element_3;
        PyObject *tmp_call_arg_element_4;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_collections);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_collections);
        }

        if (tmp_mvar_value_8 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 22077 ], 33, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 393;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_10 = tmp_mvar_value_8;
        tmp_call_arg_element_3 = const_str_plain_Method;
        tmp_call_arg_element_4 = LIST_COPY(const_list_str_plain_code_str_plain_local_count_list);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 393;
        {
            PyObject *call_args[] = {tmp_call_arg_element_3, tmp_call_arg_element_4};
            tmp_assign_source_119 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_10, const_str_plain_namedtuple, call_args);
        }

        Py_DECREF(tmp_call_arg_element_4);
        if (tmp_assign_source_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 393;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_Method == NULL);
        var_Method = tmp_assign_source_119;
    }
    {
        PyObject *tmp_assattr_name_8;
        PyObject *tmp_assattr_target_8;
        tmp_assattr_name_8 = PyList_New(0);
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_8 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_8, const_str_plain__all_methods, tmp_assattr_name_8);
        Py_DECREF(tmp_assattr_name_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_120;
        PyObject *tmp_iter_arg_26;
        PyObject *tmp_xrange_low_21;
        CHECK_OBJECT(var_method_body_count);
        tmp_xrange_low_21 = var_method_body_count;
        tmp_iter_arg_26 = BUILTIN_XRANGE1(tmp_xrange_low_21);
        if (tmp_iter_arg_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_120 = MAKE_ITERATOR(tmp_iter_arg_26);
        Py_DECREF(tmp_iter_arg_26);
        if (tmp_assign_source_120 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_22__for_iterator == NULL);
        tmp_for_loop_22__for_iterator = tmp_assign_source_120;
    }
    // Tried code:
    loop_start_22:;
    {
        PyObject *tmp_next_source_22;
        PyObject *tmp_assign_source_121;
        CHECK_OBJECT(tmp_for_loop_22__for_iterator);
        tmp_next_source_22 = tmp_for_loop_22__for_iterator;
        tmp_assign_source_121 = ITERATOR_NEXT(tmp_next_source_22);
        if (tmp_assign_source_121 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_22;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 395;
                goto try_except_handler_29;
            }
        }

        {
            PyObject *old = tmp_for_loop_22__iter_value;
            tmp_for_loop_22__iter_value = tmp_assign_source_121;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_122;
        CHECK_OBJECT(tmp_for_loop_22__iter_value);
        tmp_assign_source_122 = tmp_for_loop_22__iter_value;
        {
            PyObject *old = var__c;
            var__c = tmp_assign_source_122;
            Py_INCREF(var__c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_123;
        PyObject *tmp_called_name_67;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_67 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 396;
        tmp_assign_source_123 = CALL_FUNCTION_NO_ARGS(tmp_called_name_67);
        if (tmp_assign_source_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 396;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        {
            PyObject *old = var_method_idx;
            var_method_idx = tmp_assign_source_123;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_68;
        PyObject *tmp_call_result_36;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_68 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 397;
        tmp_call_result_36 = CALL_FUNCTION_NO_ARGS(tmp_called_name_68);
        if (tmp_call_result_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        Py_DECREF(tmp_call_result_36);
    }
    {
        PyObject *tmp_assign_source_124;
        PyObject *tmp_called_name_69;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_69 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 398;
        tmp_assign_source_124 = CALL_FUNCTION_NO_ARGS(tmp_called_name_69);
        if (tmp_assign_source_124 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 398;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        {
            PyObject *old = var_local_count;
            var_local_count = tmp_assign_source_124;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_70;
        PyObject *tmp_call_result_37;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_70 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 399;
        tmp_call_result_37 = CALL_FUNCTION_NO_ARGS(tmp_called_name_70);
        if (tmp_call_result_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        Py_DECREF(tmp_call_result_37);
    }
    {
        PyObject *tmp_called_name_71;
        PyObject *tmp_call_result_38;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_71 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 400;
        tmp_call_result_38 = CALL_FUNCTION_NO_ARGS(tmp_called_name_71);
        if (tmp_call_result_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        Py_DECREF(tmp_call_result_38);
    }
    {
        PyObject *tmp_assign_source_125;
        PyObject *tmp_called_name_72;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_72 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 401;
        tmp_assign_source_125 = CALL_FUNCTION_NO_ARGS(tmp_called_name_72);
        if (tmp_assign_source_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 401;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        {
            PyObject *old = var_code_length;
            var_code_length = tmp_assign_source_125;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_126;
        PyObject *tmp_called_name_73;
        PyObject *tmp_args_element_name_24;
        CHECK_OBJECT(var_read_bytes);
        tmp_called_name_73 = var_read_bytes;
        CHECK_OBJECT(var_code_length);
        tmp_args_element_name_24 = var_code_length;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 402;
        tmp_assign_source_126 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_73, tmp_args_element_name_24);
        if (tmp_assign_source_126 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        {
            PyObject *old = var_code;
            var_code = tmp_assign_source_126;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_127;
        PyObject *tmp_called_name_74;
        PyObject *tmp_args_element_name_25;
        PyObject *tmp_args_element_name_26;
        CHECK_OBJECT(var_Method);
        tmp_called_name_74 = var_Method;
        CHECK_OBJECT(var_code);
        tmp_args_element_name_25 = var_code;
        CHECK_OBJECT(var_local_count);
        tmp_args_element_name_26 = var_local_count;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 403;
        {
            PyObject *call_args[] = {tmp_args_element_name_25, tmp_args_element_name_26};
            tmp_assign_source_127 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_74, call_args);
        }

        if (tmp_assign_source_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 403;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        {
            PyObject *old = var_m;
            var_m = tmp_assign_source_127;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_11;
        PyObject *tmp_expression_name_22;
        PyObject *tmp_call_result_39;
        PyObject *tmp_args_element_name_27;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_22 = PyCell_GET(par_self);
        tmp_called_instance_11 = LOOKUP_ATTRIBUTE(tmp_expression_name_22, const_str_plain__all_methods);
        if (tmp_called_instance_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        CHECK_OBJECT(var_m);
        tmp_args_element_name_27 = var_m;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 404;
        {
            PyObject *call_args[] = {tmp_args_element_name_27};
            tmp_call_result_39 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_11, const_str_plain_append, call_args);
        }

        Py_DECREF(tmp_called_instance_11);
        if (tmp_call_result_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        Py_DECREF(tmp_call_result_39);
    }
    {
        PyObject *tmp_assign_source_128;
        PyObject *tmp_iter_arg_27;
        CHECK_OBJECT(var_classes);
        tmp_iter_arg_27 = var_classes;
        tmp_assign_source_128 = MAKE_ITERATOR(tmp_iter_arg_27);
        if (tmp_assign_source_128 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 405;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        {
            PyObject *old = tmp_for_loop_23__for_iterator;
            tmp_for_loop_23__for_iterator = tmp_assign_source_128;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_23:;
    {
        PyObject *tmp_next_source_23;
        PyObject *tmp_assign_source_129;
        CHECK_OBJECT(tmp_for_loop_23__for_iterator);
        tmp_next_source_23 = tmp_for_loop_23__for_iterator;
        tmp_assign_source_129 = ITERATOR_NEXT(tmp_next_source_23);
        if (tmp_assign_source_129 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_23;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 405;
                goto try_except_handler_30;
            }
        }

        {
            PyObject *old = tmp_for_loop_23__iter_value;
            tmp_for_loop_23__iter_value = tmp_assign_source_129;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_130;
        CHECK_OBJECT(tmp_for_loop_23__iter_value);
        tmp_assign_source_130 = tmp_for_loop_23__iter_value;
        {
            PyObject *old = var_avm_class;
            var_avm_class = tmp_assign_source_130;
            Py_INCREF(var_avm_class);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        PyObject *tmp_expression_name_23;
        CHECK_OBJECT(var_method_idx);
        tmp_compexpr_left_9 = var_method_idx;
        CHECK_OBJECT(var_avm_class);
        tmp_expression_name_23 = var_avm_class;
        tmp_compexpr_right_9 = LOOKUP_ATTRIBUTE(tmp_expression_name_23, const_str_plain_method_idxs);
        if (tmp_compexpr_right_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 406;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_30;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_9, tmp_compexpr_left_9);
        Py_DECREF(tmp_compexpr_right_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 406;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_30;
        }
        tmp_condition_result_10 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_name_24;
        PyObject *tmp_ass_subscript_1;
        PyObject *tmp_expression_name_25;
        PyObject *tmp_expression_name_26;
        PyObject *tmp_subscript_name_5;
        CHECK_OBJECT(var_m);
        tmp_ass_subvalue_1 = var_m;
        CHECK_OBJECT(var_avm_class);
        tmp_expression_name_24 = var_avm_class;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_24, const_str_plain_methods);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_30;
        }
        CHECK_OBJECT(var_avm_class);
        tmp_expression_name_26 = var_avm_class;
        tmp_expression_name_25 = LOOKUP_ATTRIBUTE(tmp_expression_name_26, const_str_plain_method_idxs);
        if (tmp_expression_name_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subscribed_1);

            exception_lineno = 407;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_30;
        }
        CHECK_OBJECT(var_method_idx);
        tmp_subscript_name_5 = var_method_idx;
        tmp_ass_subscript_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_25, tmp_subscript_name_5);
        Py_DECREF(tmp_expression_name_25);
        if (tmp_ass_subscript_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subscribed_1);

            exception_lineno = 407;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_30;
        }
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        Py_DECREF(tmp_ass_subscript_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_30;
        }
    }
    branch_no_10:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 405;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_30;
    }
    goto loop_start_23;
    loop_end_23:;
    goto try_end_26;
    // Exception handler code:
    try_except_handler_30:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_23__iter_value);
    tmp_for_loop_23__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_23__for_iterator);
    Py_DECREF(tmp_for_loop_23__for_iterator);
    tmp_for_loop_23__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto try_except_handler_29;
    // End of try:
    try_end_26:;
    Py_XDECREF(tmp_for_loop_23__iter_value);
    tmp_for_loop_23__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_23__for_iterator);
    Py_DECREF(tmp_for_loop_23__for_iterator);
    tmp_for_loop_23__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_131;
        PyObject *tmp_called_name_75;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_75 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 408;
        tmp_assign_source_131 = CALL_FUNCTION_NO_ARGS(tmp_called_name_75);
        if (tmp_assign_source_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 408;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        {
            PyObject *old = var_exception_count;
            var_exception_count = tmp_assign_source_131;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_132;
        PyObject *tmp_iter_arg_28;
        PyObject *tmp_xrange_low_22;
        CHECK_OBJECT(var_exception_count);
        tmp_xrange_low_22 = var_exception_count;
        tmp_iter_arg_28 = BUILTIN_XRANGE1(tmp_xrange_low_22);
        if (tmp_iter_arg_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 409;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        tmp_assign_source_132 = MAKE_ITERATOR(tmp_iter_arg_28);
        Py_DECREF(tmp_iter_arg_28);
        if (tmp_assign_source_132 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 409;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        {
            PyObject *old = tmp_for_loop_24__for_iterator;
            tmp_for_loop_24__for_iterator = tmp_assign_source_132;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_24:;
    {
        PyObject *tmp_next_source_24;
        PyObject *tmp_assign_source_133;
        CHECK_OBJECT(tmp_for_loop_24__for_iterator);
        tmp_next_source_24 = tmp_for_loop_24__for_iterator;
        tmp_assign_source_133 = ITERATOR_NEXT(tmp_next_source_24);
        if (tmp_assign_source_133 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_24;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 409;
                goto try_except_handler_31;
            }
        }

        {
            PyObject *old = tmp_for_loop_24__iter_value;
            tmp_for_loop_24__iter_value = tmp_assign_source_133;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_134;
        CHECK_OBJECT(tmp_for_loop_24__iter_value);
        tmp_assign_source_134 = tmp_for_loop_24__iter_value;
        {
            PyObject *old = var__c2;
            var__c2 = tmp_assign_source_134;
            Py_INCREF(var__c2);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_76;
        PyObject *tmp_call_result_40;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_76 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 410;
        tmp_call_result_40 = CALL_FUNCTION_NO_ARGS(tmp_called_name_76);
        if (tmp_call_result_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 410;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_31;
        }
        Py_DECREF(tmp_call_result_40);
    }
    {
        PyObject *tmp_called_name_77;
        PyObject *tmp_call_result_41;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_77 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 411;
        tmp_call_result_41 = CALL_FUNCTION_NO_ARGS(tmp_called_name_77);
        if (tmp_call_result_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 411;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_31;
        }
        Py_DECREF(tmp_call_result_41);
    }
    {
        PyObject *tmp_called_name_78;
        PyObject *tmp_call_result_42;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_78 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 412;
        tmp_call_result_42 = CALL_FUNCTION_NO_ARGS(tmp_called_name_78);
        if (tmp_call_result_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_31;
        }
        Py_DECREF(tmp_call_result_42);
    }
    {
        PyObject *tmp_called_name_79;
        PyObject *tmp_call_result_43;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_79 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 413;
        tmp_call_result_43 = CALL_FUNCTION_NO_ARGS(tmp_called_name_79);
        if (tmp_call_result_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 413;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_31;
        }
        Py_DECREF(tmp_call_result_43);
    }
    {
        PyObject *tmp_called_name_80;
        PyObject *tmp_call_result_44;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_80 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 414;
        tmp_call_result_44 = CALL_FUNCTION_NO_ARGS(tmp_called_name_80);
        if (tmp_call_result_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 414;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_31;
        }
        Py_DECREF(tmp_call_result_44);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 409;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_31;
    }
    goto loop_start_24;
    loop_end_24:;
    goto try_end_27;
    // Exception handler code:
    try_except_handler_31:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_24__iter_value);
    tmp_for_loop_24__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_24__for_iterator);
    Py_DECREF(tmp_for_loop_24__for_iterator);
    tmp_for_loop_24__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_27;
    exception_value = exception_keeper_value_27;
    exception_tb = exception_keeper_tb_27;
    exception_lineno = exception_keeper_lineno_27;

    goto try_except_handler_29;
    // End of try:
    try_end_27:;
    Py_XDECREF(tmp_for_loop_24__iter_value);
    tmp_for_loop_24__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_24__for_iterator);
    Py_DECREF(tmp_for_loop_24__for_iterator);
    tmp_for_loop_24__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_135;
        PyObject *tmp_called_name_81;
        CHECK_OBJECT(PyCell_GET(var_u30));
        tmp_called_name_81 = PyCell_GET(var_u30);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 415;
        tmp_assign_source_135 = CALL_FUNCTION_NO_ARGS(tmp_called_name_81);
        if (tmp_assign_source_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 415;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        {
            PyObject *old = var_trait_count;
            var_trait_count = tmp_assign_source_135;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_136;
        PyObject *tmp_iter_arg_29;
        PyObject *tmp_xrange_low_23;
        CHECK_OBJECT(var_trait_count);
        tmp_xrange_low_23 = var_trait_count;
        tmp_iter_arg_29 = BUILTIN_XRANGE1(tmp_xrange_low_23);
        if (tmp_iter_arg_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        tmp_assign_source_136 = MAKE_ITERATOR(tmp_iter_arg_29);
        Py_DECREF(tmp_iter_arg_29);
        if (tmp_assign_source_136 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 416;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_29;
        }
        {
            PyObject *old = tmp_for_loop_25__for_iterator;
            tmp_for_loop_25__for_iterator = tmp_assign_source_136;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_25:;
    {
        PyObject *tmp_next_source_25;
        PyObject *tmp_assign_source_137;
        CHECK_OBJECT(tmp_for_loop_25__for_iterator);
        tmp_next_source_25 = tmp_for_loop_25__for_iterator;
        tmp_assign_source_137 = ITERATOR_NEXT(tmp_next_source_25);
        if (tmp_assign_source_137 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_25;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 416;
                goto try_except_handler_32;
            }
        }

        {
            PyObject *old = tmp_for_loop_25__iter_value;
            tmp_for_loop_25__iter_value = tmp_assign_source_137;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_138;
        CHECK_OBJECT(tmp_for_loop_25__iter_value);
        tmp_assign_source_138 = tmp_for_loop_25__iter_value;
        {
            PyObject *old = var__c2;
            var__c2 = tmp_assign_source_138;
            Py_INCREF(var__c2);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_82;
        PyObject *tmp_call_result_45;
        CHECK_OBJECT(var_parse_traits_info);
        tmp_called_name_82 = var_parse_traits_info;
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 417;
        tmp_call_result_45 = CALL_FUNCTION_NO_ARGS(tmp_called_name_82);
        if (tmp_call_result_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 417;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_32;
        }
        Py_DECREF(tmp_call_result_45);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 416;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_32;
    }
    goto loop_start_25;
    loop_end_25:;
    goto try_end_28;
    // Exception handler code:
    try_except_handler_32:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_keeper_lineno_28 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_25__iter_value);
    tmp_for_loop_25__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_25__for_iterator);
    Py_DECREF(tmp_for_loop_25__for_iterator);
    tmp_for_loop_25__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_28;
    exception_value = exception_keeper_value_28;
    exception_tb = exception_keeper_tb_28;
    exception_lineno = exception_keeper_lineno_28;

    goto try_except_handler_29;
    // End of try:
    try_end_28:;
    Py_XDECREF(tmp_for_loop_25__iter_value);
    tmp_for_loop_25__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_25__for_iterator);
    Py_DECREF(tmp_for_loop_25__for_iterator);
    tmp_for_loop_25__for_iterator = NULL;

    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 395;
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_29;
    }
    goto loop_start_22;
    loop_end_22:;
    goto try_end_29;
    // Exception handler code:
    try_except_handler_29:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_keeper_lineno_29 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_22__iter_value);
    tmp_for_loop_22__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_22__for_iterator);
    Py_DECREF(tmp_for_loop_22__for_iterator);
    tmp_for_loop_22__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_29;
    exception_value = exception_keeper_value_29;
    exception_tb = exception_keeper_tb_29;
    exception_lineno = exception_keeper_lineno_29;

    goto frame_exception_exit_1;
    // End of try:
    try_end_29:;
    Py_XDECREF(tmp_for_loop_22__iter_value);
    tmp_for_loop_22__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_22__for_iterator);
    Py_DECREF(tmp_for_loop_22__for_iterator);
    tmp_for_loop_22__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        PyObject *tmp_left_name_10;
        PyObject *tmp_right_name_10;
        PyObject *tmp_called_instance_12;
        PyObject *tmp_len_arg_2;
        CHECK_OBJECT(var_p);
        tmp_left_name_10 = var_p;
        CHECK_OBJECT(PyCell_GET(var_code_reader));
        tmp_called_instance_12 = PyCell_GET(var_code_reader);
        frame_364e3640986744e9c5fd6572b2388037->m_frame.f_lineno = 419;
        tmp_right_name_10 = CALL_METHOD_NO_ARGS(tmp_called_instance_12, const_str_plain_tell);
        if (tmp_right_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 419;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_10 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_10, tmp_right_name_10);
        Py_DECREF(tmp_right_name_10);
        if (tmp_compexpr_left_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 419;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_code_tag);
        tmp_len_arg_2 = var_code_tag;
        tmp_compexpr_right_10 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_compexpr_right_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_compexpr_left_10);

            exception_lineno = 419;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_2 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_10, tmp_compexpr_right_10);
        Py_DECREF(tmp_compexpr_left_10);
        Py_DECREF(tmp_compexpr_right_10);
        if (tmp_operand_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 419;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        Py_DECREF(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 419;
            type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_11 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_raise_type_3;
        tmp_raise_type_3 = PyExc_AssertionError;
        exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        exception_lineno = 419;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "coooccooocooooooooooooooooooooooooooooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_11:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_364e3640986744e9c5fd6572b2388037);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_364e3640986744e9c5fd6572b2388037);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_364e3640986744e9c5fd6572b2388037, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_364e3640986744e9c5fd6572b2388037->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_364e3640986744e9c5fd6572b2388037, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_364e3640986744e9c5fd6572b2388037,
        type_description_1,
        par_self,
        par_file_contents,
        var_code_tag,
        var_p,
        var_code_reader,
        var_u30,
        var_s32,
        var_u32,
        var_read_bytes,
        var_read_byte,
        var_int_count,
        var__c,
        var_uint_count,
        var_double_count,
        var_string_count,
        var_s,
        var_namespace_count,
        var_ns_set_count,
        var_count,
        var__c2,
        var_multiname_count,
        var_MULTINAME_SIZES,
        var_kind,
        var_name_idx,
        var_method_count,
        var_MethodInfo,
        var_method_infos,
        var_method_id,
        var_param_count,
        var__,
        var_flags,
        var_option_count,
        var_c,
        var_mi,
        var_metadata_count,
        var_item_count,
        var_parse_traits_info,
        var_class_count,
        var_classes,
        var_class_id,
        var_cname,
        var_avm_class,
        var_intrf_count,
        var_trait_count,
        var_trait_methods,
        var_trait_constants,
        var_script_count,
        var_method_body_count,
        var_Method,
        var_method_idx,
        var_local_count,
        var_code_length,
        var_code,
        var_m,
        var_exception_count
    );


    // Release cached frame.
    if (frame_364e3640986744e9c5fd6572b2388037 == cache_frame_364e3640986744e9c5fd6572b2388037) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_364e3640986744e9c5fd6572b2388037);
    }
    cache_frame_364e3640986744e9c5fd6572b2388037 = NULL;

    assertFrameObject(frame_364e3640986744e9c5fd6572b2388037);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_code_tag);
    Py_DECREF(var_code_tag);
    var_code_tag = NULL;

    CHECK_OBJECT(var_p);
    Py_DECREF(var_p);
    var_p = NULL;

    CHECK_OBJECT(var_code_reader);
    Py_DECREF(var_code_reader);
    var_code_reader = NULL;

    CHECK_OBJECT(var_u30);
    Py_DECREF(var_u30);
    var_u30 = NULL;

    CHECK_OBJECT(var_s32);
    Py_DECREF(var_s32);
    var_s32 = NULL;

    CHECK_OBJECT(var_u32);
    Py_DECREF(var_u32);
    var_u32 = NULL;

    CHECK_OBJECT(var_read_bytes);
    Py_DECREF(var_read_bytes);
    var_read_bytes = NULL;

    CHECK_OBJECT(var_read_byte);
    Py_DECREF(var_read_byte);
    var_read_byte = NULL;

    CHECK_OBJECT(var_int_count);
    Py_DECREF(var_int_count);
    var_int_count = NULL;

    Py_XDECREF(var__c);
    var__c = NULL;

    CHECK_OBJECT(var_uint_count);
    Py_DECREF(var_uint_count);
    var_uint_count = NULL;

    CHECK_OBJECT(var_double_count);
    Py_DECREF(var_double_count);
    var_double_count = NULL;

    CHECK_OBJECT(var_string_count);
    Py_DECREF(var_string_count);
    var_string_count = NULL;

    Py_XDECREF(var_s);
    var_s = NULL;

    CHECK_OBJECT(var_namespace_count);
    Py_DECREF(var_namespace_count);
    var_namespace_count = NULL;

    CHECK_OBJECT(var_ns_set_count);
    Py_DECREF(var_ns_set_count);
    var_ns_set_count = NULL;

    Py_XDECREF(var_count);
    var_count = NULL;

    Py_XDECREF(var__c2);
    var__c2 = NULL;

    CHECK_OBJECT(var_multiname_count);
    Py_DECREF(var_multiname_count);
    var_multiname_count = NULL;

    CHECK_OBJECT(var_MULTINAME_SIZES);
    Py_DECREF(var_MULTINAME_SIZES);
    var_MULTINAME_SIZES = NULL;

    Py_XDECREF(var_kind);
    var_kind = NULL;

    Py_XDECREF(var_name_idx);
    var_name_idx = NULL;

    CHECK_OBJECT(var_method_count);
    Py_DECREF(var_method_count);
    var_method_count = NULL;

    CHECK_OBJECT(var_MethodInfo);
    Py_DECREF(var_MethodInfo);
    var_MethodInfo = NULL;

    CHECK_OBJECT(var_method_infos);
    Py_DECREF(var_method_infos);
    var_method_infos = NULL;

    Py_XDECREF(var_method_id);
    var_method_id = NULL;

    Py_XDECREF(var_param_count);
    var_param_count = NULL;

    Py_XDECREF(var__);
    var__ = NULL;

    Py_XDECREF(var_flags);
    var_flags = NULL;

    Py_XDECREF(var_option_count);
    var_option_count = NULL;

    Py_XDECREF(var_c);
    var_c = NULL;

    Py_XDECREF(var_mi);
    var_mi = NULL;

    CHECK_OBJECT(var_metadata_count);
    Py_DECREF(var_metadata_count);
    var_metadata_count = NULL;

    Py_XDECREF(var_item_count);
    var_item_count = NULL;

    CHECK_OBJECT(var_parse_traits_info);
    Py_DECREF(var_parse_traits_info);
    var_parse_traits_info = NULL;

    CHECK_OBJECT(var_class_count);
    Py_DECREF(var_class_count);
    var_class_count = NULL;

    CHECK_OBJECT(var_classes);
    Py_DECREF(var_classes);
    var_classes = NULL;

    Py_XDECREF(var_class_id);
    var_class_id = NULL;

    Py_XDECREF(var_cname);
    var_cname = NULL;

    Py_XDECREF(var_avm_class);
    var_avm_class = NULL;

    Py_XDECREF(var_intrf_count);
    var_intrf_count = NULL;

    Py_XDECREF(var_trait_count);
    var_trait_count = NULL;

    Py_XDECREF(var_trait_methods);
    var_trait_methods = NULL;

    Py_XDECREF(var_trait_constants);
    var_trait_constants = NULL;

    CHECK_OBJECT(var_script_count);
    Py_DECREF(var_script_count);
    var_script_count = NULL;

    CHECK_OBJECT(var_method_body_count);
    Py_DECREF(var_method_body_count);
    var_method_body_count = NULL;

    CHECK_OBJECT(var_Method);
    Py_DECREF(var_Method);
    var_Method = NULL;

    Py_XDECREF(var_method_idx);
    var_method_idx = NULL;

    Py_XDECREF(var_local_count);
    var_local_count = NULL;

    Py_XDECREF(var_code_length);
    var_code_length = NULL;

    Py_XDECREF(var_code);
    var_code = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_exception_count);
    var_exception_count = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_keeper_lineno_30 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_code_tag);
    var_code_tag = NULL;

    Py_XDECREF(var_p);
    var_p = NULL;

    CHECK_OBJECT(var_code_reader);
    Py_DECREF(var_code_reader);
    var_code_reader = NULL;

    CHECK_OBJECT(var_u30);
    Py_DECREF(var_u30);
    var_u30 = NULL;

    Py_XDECREF(var_s32);
    var_s32 = NULL;

    Py_XDECREF(var_u32);
    var_u32 = NULL;

    Py_XDECREF(var_read_bytes);
    var_read_bytes = NULL;

    CHECK_OBJECT(var_read_byte);
    Py_DECREF(var_read_byte);
    var_read_byte = NULL;

    Py_XDECREF(var_int_count);
    var_int_count = NULL;

    Py_XDECREF(var__c);
    var__c = NULL;

    Py_XDECREF(var_uint_count);
    var_uint_count = NULL;

    Py_XDECREF(var_double_count);
    var_double_count = NULL;

    Py_XDECREF(var_string_count);
    var_string_count = NULL;

    Py_XDECREF(var_s);
    var_s = NULL;

    Py_XDECREF(var_namespace_count);
    var_namespace_count = NULL;

    Py_XDECREF(var_ns_set_count);
    var_ns_set_count = NULL;

    Py_XDECREF(var_count);
    var_count = NULL;

    Py_XDECREF(var__c2);
    var__c2 = NULL;

    Py_XDECREF(var_multiname_count);
    var_multiname_count = NULL;

    Py_XDECREF(var_MULTINAME_SIZES);
    var_MULTINAME_SIZES = NULL;

    Py_XDECREF(var_kind);
    var_kind = NULL;

    Py_XDECREF(var_name_idx);
    var_name_idx = NULL;

    Py_XDECREF(var_method_count);
    var_method_count = NULL;

    Py_XDECREF(var_MethodInfo);
    var_MethodInfo = NULL;

    Py_XDECREF(var_method_infos);
    var_method_infos = NULL;

    Py_XDECREF(var_method_id);
    var_method_id = NULL;

    Py_XDECREF(var_param_count);
    var_param_count = NULL;

    Py_XDECREF(var__);
    var__ = NULL;

    Py_XDECREF(var_flags);
    var_flags = NULL;

    Py_XDECREF(var_option_count);
    var_option_count = NULL;

    Py_XDECREF(var_c);
    var_c = NULL;

    Py_XDECREF(var_mi);
    var_mi = NULL;

    Py_XDECREF(var_metadata_count);
    var_metadata_count = NULL;

    Py_XDECREF(var_item_count);
    var_item_count = NULL;

    Py_XDECREF(var_parse_traits_info);
    var_parse_traits_info = NULL;

    Py_XDECREF(var_class_count);
    var_class_count = NULL;

    Py_XDECREF(var_classes);
    var_classes = NULL;

    Py_XDECREF(var_class_id);
    var_class_id = NULL;

    Py_XDECREF(var_cname);
    var_cname = NULL;

    Py_XDECREF(var_avm_class);
    var_avm_class = NULL;

    Py_XDECREF(var_intrf_count);
    var_intrf_count = NULL;

    Py_XDECREF(var_trait_count);
    var_trait_count = NULL;

    Py_XDECREF(var_trait_methods);
    var_trait_methods = NULL;

    Py_XDECREF(var_trait_constants);
    var_trait_constants = NULL;

    Py_XDECREF(var_script_count);
    var_script_count = NULL;

    Py_XDECREF(var_method_body_count);
    var_method_body_count = NULL;

    Py_XDECREF(var_Method);
    var_Method = NULL;

    Py_XDECREF(var_method_idx);
    var_method_idx = NULL;

    Py_XDECREF(var_local_count);
    var_local_count = NULL;

    Py_XDECREF(var_code_length);
    var_code_length = NULL;

    Py_XDECREF(var_code);
    var_code = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_exception_count);
    var_exception_count = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_30;
    exception_value = exception_keeper_value_30;
    exception_tb = exception_keeper_tb_30;
    exception_lineno = exception_keeper_lineno_30;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_file_contents);
    Py_DECREF(par_file_contents);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_file_contents);
    Py_DECREF(par_file_contents);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_22___init__$$$function_1_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_params = python_pars[0];
    struct Nuitka_FrameObject *frame_61831b29f7fc8b7d2b3ed8cf1926e0ff;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_61831b29f7fc8b7d2b3ed8cf1926e0ff = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_61831b29f7fc8b7d2b3ed8cf1926e0ff)) {
        Py_XDECREF(cache_frame_61831b29f7fc8b7d2b3ed8cf1926e0ff);

#if _DEBUG_REFCOUNTS
        if (cache_frame_61831b29f7fc8b7d2b3ed8cf1926e0ff == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_61831b29f7fc8b7d2b3ed8cf1926e0ff = MAKE_FUNCTION_FRAME(codeobj_61831b29f7fc8b7d2b3ed8cf1926e0ff, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_61831b29f7fc8b7d2b3ed8cf1926e0ff->m_type_description == NULL);
    frame_61831b29f7fc8b7d2b3ed8cf1926e0ff = cache_frame_61831b29f7fc8b7d2b3ed8cf1926e0ff;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_61831b29f7fc8b7d2b3ed8cf1926e0ff);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_61831b29f7fc8b7d2b3ed8cf1926e0ff) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_undefined);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_undefined);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55679 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 188;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_return_value = tmp_mvar_value_1;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_61831b29f7fc8b7d2b3ed8cf1926e0ff);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_61831b29f7fc8b7d2b3ed8cf1926e0ff);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_61831b29f7fc8b7d2b3ed8cf1926e0ff);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_61831b29f7fc8b7d2b3ed8cf1926e0ff, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_61831b29f7fc8b7d2b3ed8cf1926e0ff->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_61831b29f7fc8b7d2b3ed8cf1926e0ff, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_61831b29f7fc8b7d2b3ed8cf1926e0ff,
        type_description_1,
        par_params
    );


    // Release cached frame.
    if (frame_61831b29f7fc8b7d2b3ed8cf1926e0ff == cache_frame_61831b29f7fc8b7d2b3ed8cf1926e0ff) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_61831b29f7fc8b7d2b3ed8cf1926e0ff);
    }
    cache_frame_61831b29f7fc8b7d2b3ed8cf1926e0ff = NULL;

    assertFrameObject(frame_61831b29f7fc8b7d2b3ed8cf1926e0ff);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_params);
    Py_DECREF(par_params);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_params);
    Py_DECREF(par_params);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct youtube_dl$swfinterp$$$function_22___init__$$$genexpr_1_genexpr_locals {
    PyObject *var_tag_code;
    PyObject *var_tag;
    PyObject *tmp_iter_value_0;
    PyObject *tmp_tuple_unpack_1__element_1;
    PyObject *tmp_tuple_unpack_1__element_2;
    PyObject *tmp_tuple_unpack_1__source_iter;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
};

static PyObject *youtube_dl$swfinterp$$$function_22___init__$$$genexpr_1_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check( (PyObject *)generator ));

    // Heap access if used.
    struct youtube_dl$swfinterp$$$function_22___init__$$$genexpr_1_genexpr_locals *generator_heap = (struct youtube_dl$swfinterp$$$function_22___init__$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_tag_code = NULL;
    generator_heap->var_tag = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_95c32b0d132eb5385c712b92df1b5d75, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(PyCell_GET(generator->m_closure[0]));
        tmp_next_source_1 = PyCell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "Noo";
                generator_heap->exception_lineno = 190;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_iter_arg_1 = generator_heap->tmp_iter_value_0;
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 190;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__source_iter;
            generator_heap->tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_3 == NULL) {
            if (!ERROR_OCCURRED()) {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF(generator_heap->exception_type);
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            }


            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 190;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_1;
            generator_heap->tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF(generator_heap->exception_type);
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            }


            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 190;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_2;
            generator_heap->tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        generator_heap->tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(generator_heap->tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);

                    generator_heap->type_description_1 = "Noo";
                    generator_heap->exception_lineno = 190;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(generator_heap->tmp_iterator_attempt);

            generator_heap->exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            generator_heap->exception_value = const_str_digest_fcf040720b88d60da4ce975010c44a3a;
            Py_INCREF(generator_heap->exception_value);
            generator_heap->exception_tb = NULL;

            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 190;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
    Py_DECREF(generator_heap->tmp_tuple_unpack_1__source_iter);
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_1);
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_2);
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
    Py_DECREF(generator_heap->tmp_tuple_unpack_1__source_iter);
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__element_1);
        tmp_assign_source_5 = generator_heap->tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = generator_heap->var_tag_code;
            generator_heap->var_tag_code = tmp_assign_source_5;
            Py_INCREF(generator_heap->var_tag_code);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_1);
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__element_2);
        tmp_assign_source_6 = generator_heap->tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = generator_heap->var_tag;
            generator_heap->var_tag = tmp_assign_source_6;
            Py_INCREF(generator_heap->var_tag);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_2);
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_tmp_condition_result_1_object_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(generator_heap->var_tag_code);
        tmp_compexpr_left_1 = generator_heap->var_tag_code;
        tmp_compexpr_right_1 = const_int_pos_82;
        tmp_tmp_condition_result_1_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_tmp_condition_result_1_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 192;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_1_object_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            Py_DECREF(tmp_tmp_condition_result_1_object_1);

            generator_heap->exception_lineno = 192;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_1_object_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var_tag);
        tmp_expression_name_1 = generator_heap->var_tag;
        Py_INCREF(tmp_expression_name_1);
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 190;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    branch_no_1:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 190;
        generator_heap->type_description_1 = "Noo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_3 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_3 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_3 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_3 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_3;
    generator_heap->exception_value = generator_heap->exception_keeper_value_3;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_3;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_tag_code,
            generator_heap->var_tag
        );


        // Release cached frame.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(generator->m_frame);
        }
        cache_m_frame = NULL;

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_4 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_4 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_4 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_4 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_tag_code);
    generator_heap->var_tag_code = NULL;

    Py_XDECREF(generator_heap->var_tag);
    generator_heap->var_tag = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_4;
    generator_heap->exception_value = generator_heap->exception_keeper_value_4;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_4;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:
    try_end_4:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF(generator_heap->var_tag_code);
    generator_heap->var_tag_code = NULL;

    Py_XDECREF(generator_heap->var_tag);
    generator_heap->var_tag = NULL;



    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *youtube_dl$swfinterp$$$function_22___init__$$$genexpr_1_genexpr_maker(void) {
    return Nuitka_Generator_New(
        youtube_dl$swfinterp$$$function_22___init__$$$genexpr_1_genexpr_context,
        module_youtube_dl$swfinterp,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_ebf33df35ba2d9d1b3825c36bdb474e0,
#endif
        codeobj_95c32b0d132eb5385c712b92df1b5d75,
        1,
        sizeof(struct youtube_dl$swfinterp$$$function_22___init__$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_youtube_dl$swfinterp$$$function_22___init__$$$function_2_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    struct Nuitka_FrameObject *frame_c7571fbbe7d43be0d587eec3e1f09356;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_c7571fbbe7d43be0d587eec3e1f09356 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c7571fbbe7d43be0d587eec3e1f09356)) {
        Py_XDECREF(cache_frame_c7571fbbe7d43be0d587eec3e1f09356);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c7571fbbe7d43be0d587eec3e1f09356 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c7571fbbe7d43be0d587eec3e1f09356 = MAKE_FUNCTION_FRAME(codeobj_c7571fbbe7d43be0d587eec3e1f09356, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c7571fbbe7d43be0d587eec3e1f09356->m_type_description == NULL);
    frame_c7571fbbe7d43be0d587eec3e1f09356 = cache_frame_c7571fbbe7d43be0d587eec3e1f09356;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c7571fbbe7d43be0d587eec3e1f09356);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c7571fbbe7d43be0d587eec3e1f09356) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__u30);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__u30);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55456 ], 26, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 199;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_dircall_arg1_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_args);
        tmp_dircall_arg2_1 = par_args;
        tmp_dict_key_1 = const_str_plain_reader;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "code_reader");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 199;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_dict_value_1 = PyCell_GET(self->m_closure[0]);
        tmp_dircall_arg3_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dircall_arg3_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___internal__$$$function_11_complex_call_helper_keywords_star_list(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 199;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c7571fbbe7d43be0d587eec3e1f09356);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_c7571fbbe7d43be0d587eec3e1f09356);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c7571fbbe7d43be0d587eec3e1f09356);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c7571fbbe7d43be0d587eec3e1f09356, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c7571fbbe7d43be0d587eec3e1f09356->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c7571fbbe7d43be0d587eec3e1f09356, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c7571fbbe7d43be0d587eec3e1f09356,
        type_description_1,
        par_args,
        self->m_closure[0]
    );


    // Release cached frame.
    if (frame_c7571fbbe7d43be0d587eec3e1f09356 == cache_frame_c7571fbbe7d43be0d587eec3e1f09356) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_c7571fbbe7d43be0d587eec3e1f09356);
    }
    cache_frame_c7571fbbe7d43be0d587eec3e1f09356 = NULL;

    assertFrameObject(frame_c7571fbbe7d43be0d587eec3e1f09356);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_22___init__$$$function_3_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    struct Nuitka_FrameObject *frame_72a450eca9e5b990e6a49ab3df13f44f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_72a450eca9e5b990e6a49ab3df13f44f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_72a450eca9e5b990e6a49ab3df13f44f)) {
        Py_XDECREF(cache_frame_72a450eca9e5b990e6a49ab3df13f44f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_72a450eca9e5b990e6a49ab3df13f44f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_72a450eca9e5b990e6a49ab3df13f44f = MAKE_FUNCTION_FRAME(codeobj_72a450eca9e5b990e6a49ab3df13f44f, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_72a450eca9e5b990e6a49ab3df13f44f->m_type_description == NULL);
    frame_72a450eca9e5b990e6a49ab3df13f44f = cache_frame_72a450eca9e5b990e6a49ab3df13f44f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_72a450eca9e5b990e6a49ab3df13f44f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_72a450eca9e5b990e6a49ab3df13f44f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__s32);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__s32);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55710 ], 26, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 200;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_dircall_arg1_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_args);
        tmp_dircall_arg2_1 = par_args;
        tmp_dict_key_1 = const_str_plain_reader;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "code_reader");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 200;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_dict_value_1 = PyCell_GET(self->m_closure[0]);
        tmp_dircall_arg3_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dircall_arg3_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___internal__$$$function_11_complex_call_helper_keywords_star_list(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_72a450eca9e5b990e6a49ab3df13f44f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_72a450eca9e5b990e6a49ab3df13f44f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_72a450eca9e5b990e6a49ab3df13f44f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_72a450eca9e5b990e6a49ab3df13f44f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_72a450eca9e5b990e6a49ab3df13f44f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_72a450eca9e5b990e6a49ab3df13f44f, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_72a450eca9e5b990e6a49ab3df13f44f,
        type_description_1,
        par_args,
        self->m_closure[0]
    );


    // Release cached frame.
    if (frame_72a450eca9e5b990e6a49ab3df13f44f == cache_frame_72a450eca9e5b990e6a49ab3df13f44f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_72a450eca9e5b990e6a49ab3df13f44f);
    }
    cache_frame_72a450eca9e5b990e6a49ab3df13f44f = NULL;

    assertFrameObject(frame_72a450eca9e5b990e6a49ab3df13f44f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_22___init__$$$function_4_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    struct Nuitka_FrameObject *frame_8cb613d3586e0801204bbaf0144128ff;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_8cb613d3586e0801204bbaf0144128ff = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8cb613d3586e0801204bbaf0144128ff)) {
        Py_XDECREF(cache_frame_8cb613d3586e0801204bbaf0144128ff);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8cb613d3586e0801204bbaf0144128ff == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8cb613d3586e0801204bbaf0144128ff = MAKE_FUNCTION_FRAME(codeobj_8cb613d3586e0801204bbaf0144128ff, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_8cb613d3586e0801204bbaf0144128ff->m_type_description == NULL);
    frame_8cb613d3586e0801204bbaf0144128ff = cache_frame_8cb613d3586e0801204bbaf0144128ff;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8cb613d3586e0801204bbaf0144128ff);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8cb613d3586e0801204bbaf0144128ff) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__u32);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__u32);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55736 ], 26, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 201;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_dircall_arg1_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_args);
        tmp_dircall_arg2_1 = par_args;
        tmp_dict_key_1 = const_str_plain_reader;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "code_reader");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 201;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_dict_value_1 = PyCell_GET(self->m_closure[0]);
        tmp_dircall_arg3_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dircall_arg3_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___internal__$$$function_11_complex_call_helper_keywords_star_list(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8cb613d3586e0801204bbaf0144128ff);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_8cb613d3586e0801204bbaf0144128ff);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8cb613d3586e0801204bbaf0144128ff);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8cb613d3586e0801204bbaf0144128ff, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8cb613d3586e0801204bbaf0144128ff->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8cb613d3586e0801204bbaf0144128ff, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8cb613d3586e0801204bbaf0144128ff,
        type_description_1,
        par_args,
        self->m_closure[0]
    );


    // Release cached frame.
    if (frame_8cb613d3586e0801204bbaf0144128ff == cache_frame_8cb613d3586e0801204bbaf0144128ff) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_8cb613d3586e0801204bbaf0144128ff);
    }
    cache_frame_8cb613d3586e0801204bbaf0144128ff = NULL;

    assertFrameObject(frame_8cb613d3586e0801204bbaf0144128ff);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_22___init__$$$function_5_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    struct Nuitka_FrameObject *frame_afeea3dcc9e786e32fc3deed8cc5590e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_afeea3dcc9e786e32fc3deed8cc5590e = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_afeea3dcc9e786e32fc3deed8cc5590e)) {
        Py_XDECREF(cache_frame_afeea3dcc9e786e32fc3deed8cc5590e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_afeea3dcc9e786e32fc3deed8cc5590e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_afeea3dcc9e786e32fc3deed8cc5590e = MAKE_FUNCTION_FRAME(codeobj_afeea3dcc9e786e32fc3deed8cc5590e, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_afeea3dcc9e786e32fc3deed8cc5590e->m_type_description == NULL);
    frame_afeea3dcc9e786e32fc3deed8cc5590e = cache_frame_afeea3dcc9e786e32fc3deed8cc5590e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_afeea3dcc9e786e32fc3deed8cc5590e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_afeea3dcc9e786e32fc3deed8cc5590e) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_bytes);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__read_bytes);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55482 ], 33, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 202;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_dircall_arg1_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_args);
        tmp_dircall_arg2_1 = par_args;
        tmp_dict_key_1 = const_str_plain_reader;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "code_reader");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 202;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_dict_value_1 = PyCell_GET(self->m_closure[0]);
        tmp_dircall_arg3_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dircall_arg3_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___internal__$$$function_11_complex_call_helper_keywords_star_list(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 202;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_afeea3dcc9e786e32fc3deed8cc5590e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_afeea3dcc9e786e32fc3deed8cc5590e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_afeea3dcc9e786e32fc3deed8cc5590e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_afeea3dcc9e786e32fc3deed8cc5590e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_afeea3dcc9e786e32fc3deed8cc5590e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_afeea3dcc9e786e32fc3deed8cc5590e, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_afeea3dcc9e786e32fc3deed8cc5590e,
        type_description_1,
        par_args,
        self->m_closure[0]
    );


    // Release cached frame.
    if (frame_afeea3dcc9e786e32fc3deed8cc5590e == cache_frame_afeea3dcc9e786e32fc3deed8cc5590e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_afeea3dcc9e786e32fc3deed8cc5590e);
    }
    cache_frame_afeea3dcc9e786e32fc3deed8cc5590e = NULL;

    assertFrameObject(frame_afeea3dcc9e786e32fc3deed8cc5590e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_22___init__$$$function_6_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    struct Nuitka_FrameObject *frame_0e13d059172952bedfbb4183cc8b1865;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_0e13d059172952bedfbb4183cc8b1865 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_0e13d059172952bedfbb4183cc8b1865)) {
        Py_XDECREF(cache_frame_0e13d059172952bedfbb4183cc8b1865);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0e13d059172952bedfbb4183cc8b1865 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0e13d059172952bedfbb4183cc8b1865 = MAKE_FUNCTION_FRAME(codeobj_0e13d059172952bedfbb4183cc8b1865, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_0e13d059172952bedfbb4183cc8b1865->m_type_description == NULL);
    frame_0e13d059172952bedfbb4183cc8b1865 = cache_frame_0e13d059172952bedfbb4183cc8b1865;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_0e13d059172952bedfbb4183cc8b1865);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_0e13d059172952bedfbb4183cc8b1865) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_byte);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__read_byte);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55762 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 203;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_dircall_arg1_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_args);
        tmp_dircall_arg2_1 = par_args;
        tmp_dict_key_1 = const_str_plain_reader;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "code_reader");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 203;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_dict_value_1 = PyCell_GET(self->m_closure[0]);
        tmp_dircall_arg3_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dircall_arg3_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___internal__$$$function_11_complex_call_helper_keywords_star_list(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 203;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0e13d059172952bedfbb4183cc8b1865);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_0e13d059172952bedfbb4183cc8b1865);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0e13d059172952bedfbb4183cc8b1865);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0e13d059172952bedfbb4183cc8b1865, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0e13d059172952bedfbb4183cc8b1865->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0e13d059172952bedfbb4183cc8b1865, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0e13d059172952bedfbb4183cc8b1865,
        type_description_1,
        par_args,
        self->m_closure[0]
    );


    // Release cached frame.
    if (frame_0e13d059172952bedfbb4183cc8b1865 == cache_frame_0e13d059172952bedfbb4183cc8b1865) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_0e13d059172952bedfbb4183cc8b1865);
    }
    cache_frame_0e13d059172952bedfbb4183cc8b1865 = NULL;

    assertFrameObject(frame_0e13d059172952bedfbb4183cc8b1865);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_22___init__$$$function_7_parse_traits_info(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *var_trait_name_idx = NULL;
    PyObject *var_kind_full = NULL;
    PyObject *var_kind = NULL;
    PyObject *var_attrs = NULL;
    PyObject *var_methods = NULL;
    PyObject *var_constants = NULL;
    PyObject *var_vindex = NULL;
    PyObject *var_vkind = NULL;
    PyObject *var_value = NULL;
    PyObject *var_method_idx = NULL;
    PyObject *var_function_idx = NULL;
    PyObject *var_metadata_count = NULL;
    PyObject *var__c3 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_c7f299452f55c1d66752a520d5989713;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    PyObject *tmp_dictset_value;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_c7f299452f55c1d66752a520d5989713 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_c7f299452f55c1d66752a520d5989713)) {
        Py_XDECREF(cache_frame_c7f299452f55c1d66752a520d5989713);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c7f299452f55c1d66752a520d5989713 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c7f299452f55c1d66752a520d5989713 = MAKE_FUNCTION_FRAME(codeobj_c7f299452f55c1d66752a520d5989713, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c7f299452f55c1d66752a520d5989713->m_type_description == NULL);
    frame_c7f299452f55c1d66752a520d5989713 = cache_frame_c7f299452f55c1d66752a520d5989713;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c7f299452f55c1d66752a520d5989713);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c7f299452f55c1d66752a520d5989713) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 299;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 299;
        tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS(tmp_called_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 299;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_trait_name_idx == NULL);
        var_trait_name_idx = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_2;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "read_byte");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 300;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = PyCell_GET(self->m_closure[0]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 300;
        tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS(tmp_called_name_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_kind_full == NULL);
        var_kind_full = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT(var_kind_full);
        tmp_left_name_1 = var_kind_full;
        tmp_right_name_1 = const_int_pos_15;
        tmp_assign_source_3 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_1, tmp_right_name_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 301;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_kind == NULL);
        var_kind = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT(var_kind_full);
        tmp_left_name_2 = var_kind_full;
        tmp_right_name_2 = const_int_pos_4;
        tmp_assign_source_4 = BINARY_OPERATION_RSHIFT_OBJECT_OBJECT_LONG(tmp_left_name_2, tmp_right_name_2);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_attrs == NULL);
        var_attrs = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        tmp_assign_source_5 = PyDict_New();
        assert(var_methods == NULL);
        var_methods = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        tmp_assign_source_6 = Py_None;
        assert(var_constants == NULL);
        Py_INCREF(tmp_assign_source_6);
        var_constants = tmp_assign_source_6;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_tmp_condition_result_1_object_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_kind);
        tmp_compexpr_left_1 = var_kind;
        tmp_compexpr_right_1 = const_int_0;
        tmp_tmp_condition_result_1_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_tmp_condition_result_1_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_1_object_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_1_object_1);

            exception_lineno = 305;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_1_object_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_call_result_1;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 306;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_3 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 306;
        tmp_call_result_1 = CALL_FUNCTION_NO_ARGS(tmp_called_name_3);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_call_result_2;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 307;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_4 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 307;
        tmp_call_result_2 = CALL_FUNCTION_NO_ARGS(tmp_called_name_4);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_5;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 308;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_5 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 308;
        tmp_assign_source_7 = CALL_FUNCTION_NO_ARGS(tmp_called_name_5);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_vindex == NULL);
        var_vindex = tmp_assign_source_7;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_tmp_condition_result_2_object_1;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_vindex);
        tmp_compexpr_left_2 = var_vindex;
        tmp_compexpr_right_2 = const_int_0;
        tmp_tmp_condition_result_2_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        if (tmp_tmp_condition_result_2_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 309;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_tmp_condition_result_2_object_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_2_object_1);

            exception_lineno = 309;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_2_object_1);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_name_6;
        PyObject *tmp_call_result_3;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "read_byte");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 310;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_6 = PyCell_GET(self->m_closure[0]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 310;
        tmp_call_result_3 = CALL_FUNCTION_NO_ARGS(tmp_called_name_6);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 310;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    branch_no_2:;
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_tmp_condition_result_3_object_1;
        int tmp_truth_name_3;
        CHECK_OBJECT(var_kind);
        tmp_compexpr_left_3 = var_kind;
        tmp_compexpr_right_3 = const_int_pos_6;
        tmp_tmp_condition_result_3_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        if (tmp_tmp_condition_result_3_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_tmp_condition_result_3_object_1);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_3_object_1);

            exception_lineno = 311;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_3_object_1);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_called_name_7;
        PyObject *tmp_call_result_4;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 312;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_7 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 312;
        tmp_call_result_4 = CALL_FUNCTION_NO_ARGS(tmp_called_name_7);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 312;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_name_8;
        PyObject *tmp_call_result_5;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 313;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_8 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 313;
        tmp_call_result_5 = CALL_FUNCTION_NO_ARGS(tmp_called_name_8);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 313;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_name_9;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 314;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_9 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 314;
        tmp_assign_source_8 = CALL_FUNCTION_NO_ARGS(tmp_called_name_9);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 314;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_vindex == NULL);
        var_vindex = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        tmp_assign_source_9 = const_str_plain_any;
        assert(var_vkind == NULL);
        Py_INCREF(tmp_assign_source_9);
        var_vkind = tmp_assign_source_9;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_tmp_condition_result_4_object_1;
        int tmp_truth_name_4;
        CHECK_OBJECT(var_vindex);
        tmp_compexpr_left_4 = var_vindex;
        tmp_compexpr_right_4 = const_int_0;
        tmp_tmp_condition_result_4_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
        if (tmp_tmp_condition_result_4_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_tmp_condition_result_4_object_1);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_4_object_1);

            exception_lineno = 316;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_4_object_1);
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_name_10;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "read_byte");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 317;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_10 = PyCell_GET(self->m_closure[0]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 317;
        tmp_assign_source_10 = CALL_FUNCTION_NO_ARGS(tmp_called_name_10);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 317;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_vkind;
            assert(old != NULL);
            var_vkind = tmp_assign_source_10;
            Py_DECREF(old);
        }

    }
    branch_no_4:;
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_tmp_condition_result_5_object_1;
        int tmp_truth_name_5;
        CHECK_OBJECT(var_vkind);
        tmp_compexpr_left_5 = var_vkind;
        tmp_compexpr_right_5 = const_int_pos_3;
        tmp_tmp_condition_result_5_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_5, tmp_compexpr_right_5);
        if (tmp_tmp_condition_result_5_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 318;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_tmp_condition_result_5_object_1);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_5_object_1);

            exception_lineno = 318;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_5_object_1);
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_subscript_name_1;
        if (PyCell_GET(self->m_closure[1]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 319;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_2 = PyCell_GET(self->m_closure[1]);
        tmp_expression_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, const_str_plain_constant_ints);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_vindex);
        tmp_subscript_name_1 = var_vindex;
        tmp_assign_source_11 = LOOKUP_SUBSCRIPT(tmp_expression_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_value == NULL);
        var_value = tmp_assign_source_11;
    }
    goto branch_end_5;
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        PyObject *tmp_tmp_condition_result_6_object_1;
        int tmp_truth_name_6;
        CHECK_OBJECT(var_vkind);
        tmp_compexpr_left_6 = var_vkind;
        tmp_compexpr_right_6 = const_int_pos_4;
        tmp_tmp_condition_result_6_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_6, tmp_compexpr_right_6);
        if (tmp_tmp_condition_result_6_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 320;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_tmp_condition_result_6_object_1);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_6_object_1);

            exception_lineno = 320;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_6_object_1);
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_subscript_name_2;
        if (PyCell_GET(self->m_closure[1]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 321;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_4 = PyCell_GET(self->m_closure[1]);
        tmp_expression_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, const_str_plain_constant_uints);
        if (tmp_expression_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 321;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_vindex);
        tmp_subscript_name_2 = var_vindex;
        tmp_assign_source_12 = LOOKUP_SUBSCRIPT(tmp_expression_name_3, tmp_subscript_name_2);
        Py_DECREF(tmp_expression_name_3);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 321;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_value == NULL);
        var_value = tmp_assign_source_12;
    }
    goto branch_end_6;
    branch_no_6:;
    tmp_return_value = DEEP_COPY(const_tuple_dict_empty_none_tuple);
    goto frame_return_exit_1;
    branch_end_6:;
    branch_end_5:;
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_subscript_name_3;
        if (PyCell_GET(self->m_closure[1]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 324;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_6 = PyCell_GET(self->m_closure[1]);
        tmp_expression_name_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, const_str_plain_multinames);
        if (tmp_expression_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_trait_name_idx);
        tmp_subscript_name_3 = var_trait_name_idx;
        tmp_dict_key_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_5, tmp_subscript_name_3);
        Py_DECREF(tmp_expression_name_5);
        if (tmp_dict_key_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (var_value == NULL) {
            Py_DECREF(tmp_dict_key_1);
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "value");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 324;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_dict_value_1 = var_value;
        tmp_assign_source_13 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_assign_source_13, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_key_1);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_13);

            exception_lineno = 324;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_constants;
            assert(old != NULL);
            var_constants = tmp_assign_source_13;
            Py_DECREF(old);
        }

    }
    goto branch_end_3;
    branch_no_3:;
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        CHECK_OBJECT(var_kind);
        tmp_compexpr_left_7 = var_kind;
        tmp_compexpr_right_7 = const_tuple_int_pos_1_int_pos_2_int_pos_3_tuple;
        tmp_res = PySequence_Contains(tmp_compexpr_right_7, tmp_compexpr_left_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 325;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_called_name_11;
        PyObject *tmp_call_result_6;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 326;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_11 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 326;
        tmp_call_result_6 = CALL_FUNCTION_NO_ARGS(tmp_called_name_11);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 326;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_name_12;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 327;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_12 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 327;
        tmp_assign_source_14 = CALL_FUNCTION_NO_ARGS(tmp_called_name_12);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 327;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_method_idx == NULL);
        var_method_idx = tmp_assign_source_14;
    }
    {
        PyObject *tmp_expression_name_7;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_subscript_name_4;
        CHECK_OBJECT(var_method_idx);
        tmp_dictset_value = var_method_idx;
        CHECK_OBJECT(var_methods);
        tmp_dictset_dict = var_methods;
        if (PyCell_GET(self->m_closure[1]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 328;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_8 = PyCell_GET(self->m_closure[1]);
        tmp_expression_name_7 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, const_str_plain_multinames);
        if (tmp_expression_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_trait_name_idx);
        tmp_subscript_name_4 = var_trait_name_idx;
        tmp_dictset_key = LOOKUP_SUBSCRIPT(tmp_expression_name_7, tmp_subscript_name_4);
        Py_DECREF(tmp_expression_name_7);
        if (tmp_dictset_key == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem(tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value);
        Py_DECREF(tmp_dictset_key);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_7;
    branch_no_7:;
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        PyObject *tmp_tmp_condition_result_8_object_1;
        int tmp_truth_name_7;
        CHECK_OBJECT(var_kind);
        tmp_compexpr_left_8 = var_kind;
        tmp_compexpr_right_8 = const_int_pos_4;
        tmp_tmp_condition_result_8_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_8, tmp_compexpr_right_8);
        if (tmp_tmp_condition_result_8_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 329;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_7 = CHECK_IF_TRUE(tmp_tmp_condition_result_8_object_1);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_8_object_1);

            exception_lineno = 329;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_8_object_1);
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_called_name_13;
        PyObject *tmp_call_result_7;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 330;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_13 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 330;
        tmp_call_result_7 = CALL_FUNCTION_NO_ARGS(tmp_called_name_13);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_called_name_14;
        PyObject *tmp_call_result_8;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 331;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_14 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 331;
        tmp_call_result_8 = CALL_FUNCTION_NO_ARGS(tmp_called_name_14);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 331;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    goto branch_end_8;
    branch_no_8:;
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        PyObject *tmp_tmp_condition_result_9_object_1;
        int tmp_truth_name_8;
        CHECK_OBJECT(var_kind);
        tmp_compexpr_left_9 = var_kind;
        tmp_compexpr_right_9 = const_int_pos_5;
        tmp_tmp_condition_result_9_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_9, tmp_compexpr_right_9);
        if (tmp_tmp_condition_result_9_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_tmp_condition_result_9_object_1);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_9_object_1);

            exception_lineno = 332;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = tmp_truth_name_8 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_9_object_1);
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    {
        PyObject *tmp_called_name_15;
        PyObject *tmp_call_result_9;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 333;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_15 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 333;
        tmp_call_result_9 = CALL_FUNCTION_NO_ARGS(tmp_called_name_15);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 333;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_name_16;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 334;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_16 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 334;
        tmp_assign_source_15 = CALL_FUNCTION_NO_ARGS(tmp_called_name_16);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 334;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_function_idx == NULL);
        var_function_idx = tmp_assign_source_15;
    }
    {
        PyObject *tmp_expression_name_9;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_subscript_name_5;
        if (PyCell_GET(self->m_closure[1]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 335;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_10 = PyCell_GET(self->m_closure[1]);
        tmp_expression_name_9 = LOOKUP_ATTRIBUTE(tmp_expression_name_10, const_str_plain_multinames);
        if (tmp_expression_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 335;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_trait_name_idx);
        tmp_subscript_name_5 = var_trait_name_idx;
        tmp_dictset_value = LOOKUP_SUBSCRIPT(tmp_expression_name_9, tmp_subscript_name_5);
        Py_DECREF(tmp_expression_name_9);
        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 335;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_methods);
        tmp_dictset_dict = var_methods;
        CHECK_OBJECT(var_function_idx);
        tmp_dictset_key = var_function_idx;
        tmp_res = PyDict_SetItem(tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 335;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_9;
    branch_no_9:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_name_17;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_ExtractorError);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_ExtractorError);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 27135 ], 36, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 337;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_17 = tmp_mvar_value_1;
        tmp_left_name_3 = const_str_digest_1c6f4415acabe04dd6ef1c6474ffe87d;
        CHECK_OBJECT(var_kind);
        tmp_right_name_3 = var_kind;
        tmp_args_element_name_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_3, tmp_right_name_3);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 337;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 337;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_17, tmp_args_element_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_raise_type_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 337;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        exception_type = tmp_raise_type_1;
        exception_lineno = 337;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_end_9:;
    branch_end_8:;
    branch_end_7:;
    branch_end_3:;
    branch_end_1:;
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        PyObject *tmp_tmp_condition_result_10_object_1;
        int tmp_truth_name_9;
        CHECK_OBJECT(var_attrs);
        tmp_left_name_4 = var_attrs;
        tmp_right_name_4 = const_int_pos_4;
        tmp_compexpr_left_10 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_name_4, tmp_right_name_4);
        if (tmp_compexpr_left_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_10 = const_int_0;
        tmp_tmp_condition_result_10_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_10, tmp_compexpr_right_10);
        Py_DECREF(tmp_compexpr_left_10);
        if (tmp_tmp_condition_result_10_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_tmp_condition_result_10_object_1);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_10_object_1);

            exception_lineno = 339;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_10 = tmp_truth_name_9 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_10_object_1);
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_called_name_18;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 340;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_18 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 340;
        tmp_assign_source_16 = CALL_FUNCTION_NO_ARGS(tmp_called_name_18);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_metadata_count == NULL);
        var_metadata_count = tmp_assign_source_16;
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_xrange_low_1;
        CHECK_OBJECT(var_metadata_count);
        tmp_xrange_low_1 = var_metadata_count;
        tmp_iter_arg_1 = BUILTIN_XRANGE1(tmp_xrange_low_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_17 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_17;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_18;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_18 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_18 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooooccc";
                exception_lineno = 341;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_18;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_19;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_19 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var__c3;
            var__c3 = tmp_assign_source_19;
            Py_INCREF(var__c3);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_19;
        PyObject *tmp_call_result_10;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "u30");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 342;
            type_description_1 = "oooooooooooooccc";
            goto try_except_handler_2;
        }

        tmp_called_name_19 = PyCell_GET(self->m_closure[2]);
        frame_c7f299452f55c1d66752a520d5989713->m_frame.f_lineno = 342;
        tmp_call_result_10 = CALL_FUNCTION_NO_ARGS(tmp_called_name_19);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 342;
            type_description_1 = "oooooooooooooccc";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_10);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 341;
        type_description_1 = "oooooooooooooccc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_10:;
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(var_methods);
        tmp_tuple_element_1 = var_methods;
        tmp_return_value = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_1);
        if (var_constants == NULL) {
            Py_DECREF(tmp_return_value);
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "constants");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 344;
            type_description_1 = "oooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_constants;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c7f299452f55c1d66752a520d5989713);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_c7f299452f55c1d66752a520d5989713);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c7f299452f55c1d66752a520d5989713);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c7f299452f55c1d66752a520d5989713, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c7f299452f55c1d66752a520d5989713->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c7f299452f55c1d66752a520d5989713, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c7f299452f55c1d66752a520d5989713,
        type_description_1,
        var_trait_name_idx,
        var_kind_full,
        var_kind,
        var_attrs,
        var_methods,
        var_constants,
        var_vindex,
        var_vkind,
        var_value,
        var_method_idx,
        var_function_idx,
        var_metadata_count,
        var__c3,
        self->m_closure[2],
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame.
    if (frame_c7f299452f55c1d66752a520d5989713 == cache_frame_c7f299452f55c1d66752a520d5989713) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_c7f299452f55c1d66752a520d5989713);
    }
    cache_frame_c7f299452f55c1d66752a520d5989713 = NULL;

    assertFrameObject(frame_c7f299452f55c1d66752a520d5989713);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_trait_name_idx);
    Py_DECREF(var_trait_name_idx);
    var_trait_name_idx = NULL;

    CHECK_OBJECT(var_kind_full);
    Py_DECREF(var_kind_full);
    var_kind_full = NULL;

    CHECK_OBJECT(var_kind);
    Py_DECREF(var_kind);
    var_kind = NULL;

    CHECK_OBJECT(var_attrs);
    Py_DECREF(var_attrs);
    var_attrs = NULL;

    CHECK_OBJECT(var_methods);
    Py_DECREF(var_methods);
    var_methods = NULL;

    Py_XDECREF(var_constants);
    var_constants = NULL;

    Py_XDECREF(var_vindex);
    var_vindex = NULL;

    Py_XDECREF(var_vkind);
    var_vkind = NULL;

    Py_XDECREF(var_value);
    var_value = NULL;

    Py_XDECREF(var_method_idx);
    var_method_idx = NULL;

    Py_XDECREF(var_function_idx);
    var_function_idx = NULL;

    Py_XDECREF(var_metadata_count);
    var_metadata_count = NULL;

    Py_XDECREF(var__c3);
    var__c3 = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_trait_name_idx);
    var_trait_name_idx = NULL;

    Py_XDECREF(var_kind_full);
    var_kind_full = NULL;

    Py_XDECREF(var_kind);
    var_kind = NULL;

    Py_XDECREF(var_attrs);
    var_attrs = NULL;

    Py_XDECREF(var_methods);
    var_methods = NULL;

    Py_XDECREF(var_constants);
    var_constants = NULL;

    Py_XDECREF(var_vindex);
    var_vindex = NULL;

    Py_XDECREF(var_vkind);
    var_vkind = NULL;

    Py_XDECREF(var_value);
    var_value = NULL;

    Py_XDECREF(var_method_idx);
    var_method_idx = NULL;

    Py_XDECREF(var_function_idx);
    var_function_idx = NULL;

    Py_XDECREF(var_metadata_count);
    var_metadata_count = NULL;

    Py_XDECREF(var__c3);
    var__c3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct youtube_dl$swfinterp$$$function_22___init__$$$genexpr_2_genexpr_locals {
    PyObject *var_c;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *youtube_dl$swfinterp$$$function_22___init__$$$genexpr_2_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check( (PyObject *)generator ));

    // Heap access if used.
    struct youtube_dl$swfinterp$$$function_22___init__$$$genexpr_2_genexpr_locals *generator_heap = (struct youtube_dl$swfinterp$$$function_22___init__$$$genexpr_2_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_c = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_29bd29073135328bd75c4e975d16d1d9, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(PyCell_GET(generator->m_closure[0]));
        tmp_next_source_1 = PyCell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 372;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_c;
            generator_heap->var_c = tmp_assign_source_2;
            Py_INCREF(generator_heap->var_c);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_name_2;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var_c);
        tmp_expression_name_2 = generator_heap->var_c;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, const_str_plain_name);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 372;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_expression_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_expression_name_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(generator_heap->var_c);
        tmp_tuple_element_1 = generator_heap->var_c;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_expression_name_1, 1, tmp_tuple_element_1);
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_tuple_element_1, sizeof(PyObject *), &tmp_expression_name_2, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_tuple_element_1, sizeof(PyObject *), &tmp_expression_name_2, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 372;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 372;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_c
        );


        // Release cached frame.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(generator->m_frame);
        }
        cache_m_frame = NULL;

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_c);
    generator_heap->var_c = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF(generator_heap->var_c);
    generator_heap->var_c = NULL;



    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *youtube_dl$swfinterp$$$function_22___init__$$$genexpr_2_genexpr_maker(void) {
    return Nuitka_Generator_New(
        youtube_dl$swfinterp$$$function_22___init__$$$genexpr_2_genexpr_context,
        module_youtube_dl$swfinterp,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_ebf33df35ba2d9d1b3825c36bdb474e0,
#endif
        codeobj_29bd29073135328bd75c4e975d16d1d9,
        1,
        sizeof(struct youtube_dl$swfinterp$$$function_22___init__$$$genexpr_2_genexpr_locals)
    );
}


static PyObject *impl_youtube_dl$swfinterp$$$function_23_patch_function(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_avm_class = python_pars[1];
    PyObject *par_func_name = python_pars[2];
    PyObject *par_f = python_pars[3];
    struct Nuitka_FrameObject *frame_d2364f45a352fed77b77f90ee833242e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_d2364f45a352fed77b77f90ee833242e = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d2364f45a352fed77b77f90ee833242e)) {
        Py_XDECREF(cache_frame_d2364f45a352fed77b77f90ee833242e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d2364f45a352fed77b77f90ee833242e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d2364f45a352fed77b77f90ee833242e = MAKE_FUNCTION_FRAME(codeobj_d2364f45a352fed77b77f90ee833242e, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d2364f45a352fed77b77f90ee833242e->m_type_description == NULL);
    frame_d2364f45a352fed77b77f90ee833242e = cache_frame_d2364f45a352fed77b77f90ee833242e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d2364f45a352fed77b77f90ee833242e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d2364f45a352fed77b77f90ee833242e) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_ass_subscript_1;
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(par_f);
        tmp_ass_subvalue_1 = par_f;
        CHECK_OBJECT(par_self);
        tmp_expression_name_1 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, const_str_plain__patched_functions);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_avm_class);
        tmp_tuple_element_1 = par_avm_class;
        tmp_ass_subscript_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_ass_subscript_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_func_name);
        tmp_tuple_element_1 = par_func_name;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_ass_subscript_1, 1, tmp_tuple_element_1);
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        Py_DECREF(tmp_ass_subscript_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d2364f45a352fed77b77f90ee833242e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d2364f45a352fed77b77f90ee833242e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d2364f45a352fed77b77f90ee833242e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d2364f45a352fed77b77f90ee833242e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d2364f45a352fed77b77f90ee833242e, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d2364f45a352fed77b77f90ee833242e,
        type_description_1,
        par_self,
        par_avm_class,
        par_func_name,
        par_f
    );


    // Release cached frame.
    if (frame_d2364f45a352fed77b77f90ee833242e == cache_frame_d2364f45a352fed77b77f90ee833242e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_d2364f45a352fed77b77f90ee833242e);
    }
    cache_frame_d2364f45a352fed77b77f90ee833242e = NULL;

    assertFrameObject(frame_d2364f45a352fed77b77f90ee833242e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_avm_class);
    Py_DECREF(par_avm_class);
    CHECK_OBJECT(par_func_name);
    Py_DECREF(par_func_name);
    CHECK_OBJECT(par_f);
    Py_DECREF(par_f);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_avm_class);
    Py_DECREF(par_avm_class);
    CHECK_OBJECT(par_func_name);
    Py_DECREF(par_func_name);
    CHECK_OBJECT(par_f);
    Py_DECREF(par_f);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_24_extract_class(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_class_name = python_pars[1];
    PyObject *par_call_cinit = python_pars[2];
    PyObject *var_res = NULL;
    PyObject *var_cinit = NULL;
    struct Nuitka_FrameObject *frame_b18b668a85d56a6d033f7548ea794744;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_b18b668a85d56a6d033f7548ea794744 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_b18b668a85d56a6d033f7548ea794744)) {
        Py_XDECREF(cache_frame_b18b668a85d56a6d033f7548ea794744);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b18b668a85d56a6d033f7548ea794744 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b18b668a85d56a6d033f7548ea794744 = MAKE_FUNCTION_FRAME(codeobj_b18b668a85d56a6d033f7548ea794744, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b18b668a85d56a6d033f7548ea794744->m_type_description == NULL);
    frame_b18b668a85d56a6d033f7548ea794744 = cache_frame_b18b668a85d56a6d033f7548ea794744;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b18b668a85d56a6d033f7548ea794744);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b18b668a85d56a6d033f7548ea794744) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_expression_name_2;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_2 = par_self;
        tmp_expression_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, const_str_plain__classes_by_name);
        if (tmp_expression_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 426;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_class_name);
        tmp_subscript_name_1 = par_class_name;
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_expression_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 426;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        assert(var_res == NULL);
        var_res = tmp_assign_source_1;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_type_1);
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF(exception_preserved_value_1);
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF(exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_b18b668a85d56a6d033f7548ea794744, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_b18b668a85d56a6d033f7548ea794744, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    PyException_SetTraceback(exception_keeper_value_1, (PyObject *)exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 427;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_ExtractorError);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_ExtractorError);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 27135 ], 36, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 428;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_left_name_1 = const_str_digest_db842b29d0ae3c730b4cfcd063285a89;
        CHECK_OBJECT(par_class_name);
        tmp_right_name_1 = par_class_name;
        tmp_args_element_name_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_1, tmp_right_name_1);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        frame_b18b668a85d56a6d033f7548ea794744->m_frame.f_lineno = 428;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_raise_type_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        exception_type = tmp_raise_type_1;
        exception_lineno = 428;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooooo";
        goto try_except_handler_3;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 425;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_b18b668a85d56a6d033f7548ea794744->m_frame) frame_b18b668a85d56a6d033f7548ea794744->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooo";
    goto try_except_handler_3;
    branch_end_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT(par_call_cinit);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_call_cinit);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_res);
        tmp_expression_name_3 = var_res;
        tmp_attribute_name_1 = const_str_plain_cinit_idx;
        tmp_res = BUILTIN_HASATTR_BOOL(tmp_expression_name_3, tmp_attribute_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_name_5;
        CHECK_OBJECT(var_res);
        tmp_expression_name_4 = var_res;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, const_str_plain_register_methods);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 431;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_digest_41d033c8e0102b7fa4acde5361bcb9ba;
        CHECK_OBJECT(var_res);
        tmp_expression_name_5 = var_res;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, const_str_plain_cinit_idx);
        if (tmp_dict_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 431;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_name_2, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_b18b668a85d56a6d033f7548ea794744->m_frame.f_lineno = 431;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 431;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_expression_name_7;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(par_self);
        tmp_expression_name_7 = par_self;
        tmp_expression_name_6 = LOOKUP_ATTRIBUTE(tmp_expression_name_7, const_str_plain__all_methods);
        if (tmp_expression_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_res);
        tmp_expression_name_8 = var_res;
        tmp_subscript_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, const_str_plain_cinit_idx);
        if (tmp_subscript_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_expression_name_6);

            exception_lineno = 432;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subvalue_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_6, tmp_subscript_name_2);
        Py_DECREF(tmp_expression_name_6);
        Py_DECREF(tmp_subscript_name_2);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_res);
        tmp_expression_name_9 = var_res;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, const_str_plain_methods);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_1);

            exception_lineno = 432;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = const_str_digest_41d033c8e0102b7fa4acde5361bcb9ba;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_3 = var_res;
        tmp_args_element_name_4 = const_str_digest_41d033c8e0102b7fa4acde5361bcb9ba;
        frame_b18b668a85d56a6d033f7548ea794744->m_frame.f_lineno = 433;
        {
            PyObject *call_args[] = {tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_1, const_str_plain_extract_function, call_args);
        }

        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 433;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_cinit == NULL);
        var_cinit = tmp_assign_source_2;
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_call_arg_element_1;
        CHECK_OBJECT(var_cinit);
        tmp_called_name_3 = var_cinit;
        tmp_call_arg_element_1 = PyList_New(0);
        frame_b18b668a85d56a6d033f7548ea794744->m_frame.f_lineno = 434;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_call_arg_element_1);
        Py_DECREF(tmp_call_arg_element_1);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 434;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b18b668a85d56a6d033f7548ea794744);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b18b668a85d56a6d033f7548ea794744);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b18b668a85d56a6d033f7548ea794744, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b18b668a85d56a6d033f7548ea794744->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b18b668a85d56a6d033f7548ea794744, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b18b668a85d56a6d033f7548ea794744,
        type_description_1,
        par_self,
        par_class_name,
        par_call_cinit,
        var_res,
        var_cinit
    );


    // Release cached frame.
    if (frame_b18b668a85d56a6d033f7548ea794744 == cache_frame_b18b668a85d56a6d033f7548ea794744) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_b18b668a85d56a6d033f7548ea794744);
    }
    cache_frame_b18b668a85d56a6d033f7548ea794744 = NULL;

    assertFrameObject(frame_b18b668a85d56a6d033f7548ea794744);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_res);
    tmp_return_value = var_res;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_res);
    Py_DECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_cinit);
    var_cinit = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_cinit);
    var_cinit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_class_name);
    Py_DECREF(par_class_name);
    CHECK_OBJECT(par_call_cinit);
    Py_DECREF(par_call_cinit);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_class_name);
    Py_DECREF(par_class_name);
    CHECK_OBJECT(par_call_cinit);
    Py_DECREF(par_call_cinit);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_25_extract_function(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1(python_pars[0]);
    struct Nuitka_CellObject *par_avm_class = PyCell_NEW1(python_pars[1]);
    PyObject *par_func_name = python_pars[2];
    PyObject *var_p = NULL;
    struct Nuitka_CellObject *var_m = PyCell_EMPTY();
    PyObject *var_resfunc = NULL;
    struct Nuitka_FrameObject *frame_7737ff162a8fc8e608c9e8f0a1485cf4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_7737ff162a8fc8e608c9e8f0a1485cf4 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_7737ff162a8fc8e608c9e8f0a1485cf4)) {
        Py_XDECREF(cache_frame_7737ff162a8fc8e608c9e8f0a1485cf4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7737ff162a8fc8e608c9e8f0a1485cf4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7737ff162a8fc8e608c9e8f0a1485cf4 = MAKE_FUNCTION_FRAME(codeobj_7737ff162a8fc8e608c9e8f0a1485cf4, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7737ff162a8fc8e608c9e8f0a1485cf4->m_type_description == NULL);
    frame_7737ff162a8fc8e608c9e8f0a1485cf4 = cache_frame_7737ff162a8fc8e608c9e8f0a1485cf4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7737ff162a8fc8e608c9e8f0a1485cf4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7737ff162a8fc8e608c9e8f0a1485cf4) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_1 = PyCell_GET(par_self);
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, const_str_plain__patched_functions);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_avm_class));
        tmp_tuple_element_1 = PyCell_GET(par_avm_class);
        tmp_args_element_name_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_args_element_name_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_func_name);
        tmp_tuple_element_1 = par_func_name;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_args_element_name_1, 1, tmp_tuple_element_1);
        frame_7737ff162a8fc8e608c9e8f0a1485cf4->m_frame.f_lineno = 439;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_get, call_args);
        }

        Py_DECREF(tmp_called_instance_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        assert(var_p == NULL);
        var_p = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_p);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_p);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(var_p);
    tmp_return_value = var_p;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_expression_name_2;
        CHECK_OBJECT(par_func_name);
        tmp_compexpr_left_1 = par_func_name;
        CHECK_OBJECT(PyCell_GET(par_avm_class));
        tmp_expression_name_2 = PyCell_GET(par_avm_class);
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, const_str_plain_method_pyfunctions);
        if (tmp_compexpr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 442;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_1, tmp_compexpr_left_1);
        Py_DECREF(tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 442;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_expression_name_3;
        PyObject *tmp_expression_name_4;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(PyCell_GET(par_avm_class));
        tmp_expression_name_4 = PyCell_GET(par_avm_class);
        tmp_expression_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, const_str_plain_method_pyfunctions);
        if (tmp_expression_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_func_name);
        tmp_subscript_name_1 = par_func_name;
        tmp_return_value = LOOKUP_SUBSCRIPT(tmp_expression_name_3, tmp_subscript_name_1);
        Py_DECREF(tmp_expression_name_3);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_2:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_expression_name_5;
        CHECK_OBJECT(par_func_name);
        tmp_compexpr_left_2 = par_func_name;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_5 = PyCell_GET(par_self);
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, const_str_plain__classes_by_name);
        if (tmp_compexpr_right_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 444;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_2, tmp_compexpr_left_2);
        Py_DECREF(tmp_compexpr_right_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 444;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_expression_name_7;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_expression_name_7 = PyCell_GET(par_self);
        tmp_expression_name_6 = LOOKUP_ATTRIBUTE(tmp_expression_name_7, const_str_plain__classes_by_name);
        if (tmp_expression_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 445;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_func_name);
        tmp_subscript_name_2 = par_func_name;
        tmp_called_instance_2 = LOOKUP_SUBSCRIPT(tmp_expression_name_6, tmp_subscript_name_2);
        Py_DECREF(tmp_expression_name_6);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 445;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        frame_7737ff162a8fc8e608c9e8f0a1485cf4->m_frame.f_lineno = 445;
        tmp_return_value = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_make_object);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 445;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_3:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_expression_name_8;
        CHECK_OBJECT(par_func_name);
        tmp_compexpr_left_3 = par_func_name;
        CHECK_OBJECT(PyCell_GET(par_avm_class));
        tmp_expression_name_8 = PyCell_GET(par_avm_class);
        tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, const_str_plain_methods);
        if (tmp_compexpr_right_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 446;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_3, tmp_compexpr_left_3);
        Py_DECREF(tmp_compexpr_right_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 446;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_expression_name_9;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_ExtractorError);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_ExtractorError);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 27135 ], 36, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 447;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_left_name_1 = const_str_digest_ecc6053c70cf260634e6b29be28d3e9b;
        CHECK_OBJECT(PyCell_GET(par_avm_class));
        tmp_expression_name_9 = PyCell_GET(par_avm_class);
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, const_str_plain_name);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(par_func_name);
        tmp_tuple_element_2 = par_func_name;
        Py_INCREF(tmp_tuple_element_2);
        PyTuple_SET_ITEM(tmp_right_name_1, 1, tmp_tuple_element_2);
        tmp_args_element_name_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 447;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        frame_7737ff162a8fc8e608c9e8f0a1485cf4->m_frame.f_lineno = 447;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_raise_type_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 447;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        exception_type = tmp_raise_type_1;
        exception_lineno = 447;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ccooco";
        goto frame_exception_exit_1;
    }
    branch_no_4:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_expression_name_11;
        PyObject *tmp_subscript_name_3;
        CHECK_OBJECT(PyCell_GET(par_avm_class));
        tmp_expression_name_11 = PyCell_GET(par_avm_class);
        tmp_expression_name_10 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, const_str_plain_methods);
        if (tmp_expression_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 449;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_func_name);
        tmp_subscript_name_3 = par_func_name;
        tmp_assign_source_2 = LOOKUP_SUBSCRIPT(tmp_expression_name_10, tmp_subscript_name_3);
        Py_DECREF(tmp_expression_name_10);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 449;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        assert(PyCell_GET(var_m) == NULL);
        PyCell_SET(var_m, tmp_assign_source_2);

    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_3)->m_closure[0] = par_avm_class;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_3)->m_closure[0]);
        ((struct Nuitka_FunctionObject *)tmp_assign_source_3)->m_closure[1] = var_m;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_3)->m_closure[1]);
        ((struct Nuitka_FunctionObject *)tmp_assign_source_3)->m_closure[2] = par_self;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_3)->m_closure[2]);


        assert(var_resfunc == NULL);
        var_resfunc = tmp_assign_source_3;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_name_12;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(var_resfunc);
        tmp_ass_subvalue_1 = var_resfunc;
        CHECK_OBJECT(PyCell_GET(par_avm_class));
        tmp_expression_name_12 = PyCell_GET(par_avm_class);
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, const_str_plain_method_pyfunctions);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 833;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_func_name);
        tmp_ass_subscript_1 = par_func_name;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 833;
            type_description_1 = "ccooco";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7737ff162a8fc8e608c9e8f0a1485cf4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_7737ff162a8fc8e608c9e8f0a1485cf4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7737ff162a8fc8e608c9e8f0a1485cf4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7737ff162a8fc8e608c9e8f0a1485cf4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7737ff162a8fc8e608c9e8f0a1485cf4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7737ff162a8fc8e608c9e8f0a1485cf4, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7737ff162a8fc8e608c9e8f0a1485cf4,
        type_description_1,
        par_self,
        par_avm_class,
        par_func_name,
        var_p,
        var_m,
        var_resfunc
    );


    // Release cached frame.
    if (frame_7737ff162a8fc8e608c9e8f0a1485cf4 == cache_frame_7737ff162a8fc8e608c9e8f0a1485cf4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_7737ff162a8fc8e608c9e8f0a1485cf4);
    }
    cache_frame_7737ff162a8fc8e608c9e8f0a1485cf4 = NULL;

    assertFrameObject(frame_7737ff162a8fc8e608c9e8f0a1485cf4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_resfunc);
    tmp_return_value = var_resfunc;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_p);
    Py_DECREF(var_p);
    var_p = NULL;

    CHECK_OBJECT(var_m);
    Py_DECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_resfunc);
    var_resfunc = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_p);
    var_p = NULL;

    CHECK_OBJECT(var_m);
    Py_DECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_resfunc);
    var_resfunc = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_avm_class);
    Py_DECREF(par_avm_class);
    CHECK_OBJECT(par_func_name);
    Py_DECREF(par_func_name);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_avm_class);
    Py_DECREF(par_avm_class);
    CHECK_OBJECT(par_func_name);
    Py_DECREF(par_func_name);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    struct Nuitka_CellObject *var_coder = PyCell_EMPTY();
    PyObject *var_s24 = NULL;
    PyObject *var_u30 = NULL;
    PyObject *var_registers = NULL;
    PyObject *var_stack = NULL;
    PyObject *var_scopes = NULL;
    PyObject *var_opcode = NULL;
    PyObject *var_offset = NULL;
    PyObject *var_value = NULL;
    PyObject *var_value2 = NULL;
    PyObject *var_value1 = NULL;
    PyObject *var_v = NULL;
    PyObject *var_idx = NULL;
    PyObject *var_new_scope = NULL;
    PyObject *var_arg_count = NULL;
    PyObject *var_obj = NULL;
    PyObject *var_res = NULL;
    PyObject *var_index = NULL;
    PyObject *var_mname = NULL;
    PyObject *var_func = NULL;
    PyObject *var_arr = NULL;
    PyObject *var_i = NULL;
    PyObject *var_s = NULL;
    PyObject *var_scope = NULL;
    PyObject *var_pname = NULL;
    PyObject *var_intvalue = NULL;
    PyObject *var_result = NULL;
    PyObject *outline_0_var__ = NULL;
    PyObject *outline_1_var__ = NULL;
    PyObject *outline_2_var__ = NULL;
    PyObject *outline_3_var__ = NULL;
    PyObject *outline_4_var__ = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    nuitka_bool tmp_for_loop_2__break_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    nuitka_bool tmp_for_loop_3__break_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    nuitka_bool tmp_for_loop_4__break_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp_2__$0 = NULL;
    PyObject *tmp_listcomp_2__contraction = NULL;
    PyObject *tmp_listcomp_2__iter_value_0 = NULL;
    PyObject *tmp_listcomp_3__$0 = NULL;
    PyObject *tmp_listcomp_3__contraction = NULL;
    PyObject *tmp_listcomp_3__iter_value_0 = NULL;
    PyObject *tmp_listcomp_4__$0 = NULL;
    PyObject *tmp_listcomp_4__contraction = NULL;
    PyObject *tmp_listcomp_4__iter_value_0 = NULL;
    PyObject *tmp_listcomp_5__$0 = NULL;
    PyObject *tmp_listcomp_5__contraction = NULL;
    PyObject *tmp_listcomp_5__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_2bea7bcff96360bb620189591cb6fbbc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    struct Nuitka_FrameObject *frame_1701a9b8a630eb79a249432dfe8bcecc_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_1701a9b8a630eb79a249432dfe8bcecc_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    struct Nuitka_FrameObject *frame_323d515b83a7c693618e6a85ceb51b0d_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_323d515b83a7c693618e6a85ceb51b0d_3 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_return_value = NULL;
    struct Nuitka_FrameObject *frame_97012d2548b39c788b5d47e2b83539e8_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_97012d2548b39c788b5d47e2b83539e8_4 = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    struct Nuitka_FrameObject *frame_bbb0887acc5c1e2b70b29edf31263a1f_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    static struct Nuitka_FrameObject *cache_frame_bbb0887acc5c1e2b70b29edf31263a1f_5 = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    struct Nuitka_FrameObject *frame_3b85a0a43062564d9409c85d24a80370_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    static struct Nuitka_FrameObject *cache_frame_3b85a0a43062564d9409c85d24a80370_6 = NULL;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_2bea7bcff96360bb620189591cb6fbbc = NULL;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_2bea7bcff96360bb620189591cb6fbbc)) {
        Py_XDECREF(cache_frame_2bea7bcff96360bb620189591cb6fbbc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2bea7bcff96360bb620189591cb6fbbc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2bea7bcff96360bb620189591cb6fbbc = MAKE_FUNCTION_FRAME(codeobj_2bea7bcff96360bb620189591cb6fbbc, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2bea7bcff96360bb620189591cb6fbbc->m_type_description == NULL);
    frame_2bea7bcff96360bb620189591cb6fbbc = cache_frame_2bea7bcff96360bb620189591cb6fbbc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2bea7bcff96360bb620189591cb6fbbc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2bea7bcff96360bb620189591cb6fbbc) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_expression_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_io);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_io);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 13577 ], 24, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 453;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_1, const_str_plain_BytesIO);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 453;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (PyCell_GET(self->m_closure[1]) == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "m");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 453;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_2 = PyCell_GET(self->m_closure[1]);
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_2, const_str_plain_code);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 453;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 453;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 453;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(PyCell_GET(var_coder) == NULL);
        PyCell_SET(var_coder, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_1_lambda();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_2)->m_closure[0] = var_coder;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_2)->m_closure[0]);


        assert(var_s24 == NULL);
        var_s24 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_2_lambda();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_3)->m_closure[0] = var_coder;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_3)->m_closure[0]);


        assert(var_u30 == NULL);
        var_u30 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_list_element_1;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_right_name_1;
        PyObject *tmp_list_arg_1;
        PyObject *tmp_right_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_expression_name_4;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "avm_class");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 457;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_3 = PyCell_GET(self->m_closure[0]);
        tmp_list_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, const_str_plain_variables);
        if (tmp_list_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 457;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_left_name_2 = PyList_New(1);
        PyList_SET_ITEM(tmp_left_name_2, 0, tmp_list_element_1);
        CHECK_OBJECT(par_args);
        tmp_list_arg_1 = par_args;
        tmp_right_name_1 = PySequence_List(tmp_list_arg_1);
        if (tmp_right_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_name_2);

            exception_lineno = 457;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = BINARY_OPERATION_ADD_OBJECT_LIST_LIST(tmp_left_name_2, tmp_right_name_1);
        Py_DECREF(tmp_left_name_2);
        Py_DECREF(tmp_right_name_1);
        assert(!(tmp_left_name_1 == NULL));
        tmp_left_name_3 = LIST_COPY(const_list_none_list);
        if (PyCell_GET(self->m_closure[1]) == NULL) {
            Py_DECREF(tmp_left_name_1);
            Py_DECREF(tmp_left_name_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "m");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 457;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_4 = PyCell_GET(self->m_closure[1]);
        tmp_right_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_4, const_str_plain_local_count);
        if (tmp_right_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_name_1);
            Py_DECREF(tmp_left_name_3);

            exception_lineno = 457;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = BINARY_OPERATION_MULT_OBJECT_LIST_OBJECT(tmp_left_name_3, tmp_right_name_3);
        Py_DECREF(tmp_left_name_3);
        Py_DECREF(tmp_right_name_3);
        if (tmp_right_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_name_1);

            exception_lineno = 457;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = BINARY_OPERATION_ADD_OBJECT_LIST_OBJECT(tmp_left_name_1, tmp_right_name_2);
        Py_DECREF(tmp_left_name_1);
        Py_DECREF(tmp_right_name_2);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 457;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_registers == NULL);
        var_registers = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        tmp_assign_source_5 = PyList_New(0);
        assert(var_stack == NULL);
        var_stack = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_name_2;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_list_element_2;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_expression_name_7;
        PyObject *tmp_expression_name_8;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_collections);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_collections);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 22077 ], 33, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 459;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_5 = tmp_mvar_value_2;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, const_str_plain_deque);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (PyCell_GET(self->m_closure[2]) == NULL) {
            Py_DECREF(tmp_called_name_2);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 460;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_6 = PyCell_GET(self->m_closure[2]);
        tmp_list_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_6, const_str_plain__classes_by_name);
        if (tmp_list_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 460;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = PyList_New(3);
        PyList_SET_ITEM(tmp_args_element_name_2, 0, tmp_list_element_2);
        if (PyCell_GET(self->m_closure[0]) == NULL) {
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_2);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "avm_class");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 460;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_7 = PyCell_GET(self->m_closure[0]);
        tmp_list_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_7, const_str_plain_constants);
        if (tmp_list_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_2);

            exception_lineno = 460;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        PyList_SET_ITEM(tmp_args_element_name_2, 1, tmp_list_element_2);
        if (PyCell_GET(self->m_closure[0]) == NULL) {
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_2);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "avm_class");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 460;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_8 = PyCell_GET(self->m_closure[0]);
        tmp_list_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, const_str_plain_variables);
        if (tmp_list_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_2);

            exception_lineno = 460;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        PyList_SET_ITEM(tmp_args_element_name_2, 2, tmp_list_element_2);
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 459;
        tmp_assign_source_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        assert(var_scopes == NULL);
        var_scopes = tmp_assign_source_6;
    }
    loop_start_1:;
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_byte);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__read_byte);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55762 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 462;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_3 = tmp_mvar_value_3;
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_args_element_name_3 = PyCell_GET(var_coder);
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 462;
        tmp_assign_source_7 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_3);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 462;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_opcode;
            var_opcode = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_1 = var_opcode;
        tmp_compexpr_right_1 = const_int_pos_9;
        tmp_operand_name_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_operand_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_tmp_condition_result_2_object_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_2 = var_opcode;
        tmp_compexpr_right_2 = const_int_pos_16;
        tmp_tmp_condition_result_2_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        if (tmp_tmp_condition_result_2_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 465;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_tmp_condition_result_2_object_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_2_object_1);

            exception_lineno = 465;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_2_object_1);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_name_4;
        CHECK_OBJECT(var_s24);
        tmp_called_name_4 = var_s24;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 466;
        tmp_assign_source_8 = CALL_FUNCTION_NO_ARGS(tmp_called_name_4);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 466;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_offset;
            var_offset = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_5;
        PyObject *tmp_expression_name_9;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_left_name_4;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_right_name_4;
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_expression_name_9 = PyCell_GET(var_coder);
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_9, const_str_plain_seek);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 467;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_called_instance_1 = PyCell_GET(var_coder);
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 467;
        tmp_left_name_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_tell);
        if (tmp_left_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 467;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_offset);
        tmp_right_name_4 = var_offset;
        tmp_args_element_name_4 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_4, tmp_right_name_4);
        Py_DECREF(tmp_left_name_4);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 467;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 467;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_4);
        Py_DECREF(tmp_called_name_5);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 467;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto branch_end_2;
    branch_no_2:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_tmp_condition_result_3_object_1;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_3 = var_opcode;
        tmp_compexpr_right_3 = const_int_pos_17;
        tmp_tmp_condition_result_3_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        if (tmp_tmp_condition_result_3_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 468;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_tmp_condition_result_3_object_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_3_object_1);

            exception_lineno = 468;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_3_object_1);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_name_6;
        CHECK_OBJECT(var_s24);
        tmp_called_name_6 = var_s24;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 469;
        tmp_assign_source_9 = CALL_FUNCTION_NO_ARGS(tmp_called_name_6);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 469;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_offset;
            var_offset = tmp_assign_source_9;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_2 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 470;
        tmp_assign_source_10 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_pop);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 470;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_truth_name_3;
        CHECK_OBJECT(var_value);
        tmp_truth_name_3 = CHECK_IF_TRUE(var_value);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_called_name_7;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_left_name_5;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_right_name_5;
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_expression_name_10 = PyCell_GET(var_coder);
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_expression_name_10, const_str_plain_seek);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 472;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_called_instance_3 = PyCell_GET(var_coder);
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 472;
        tmp_left_name_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_tell);
        if (tmp_left_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_7);

            exception_lineno = 472;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_offset);
        tmp_right_name_5 = var_offset;
        tmp_args_element_name_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_5, tmp_right_name_5);
        Py_DECREF(tmp_left_name_5);
        if (tmp_args_element_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_7);

            exception_lineno = 472;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 472;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_7, tmp_args_element_name_5);
        Py_DECREF(tmp_called_name_7);
        Py_DECREF(tmp_args_element_name_5);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 472;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_no_4:;
    goto branch_end_3;
    branch_no_3:;
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_tmp_condition_result_5_object_1;
        int tmp_truth_name_4;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_4 = var_opcode;
        tmp_compexpr_right_4 = const_int_pos_18;
        tmp_tmp_condition_result_5_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
        if (tmp_tmp_condition_result_5_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 473;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_tmp_condition_result_5_object_1);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_5_object_1);

            exception_lineno = 473;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_5_object_1);
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_name_8;
        CHECK_OBJECT(var_s24);
        tmp_called_name_8 = var_s24;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 474;
        tmp_assign_source_11 = CALL_FUNCTION_NO_ARGS(tmp_called_name_8);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 474;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_offset;
            var_offset = tmp_assign_source_11;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_instance_4;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_4 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 475;
        tmp_assign_source_12 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, const_str_plain_pop);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 475;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_12;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_operand_name_2;
        CHECK_OBJECT(var_value);
        tmp_operand_name_2 = var_value;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 476;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_called_name_9;
        PyObject *tmp_expression_name_11;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_left_name_6;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_right_name_6;
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_expression_name_11 = PyCell_GET(var_coder);
        tmp_called_name_9 = LOOKUP_ATTRIBUTE(tmp_expression_name_11, const_str_plain_seek);
        if (tmp_called_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 477;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_called_instance_5 = PyCell_GET(var_coder);
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 477;
        tmp_left_name_6 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, const_str_plain_tell);
        if (tmp_left_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_9);

            exception_lineno = 477;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_offset);
        tmp_right_name_6 = var_offset;
        tmp_args_element_name_6 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_6, tmp_right_name_6);
        Py_DECREF(tmp_left_name_6);
        if (tmp_args_element_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_9);

            exception_lineno = 477;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 477;
        tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_9, tmp_args_element_name_6);
        Py_DECREF(tmp_called_name_9);
        Py_DECREF(tmp_args_element_name_6);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 477;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    branch_no_6:;
    goto branch_end_5;
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_tmp_condition_result_7_object_1;
        int tmp_truth_name_5;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_5 = var_opcode;
        tmp_compexpr_right_5 = const_int_pos_19;
        tmp_tmp_condition_result_7_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_5, tmp_compexpr_right_5);
        if (tmp_tmp_condition_result_7_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 478;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_tmp_condition_result_7_object_1);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_7_object_1);

            exception_lineno = 478;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_7_object_1);
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_called_name_10;
        CHECK_OBJECT(var_s24);
        tmp_called_name_10 = var_s24;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 479;
        tmp_assign_source_13 = CALL_FUNCTION_NO_ARGS(tmp_called_name_10);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_offset;
            var_offset = tmp_assign_source_13;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_instance_6;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_6 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 480;
        tmp_assign_source_14 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, const_str_plain_pop);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 480;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value2;
            var_value2 = tmp_assign_source_14;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_instance_7;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_7 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 481;
        tmp_assign_source_15 = CALL_METHOD_NO_ARGS(tmp_called_instance_7, const_str_plain_pop);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 481;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value1;
            var_value1 = tmp_assign_source_15;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        CHECK_OBJECT(var_value2);
        tmp_compexpr_left_6 = var_value2;
        CHECK_OBJECT(var_value1);
        tmp_compexpr_right_6 = var_value1;
        tmp_condition_result_8 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_6, tmp_compexpr_right_6);
        if (tmp_condition_result_8 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 482;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_called_name_11;
        PyObject *tmp_expression_name_12;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_left_name_7;
        PyObject *tmp_called_instance_8;
        PyObject *tmp_right_name_7;
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_expression_name_12 = PyCell_GET(var_coder);
        tmp_called_name_11 = LOOKUP_ATTRIBUTE(tmp_expression_name_12, const_str_plain_seek);
        if (tmp_called_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 483;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_called_instance_8 = PyCell_GET(var_coder);
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 483;
        tmp_left_name_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_8, const_str_plain_tell);
        if (tmp_left_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_11);

            exception_lineno = 483;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_offset);
        tmp_right_name_7 = var_offset;
        tmp_args_element_name_7 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_7, tmp_right_name_7);
        Py_DECREF(tmp_left_name_7);
        if (tmp_args_element_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_11);

            exception_lineno = 483;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 483;
        tmp_call_result_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_11, tmp_args_element_name_7);
        Py_DECREF(tmp_called_name_11);
        Py_DECREF(tmp_args_element_name_7);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 483;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    branch_no_8:;
    goto branch_end_7;
    branch_no_7:;
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_tmp_condition_result_9_object_1;
        int tmp_truth_name_6;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_7 = var_opcode;
        tmp_compexpr_right_7 = const_int_pos_20;
        tmp_tmp_condition_result_9_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_7, tmp_compexpr_right_7);
        if (tmp_tmp_condition_result_9_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 484;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_tmp_condition_result_9_object_1);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_9_object_1);

            exception_lineno = 484;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_9_object_1);
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_called_name_12;
        CHECK_OBJECT(var_s24);
        tmp_called_name_12 = var_s24;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 485;
        tmp_assign_source_16 = CALL_FUNCTION_NO_ARGS(tmp_called_name_12);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 485;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_offset;
            var_offset = tmp_assign_source_16;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_called_instance_9;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_9 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 486;
        tmp_assign_source_17 = CALL_METHOD_NO_ARGS(tmp_called_instance_9, const_str_plain_pop);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value2;
            var_value2 = tmp_assign_source_17;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_called_instance_10;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_10 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 487;
        tmp_assign_source_18 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, const_str_plain_pop);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value1;
            var_value1 = tmp_assign_source_18;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        CHECK_OBJECT(var_value2);
        tmp_compexpr_left_8 = var_value2;
        CHECK_OBJECT(var_value1);
        tmp_compexpr_right_8 = var_value1;
        tmp_condition_result_10 = RICH_COMPARE_NE_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_8, tmp_compexpr_right_8);
        if (tmp_condition_result_10 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 488;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_called_name_13;
        PyObject *tmp_expression_name_13;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_left_name_8;
        PyObject *tmp_called_instance_11;
        PyObject *tmp_right_name_8;
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_expression_name_13 = PyCell_GET(var_coder);
        tmp_called_name_13 = LOOKUP_ATTRIBUTE(tmp_expression_name_13, const_str_plain_seek);
        if (tmp_called_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 489;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_called_instance_11 = PyCell_GET(var_coder);
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 489;
        tmp_left_name_8 = CALL_METHOD_NO_ARGS(tmp_called_instance_11, const_str_plain_tell);
        if (tmp_left_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_13);

            exception_lineno = 489;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_offset);
        tmp_right_name_8 = var_offset;
        tmp_args_element_name_8 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_8, tmp_right_name_8);
        Py_DECREF(tmp_left_name_8);
        if (tmp_args_element_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_13);

            exception_lineno = 489;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 489;
        tmp_call_result_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_13, tmp_args_element_name_8);
        Py_DECREF(tmp_called_name_13);
        Py_DECREF(tmp_args_element_name_8);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 489;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    branch_no_10:;
    goto branch_end_9;
    branch_no_9:;
    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        PyObject *tmp_tmp_condition_result_11_object_1;
        int tmp_truth_name_7;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_9 = var_opcode;
        tmp_compexpr_right_9 = const_int_pos_21;
        tmp_tmp_condition_result_11_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_9, tmp_compexpr_right_9);
        if (tmp_tmp_condition_result_11_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 490;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_7 = CHECK_IF_TRUE(tmp_tmp_condition_result_11_object_1);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_11_object_1);

            exception_lineno = 490;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_11 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_11_object_1);
        if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_name_14;
        CHECK_OBJECT(var_s24);
        tmp_called_name_14 = var_s24;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 491;
        tmp_assign_source_19 = CALL_FUNCTION_NO_ARGS(tmp_called_name_14);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 491;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_offset;
            var_offset = tmp_assign_source_19;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_called_instance_12;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_12 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 492;
        tmp_assign_source_20 = CALL_METHOD_NO_ARGS(tmp_called_instance_12, const_str_plain_pop);
        if (tmp_assign_source_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 492;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value2;
            var_value2 = tmp_assign_source_20;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_called_instance_13;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_13 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 493;
        tmp_assign_source_21 = CALL_METHOD_NO_ARGS(tmp_called_instance_13, const_str_plain_pop);
        if (tmp_assign_source_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 493;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value1;
            var_value1 = tmp_assign_source_21;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        CHECK_OBJECT(var_value1);
        tmp_compexpr_left_10 = var_value1;
        CHECK_OBJECT(var_value2);
        tmp_compexpr_right_10 = var_value2;
        tmp_condition_result_12 = RICH_COMPARE_LT_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_10, tmp_compexpr_right_10);
        if (tmp_condition_result_12 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
            goto branch_yes_12;
        } else {
            goto branch_no_12;
        }
    }
    branch_yes_12:;
    {
        PyObject *tmp_called_name_15;
        PyObject *tmp_expression_name_14;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_left_name_9;
        PyObject *tmp_called_instance_14;
        PyObject *tmp_right_name_9;
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_expression_name_14 = PyCell_GET(var_coder);
        tmp_called_name_15 = LOOKUP_ATTRIBUTE(tmp_expression_name_14, const_str_plain_seek);
        if (tmp_called_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 495;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_called_instance_14 = PyCell_GET(var_coder);
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 495;
        tmp_left_name_9 = CALL_METHOD_NO_ARGS(tmp_called_instance_14, const_str_plain_tell);
        if (tmp_left_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_15);

            exception_lineno = 495;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_offset);
        tmp_right_name_9 = var_offset;
        tmp_args_element_name_9 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_9, tmp_right_name_9);
        Py_DECREF(tmp_left_name_9);
        if (tmp_args_element_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_15);

            exception_lineno = 495;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 495;
        tmp_call_result_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_15, tmp_args_element_name_9);
        Py_DECREF(tmp_called_name_15);
        Py_DECREF(tmp_args_element_name_9);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 495;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    branch_no_12:;
    goto branch_end_11;
    branch_no_11:;
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        PyObject *tmp_tmp_condition_result_13_object_1;
        int tmp_truth_name_8;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_11 = var_opcode;
        tmp_compexpr_right_11 = const_int_pos_32;
        tmp_tmp_condition_result_13_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_11, tmp_compexpr_right_11);
        if (tmp_tmp_condition_result_13_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 496;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_tmp_condition_result_13_object_1);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_13_object_1);

            exception_lineno = 496;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_13 = tmp_truth_name_8 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_13_object_1);
        if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    {
        PyObject *tmp_called_instance_15;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_15 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 497;
        tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_15, const_str_plain_append, &PyTuple_GET_ITEM(const_tuple_none_tuple, 0));

        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 497;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    goto branch_end_13;
    branch_no_13:;
    {
        nuitka_bool tmp_condition_result_14;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        PyObject *tmp_tmp_condition_result_14_object_1;
        int tmp_truth_name_9;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_12 = var_opcode;
        tmp_compexpr_right_12 = const_int_pos_33;
        tmp_tmp_condition_result_14_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_12, tmp_compexpr_right_12);
        if (tmp_tmp_condition_result_14_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 498;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_tmp_condition_result_14_object_1);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_14_object_1);

            exception_lineno = 498;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_14 = tmp_truth_name_9 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_14_object_1);
        if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        PyObject *tmp_called_name_16;
        PyObject *tmp_expression_name_15;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_mvar_value_4;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_15 = var_stack;
        tmp_called_name_16 = LOOKUP_ATTRIBUTE(tmp_expression_name_15, const_str_plain_append);
        if (tmp_called_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 499;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_undefined);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_undefined);
        }

        if (tmp_mvar_value_4 == NULL) {
            Py_DECREF(tmp_called_name_16);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55679 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 499;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_10 = tmp_mvar_value_4;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 499;
        tmp_call_result_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_16, tmp_args_element_name_10);
        Py_DECREF(tmp_called_name_16);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 499;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    goto branch_end_14;
    branch_no_14:;
    {
        nuitka_bool tmp_condition_result_15;
        PyObject *tmp_compexpr_left_13;
        PyObject *tmp_compexpr_right_13;
        PyObject *tmp_tmp_condition_result_15_object_1;
        int tmp_truth_name_10;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_13 = var_opcode;
        tmp_compexpr_right_13 = const_int_pos_36;
        tmp_tmp_condition_result_15_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_13, tmp_compexpr_right_13);
        if (tmp_tmp_condition_result_15_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_10 = CHECK_IF_TRUE(tmp_tmp_condition_result_15_object_1);
        if (tmp_truth_name_10 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_15_object_1);

            exception_lineno = 500;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_15 = tmp_truth_name_10 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_15_object_1);
        if (tmp_condition_result_15 == NUITKA_BOOL_TRUE) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_called_name_17;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_args_element_name_11;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_byte);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__read_byte);
        }

        if (tmp_mvar_value_5 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55762 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 501;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_17 = tmp_mvar_value_5;
        CHECK_OBJECT(PyCell_GET(var_coder));
        tmp_args_element_name_11 = PyCell_GET(var_coder);
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 501;
        tmp_assign_source_22 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_17, tmp_args_element_name_11);
        if (tmp_assign_source_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 501;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_v;
            var_v = tmp_assign_source_22;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_16;
        PyObject *tmp_call_result_9;
        PyObject *tmp_args_element_name_12;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_16 = var_stack;
        CHECK_OBJECT(var_v);
        tmp_args_element_name_12 = var_v;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 502;
        {
            PyObject *call_args[] = {tmp_args_element_name_12};
            tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_16, const_str_plain_append, call_args);
        }

        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 502;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }
    goto branch_end_15;
    branch_no_15:;
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_compexpr_left_14;
        PyObject *tmp_compexpr_right_14;
        PyObject *tmp_tmp_condition_result_16_object_1;
        int tmp_truth_name_11;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_14 = var_opcode;
        tmp_compexpr_right_14 = const_int_pos_37;
        tmp_tmp_condition_result_16_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_14, tmp_compexpr_right_14);
        if (tmp_tmp_condition_result_16_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_11 = CHECK_IF_TRUE(tmp_tmp_condition_result_16_object_1);
        if (tmp_truth_name_11 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_16_object_1);

            exception_lineno = 503;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_16 = tmp_truth_name_11 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_16_object_1);
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto branch_yes_16;
        } else {
            goto branch_no_16;
        }
    }
    branch_yes_16:;
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_called_name_18;
        CHECK_OBJECT(var_u30);
        tmp_called_name_18 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 504;
        tmp_assign_source_23 = CALL_FUNCTION_NO_ARGS(tmp_called_name_18);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 504;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_v;
            var_v = tmp_assign_source_23;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_17;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_name_13;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_17 = var_stack;
        CHECK_OBJECT(var_v);
        tmp_args_element_name_13 = var_v;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 505;
        {
            PyObject *call_args[] = {tmp_args_element_name_13};
            tmp_call_result_10 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_17, const_str_plain_append, call_args);
        }

        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 505;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_10);
    }
    goto branch_end_16;
    branch_no_16:;
    {
        nuitka_bool tmp_condition_result_17;
        PyObject *tmp_compexpr_left_15;
        PyObject *tmp_compexpr_right_15;
        PyObject *tmp_tmp_condition_result_17_object_1;
        int tmp_truth_name_12;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_15 = var_opcode;
        tmp_compexpr_right_15 = const_int_pos_38;
        tmp_tmp_condition_result_17_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_15, tmp_compexpr_right_15);
        if (tmp_tmp_condition_result_17_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 506;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_12 = CHECK_IF_TRUE(tmp_tmp_condition_result_17_object_1);
        if (tmp_truth_name_12 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_17_object_1);

            exception_lineno = 506;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_17 = tmp_truth_name_12 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_17_object_1);
        if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
            goto branch_yes_17;
        } else {
            goto branch_no_17;
        }
    }
    branch_yes_17:;
    {
        PyObject *tmp_called_instance_18;
        PyObject *tmp_call_result_11;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_18 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 507;
        tmp_call_result_11 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_18, const_str_plain_append, &PyTuple_GET_ITEM(const_tuple_true_tuple, 0));

        if (tmp_call_result_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_11);
    }
    goto branch_end_17;
    branch_no_17:;
    {
        nuitka_bool tmp_condition_result_18;
        PyObject *tmp_compexpr_left_16;
        PyObject *tmp_compexpr_right_16;
        PyObject *tmp_tmp_condition_result_18_object_1;
        int tmp_truth_name_13;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_16 = var_opcode;
        tmp_compexpr_right_16 = const_int_pos_39;
        tmp_tmp_condition_result_18_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_16, tmp_compexpr_right_16);
        if (tmp_tmp_condition_result_18_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 508;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_13 = CHECK_IF_TRUE(tmp_tmp_condition_result_18_object_1);
        if (tmp_truth_name_13 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_18_object_1);

            exception_lineno = 508;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_18 = tmp_truth_name_13 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_18_object_1);
        if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    {
        PyObject *tmp_called_instance_19;
        PyObject *tmp_call_result_12;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_19 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 509;
        tmp_call_result_12 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_19, const_str_plain_append, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        if (tmp_call_result_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 509;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_12);
    }
    goto branch_end_18;
    branch_no_18:;
    {
        nuitka_bool tmp_condition_result_19;
        PyObject *tmp_compexpr_left_17;
        PyObject *tmp_compexpr_right_17;
        PyObject *tmp_tmp_condition_result_19_object_1;
        int tmp_truth_name_14;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_17 = var_opcode;
        tmp_compexpr_right_17 = const_int_pos_40;
        tmp_tmp_condition_result_19_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_17, tmp_compexpr_right_17);
        if (tmp_tmp_condition_result_19_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_14 = CHECK_IF_TRUE(tmp_tmp_condition_result_19_object_1);
        if (tmp_truth_name_14 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_19_object_1);

            exception_lineno = 510;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_19 = tmp_truth_name_14 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_19_object_1);
        if (tmp_condition_result_19 == NUITKA_BOOL_TRUE) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_called_instance_20;
        PyObject *tmp_call_result_13;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_20 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 511;
        tmp_call_result_13 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_20, const_str_plain_append, &PyTuple_GET_ITEM(const_tuple_float_plus_nan_tuple, 0));

        if (tmp_call_result_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 511;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_13);
    }
    goto branch_end_19;
    branch_no_19:;
    {
        nuitka_bool tmp_condition_result_20;
        PyObject *tmp_compexpr_left_18;
        PyObject *tmp_compexpr_right_18;
        PyObject *tmp_tmp_condition_result_20_object_1;
        int tmp_truth_name_15;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_18 = var_opcode;
        tmp_compexpr_right_18 = const_int_pos_42;
        tmp_tmp_condition_result_20_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_18, tmp_compexpr_right_18);
        if (tmp_tmp_condition_result_20_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_15 = CHECK_IF_TRUE(tmp_tmp_condition_result_20_object_1);
        if (tmp_truth_name_15 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_20_object_1);

            exception_lineno = 512;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_20 = tmp_truth_name_15 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_20_object_1);
        if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
            goto branch_yes_20;
        } else {
            goto branch_no_20;
        }
    }
    branch_yes_20:;
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_expression_name_16;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_16 = var_stack;
        tmp_subscript_name_1 = const_int_neg_1;
        tmp_assign_source_24 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_16, tmp_subscript_name_1, -1);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 513;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_24;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_21;
        PyObject *tmp_call_result_14;
        PyObject *tmp_args_element_name_14;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_21 = var_stack;
        CHECK_OBJECT(var_value);
        tmp_args_element_name_14 = var_value;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 514;
        {
            PyObject *call_args[] = {tmp_args_element_name_14};
            tmp_call_result_14 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_21, const_str_plain_append, call_args);
        }

        if (tmp_call_result_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_14);
    }
    goto branch_end_20;
    branch_no_20:;
    {
        nuitka_bool tmp_condition_result_21;
        PyObject *tmp_compexpr_left_19;
        PyObject *tmp_compexpr_right_19;
        PyObject *tmp_tmp_condition_result_21_object_1;
        int tmp_truth_name_16;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_19 = var_opcode;
        tmp_compexpr_right_19 = const_int_pos_44;
        tmp_tmp_condition_result_21_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_19, tmp_compexpr_right_19);
        if (tmp_tmp_condition_result_21_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 515;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_16 = CHECK_IF_TRUE(tmp_tmp_condition_result_21_object_1);
        if (tmp_truth_name_16 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_21_object_1);

            exception_lineno = 515;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_21 = tmp_truth_name_16 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_21_object_1);
        if (tmp_condition_result_21 == NUITKA_BOOL_TRUE) {
            goto branch_yes_21;
        } else {
            goto branch_no_21;
        }
    }
    branch_yes_21:;
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_called_name_19;
        CHECK_OBJECT(var_u30);
        tmp_called_name_19 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 516;
        tmp_assign_source_25 = CALL_FUNCTION_NO_ARGS(tmp_called_name_19);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 516;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_idx;
            var_idx = tmp_assign_source_25;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_20;
        PyObject *tmp_expression_name_17;
        PyObject *tmp_call_result_15;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_expression_name_18;
        PyObject *tmp_expression_name_19;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_17 = var_stack;
        tmp_called_name_20 = LOOKUP_ATTRIBUTE(tmp_expression_name_17, const_str_plain_append);
        if (tmp_called_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (PyCell_GET(self->m_closure[2]) == NULL) {
            Py_DECREF(tmp_called_name_20);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 517;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_19 = PyCell_GET(self->m_closure[2]);
        tmp_expression_name_18 = LOOKUP_ATTRIBUTE(tmp_expression_name_19, const_str_plain_constant_strings);
        if (tmp_expression_name_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_20);

            exception_lineno = 517;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_idx);
        tmp_subscript_name_2 = var_idx;
        tmp_args_element_name_15 = LOOKUP_SUBSCRIPT(tmp_expression_name_18, tmp_subscript_name_2);
        Py_DECREF(tmp_expression_name_18);
        if (tmp_args_element_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_20);

            exception_lineno = 517;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 517;
        tmp_call_result_15 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_20, tmp_args_element_name_15);
        Py_DECREF(tmp_called_name_20);
        Py_DECREF(tmp_args_element_name_15);
        if (tmp_call_result_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_15);
    }
    goto branch_end_21;
    branch_no_21:;
    {
        nuitka_bool tmp_condition_result_22;
        PyObject *tmp_compexpr_left_20;
        PyObject *tmp_compexpr_right_20;
        PyObject *tmp_tmp_condition_result_22_object_1;
        int tmp_truth_name_17;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_20 = var_opcode;
        tmp_compexpr_right_20 = const_int_pos_48;
        tmp_tmp_condition_result_22_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_20, tmp_compexpr_right_20);
        if (tmp_tmp_condition_result_22_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 518;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_17 = CHECK_IF_TRUE(tmp_tmp_condition_result_22_object_1);
        if (tmp_truth_name_17 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_22_object_1);

            exception_lineno = 518;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_22 = tmp_truth_name_17 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_22_object_1);
        if (tmp_condition_result_22 == NUITKA_BOOL_TRUE) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_called_instance_22;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_22 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 519;
        tmp_assign_source_26 = CALL_METHOD_NO_ARGS(tmp_called_instance_22, const_str_plain_pop);
        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 519;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_new_scope;
            var_new_scope = tmp_assign_source_26;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_23;
        PyObject *tmp_call_result_16;
        PyObject *tmp_args_element_name_16;
        CHECK_OBJECT(var_scopes);
        tmp_called_instance_23 = var_scopes;
        CHECK_OBJECT(var_new_scope);
        tmp_args_element_name_16 = var_new_scope;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 520;
        {
            PyObject *call_args[] = {tmp_args_element_name_16};
            tmp_call_result_16 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_23, const_str_plain_append, call_args);
        }

        if (tmp_call_result_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 520;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_16);
    }
    goto branch_end_22;
    branch_no_22:;
    {
        nuitka_bool tmp_condition_result_23;
        PyObject *tmp_compexpr_left_21;
        PyObject *tmp_compexpr_right_21;
        PyObject *tmp_tmp_condition_result_23_object_1;
        int tmp_truth_name_18;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_21 = var_opcode;
        tmp_compexpr_right_21 = const_int_pos_66;
        tmp_tmp_condition_result_23_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_21, tmp_compexpr_right_21);
        if (tmp_tmp_condition_result_23_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 521;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_18 = CHECK_IF_TRUE(tmp_tmp_condition_result_23_object_1);
        if (tmp_truth_name_18 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_23_object_1);

            exception_lineno = 521;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_23 = tmp_truth_name_18 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_23_object_1);
        if (tmp_condition_result_23 == NUITKA_BOOL_TRUE) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_called_name_21;
        CHECK_OBJECT(var_u30);
        tmp_called_name_21 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 522;
        tmp_assign_source_27 = CALL_FUNCTION_NO_ARGS(tmp_called_name_21);
        if (tmp_assign_source_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 522;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_arg_count;
            var_arg_count = tmp_assign_source_27;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_list_arg_2;
        PyObject *tmp_called_name_22;
        PyObject *tmp_args_element_name_17;
        tmp_called_name_22 = (PyObject *)&PyReversed_Type;
        // Tried code:
        {
            PyObject *tmp_assign_source_29;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_xrange_low_1;
            CHECK_OBJECT(var_arg_count);
            tmp_xrange_low_1 = var_arg_count;
            tmp_iter_arg_1 = BUILTIN_XRANGE1(tmp_xrange_low_1);
            if (tmp_iter_arg_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                goto try_except_handler_2;
            }
            tmp_assign_source_29 = MAKE_ITERATOR(tmp_iter_arg_1);
            Py_DECREF(tmp_iter_arg_1);
            if (tmp_assign_source_29 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                goto try_except_handler_2;
            }
            {
                PyObject *old = tmp_listcomp_1__$0;
                tmp_listcomp_1__$0 = tmp_assign_source_29;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_30;
            tmp_assign_source_30 = PyList_New(0);
            {
                PyObject *old = tmp_listcomp_1__contraction;
                tmp_listcomp_1__contraction = tmp_assign_source_30;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_1701a9b8a630eb79a249432dfe8bcecc_2)) {
            Py_XDECREF(cache_frame_1701a9b8a630eb79a249432dfe8bcecc_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_1701a9b8a630eb79a249432dfe8bcecc_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_1701a9b8a630eb79a249432dfe8bcecc_2 = MAKE_FUNCTION_FRAME(codeobj_1701a9b8a630eb79a249432dfe8bcecc, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_1701a9b8a630eb79a249432dfe8bcecc_2->m_type_description == NULL);
        frame_1701a9b8a630eb79a249432dfe8bcecc_2 = cache_frame_1701a9b8a630eb79a249432dfe8bcecc_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_1701a9b8a630eb79a249432dfe8bcecc_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_1701a9b8a630eb79a249432dfe8bcecc_2) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_31;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_31 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_31 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 524;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_31;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_32;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_assign_source_32 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var__;
                outline_0_var__ = tmp_assign_source_32;
                Py_INCREF(outline_0_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_called_instance_24;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT(var_stack);
            tmp_called_instance_24 = var_stack;
            frame_1701a9b8a630eb79a249432dfe8bcecc_2->m_frame.f_lineno = 524;
            tmp_append_value_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_24, const_str_plain_pop);
            if (tmp_append_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;
                type_description_2 = "oo";
                goto try_except_handler_3;
            }
            assert(PyList_Check(tmp_append_list_1));
            tmp_res = PyList_Append(tmp_append_list_1, tmp_append_value_1);
            Py_DECREF(tmp_append_value_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;
                type_description_2 = "oo";
                goto try_except_handler_3;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;
            type_description_2 = "oo";
            goto try_except_handler_3;
        }
        goto loop_start_2;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_args_element_name_17 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_args_element_name_17);
        goto try_return_handler_3;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;

        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1701a9b8a630eb79a249432dfe8bcecc_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_1701a9b8a630eb79a249432dfe8bcecc_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1701a9b8a630eb79a249432dfe8bcecc_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1701a9b8a630eb79a249432dfe8bcecc_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1701a9b8a630eb79a249432dfe8bcecc_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1701a9b8a630eb79a249432dfe8bcecc_2, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1701a9b8a630eb79a249432dfe8bcecc_2,
            type_description_2,
            outline_0_var__,
            var_stack
        );


        // Release cached frame.
        if (frame_1701a9b8a630eb79a249432dfe8bcecc_2 == cache_frame_1701a9b8a630eb79a249432dfe8bcecc_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_1701a9b8a630eb79a249432dfe8bcecc_2);
        }
        cache_frame_1701a9b8a630eb79a249432dfe8bcecc_2 = NULL;

        assertFrameObject(frame_1701a9b8a630eb79a249432dfe8bcecc_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF(outline_0_var__);
        outline_0_var__ = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var__);
        outline_0_var__ = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 524;
        goto frame_exception_exit_1;
        outline_result_1:;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 523;
        tmp_list_arg_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_22, tmp_args_element_name_17);
        Py_DECREF(tmp_args_element_name_17);
        if (tmp_list_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 523;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_28 = PySequence_List(tmp_list_arg_2);
        Py_DECREF(tmp_list_arg_2);
        if (tmp_assign_source_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 523;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_args;
            par_args = tmp_assign_source_28;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_called_instance_25;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_25 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 525;
        tmp_assign_source_33 = CALL_METHOD_NO_ARGS(tmp_called_instance_25, const_str_plain_pop);
        if (tmp_assign_source_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_33;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_called_instance_26;
        PyObject *tmp_expression_name_20;
        CHECK_OBJECT(var_obj);
        tmp_expression_name_20 = var_obj;
        tmp_called_instance_26 = LOOKUP_ATTRIBUTE(tmp_expression_name_20, const_str_plain_avm_class);
        if (tmp_called_instance_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 526;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 526;
        tmp_assign_source_34 = CALL_METHOD_NO_ARGS(tmp_called_instance_26, const_str_plain_make_object);
        Py_DECREF(tmp_called_instance_26);
        if (tmp_assign_source_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 526;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_34;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_27;
        PyObject *tmp_call_result_17;
        PyObject *tmp_args_element_name_18;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_27 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_18 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 527;
        {
            PyObject *call_args[] = {tmp_args_element_name_18};
            tmp_call_result_17 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_27, const_str_plain_append, call_args);
        }

        if (tmp_call_result_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 527;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_17);
    }
    goto branch_end_23;
    branch_no_23:;
    {
        nuitka_bool tmp_condition_result_24;
        PyObject *tmp_compexpr_left_22;
        PyObject *tmp_compexpr_right_22;
        PyObject *tmp_tmp_condition_result_24_object_1;
        int tmp_truth_name_19;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_22 = var_opcode;
        tmp_compexpr_right_22 = const_int_pos_70;
        tmp_tmp_condition_result_24_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_22, tmp_compexpr_right_22);
        if (tmp_tmp_condition_result_24_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 528;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_19 = CHECK_IF_TRUE(tmp_tmp_condition_result_24_object_1);
        if (tmp_truth_name_19 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_24_object_1);

            exception_lineno = 528;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_24 = tmp_truth_name_19 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_24_object_1);
        if (tmp_condition_result_24 == NUITKA_BOOL_TRUE) {
            goto branch_yes_24;
        } else {
            goto branch_no_24;
        }
    }
    branch_yes_24:;
    {
        PyObject *tmp_assign_source_35;
        PyObject *tmp_called_name_23;
        CHECK_OBJECT(var_u30);
        tmp_called_name_23 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 529;
        tmp_assign_source_35 = CALL_FUNCTION_NO_ARGS(tmp_called_name_23);
        if (tmp_assign_source_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 529;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_35;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_expression_name_21;
        PyObject *tmp_expression_name_22;
        PyObject *tmp_subscript_name_3;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 530;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_22 = PyCell_GET(self->m_closure[2]);
        tmp_expression_name_21 = LOOKUP_ATTRIBUTE(tmp_expression_name_22, const_str_plain_multinames);
        if (tmp_expression_name_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 530;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_3 = var_index;
        tmp_assign_source_36 = LOOKUP_SUBSCRIPT(tmp_expression_name_21, tmp_subscript_name_3);
        Py_DECREF(tmp_expression_name_21);
        if (tmp_assign_source_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 530;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_mname;
            var_mname = tmp_assign_source_36;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_called_name_24;
        CHECK_OBJECT(var_u30);
        tmp_called_name_24 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 531;
        tmp_assign_source_37 = CALL_FUNCTION_NO_ARGS(tmp_called_name_24);
        if (tmp_assign_source_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 531;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_arg_count;
            var_arg_count = tmp_assign_source_37;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_list_arg_3;
        PyObject *tmp_called_name_25;
        PyObject *tmp_args_element_name_19;
        tmp_called_name_25 = (PyObject *)&PyReversed_Type;
        // Tried code:
        {
            PyObject *tmp_assign_source_39;
            PyObject *tmp_iter_arg_2;
            PyObject *tmp_xrange_low_2;
            CHECK_OBJECT(var_arg_count);
            tmp_xrange_low_2 = var_arg_count;
            tmp_iter_arg_2 = BUILTIN_XRANGE1(tmp_xrange_low_2);
            if (tmp_iter_arg_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                goto try_except_handler_4;
            }
            tmp_assign_source_39 = MAKE_ITERATOR(tmp_iter_arg_2);
            Py_DECREF(tmp_iter_arg_2);
            if (tmp_assign_source_39 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_listcomp_2__$0;
                tmp_listcomp_2__$0 = tmp_assign_source_39;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_40;
            tmp_assign_source_40 = PyList_New(0);
            {
                PyObject *old = tmp_listcomp_2__contraction;
                tmp_listcomp_2__contraction = tmp_assign_source_40;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_323d515b83a7c693618e6a85ceb51b0d_3)) {
            Py_XDECREF(cache_frame_323d515b83a7c693618e6a85ceb51b0d_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_323d515b83a7c693618e6a85ceb51b0d_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_323d515b83a7c693618e6a85ceb51b0d_3 = MAKE_FUNCTION_FRAME(codeobj_323d515b83a7c693618e6a85ceb51b0d, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_323d515b83a7c693618e6a85ceb51b0d_3->m_type_description == NULL);
        frame_323d515b83a7c693618e6a85ceb51b0d_3 = cache_frame_323d515b83a7c693618e6a85ceb51b0d_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_323d515b83a7c693618e6a85ceb51b0d_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_323d515b83a7c693618e6a85ceb51b0d_3) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_3:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_41;
            CHECK_OBJECT(tmp_listcomp_2__$0);
            tmp_next_source_2 = tmp_listcomp_2__$0;
            tmp_assign_source_41 = ITERATOR_NEXT(tmp_next_source_2);
            if (tmp_assign_source_41 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_2;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 533;
                    goto try_except_handler_5;
                }
            }

            {
                PyObject *old = tmp_listcomp_2__iter_value_0;
                tmp_listcomp_2__iter_value_0 = tmp_assign_source_41;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_42;
            CHECK_OBJECT(tmp_listcomp_2__iter_value_0);
            tmp_assign_source_42 = tmp_listcomp_2__iter_value_0;
            {
                PyObject *old = outline_1_var__;
                outline_1_var__ = tmp_assign_source_42;
                Py_INCREF(outline_1_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_2;
            PyObject *tmp_append_value_2;
            PyObject *tmp_called_instance_28;
            CHECK_OBJECT(tmp_listcomp_2__contraction);
            tmp_append_list_2 = tmp_listcomp_2__contraction;
            CHECK_OBJECT(var_stack);
            tmp_called_instance_28 = var_stack;
            frame_323d515b83a7c693618e6a85ceb51b0d_3->m_frame.f_lineno = 533;
            tmp_append_value_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_28, const_str_plain_pop);
            if (tmp_append_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_2 = "oo";
                goto try_except_handler_5;
            }
            assert(PyList_Check(tmp_append_list_2));
            tmp_res = PyList_Append(tmp_append_list_2, tmp_append_value_2);
            Py_DECREF(tmp_append_value_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_2 = "oo";
                goto try_except_handler_5;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 533;
            type_description_2 = "oo";
            goto try_except_handler_5;
        }
        goto loop_start_3;
        loop_end_2:;
        CHECK_OBJECT(tmp_listcomp_2__contraction);
        tmp_args_element_name_19 = tmp_listcomp_2__contraction;
        Py_INCREF(tmp_args_element_name_19);
        goto try_return_handler_5;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        CHECK_OBJECT(tmp_listcomp_2__$0);
        Py_DECREF(tmp_listcomp_2__$0);
        tmp_listcomp_2__$0 = NULL;

        CHECK_OBJECT(tmp_listcomp_2__contraction);
        Py_DECREF(tmp_listcomp_2__contraction);
        tmp_listcomp_2__contraction = NULL;

        Py_XDECREF(tmp_listcomp_2__iter_value_0);
        tmp_listcomp_2__iter_value_0 = NULL;

        goto frame_return_exit_3;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_2__$0);
        Py_DECREF(tmp_listcomp_2__$0);
        tmp_listcomp_2__$0 = NULL;

        CHECK_OBJECT(tmp_listcomp_2__contraction);
        Py_DECREF(tmp_listcomp_2__contraction);
        tmp_listcomp_2__contraction = NULL;

        Py_XDECREF(tmp_listcomp_2__iter_value_0);
        tmp_listcomp_2__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_3;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_323d515b83a7c693618e6a85ceb51b0d_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_return_exit_3:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_323d515b83a7c693618e6a85ceb51b0d_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_4;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_323d515b83a7c693618e6a85ceb51b0d_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_323d515b83a7c693618e6a85ceb51b0d_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_323d515b83a7c693618e6a85ceb51b0d_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_323d515b83a7c693618e6a85ceb51b0d_3, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_323d515b83a7c693618e6a85ceb51b0d_3,
            type_description_2,
            outline_1_var__,
            var_stack
        );


        // Release cached frame.
        if (frame_323d515b83a7c693618e6a85ceb51b0d_3 == cache_frame_323d515b83a7c693618e6a85ceb51b0d_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_323d515b83a7c693618e6a85ceb51b0d_3);
        }
        cache_frame_323d515b83a7c693618e6a85ceb51b0d_3 = NULL;

        assertFrameObject(frame_323d515b83a7c693618e6a85ceb51b0d_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto try_except_handler_4;
        skip_nested_handling_2:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        Py_XDECREF(outline_1_var__);
        outline_1_var__ = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_1_var__);
        outline_1_var__ = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 533;
        goto frame_exception_exit_1;
        outline_result_2:;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 532;
        tmp_list_arg_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_25, tmp_args_element_name_19);
        Py_DECREF(tmp_args_element_name_19);
        if (tmp_list_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_38 = PySequence_List(tmp_list_arg_3);
        Py_DECREF(tmp_list_arg_3);
        if (tmp_assign_source_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_args;
            par_args = tmp_assign_source_38;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_43;
        PyObject *tmp_called_instance_29;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_29 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 534;
        tmp_assign_source_43 = CALL_METHOD_NO_ARGS(tmp_called_instance_29, const_str_plain_pop);
        if (tmp_assign_source_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 534;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_43;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_25;
        PyObject *tmp_compexpr_left_23;
        PyObject *tmp_compexpr_right_23;
        PyObject *tmp_mvar_value_6;
        CHECK_OBJECT(var_obj);
        tmp_compexpr_left_23 = var_obj;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_StringClass);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_StringClass);
        }

        if (tmp_mvar_value_6 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55794 ], 33, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 536;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_23 = tmp_mvar_value_6;
        tmp_condition_result_25 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_23, tmp_compexpr_right_23);
        if (tmp_condition_result_25 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
            goto branch_yes_25;
        } else {
            goto branch_no_25;
        }
    }
    branch_yes_25:;
    {
        nuitka_bool tmp_condition_result_26;
        PyObject *tmp_compexpr_left_24;
        PyObject *tmp_compexpr_right_24;
        PyObject *tmp_tmp_condition_result_26_object_1;
        int tmp_truth_name_20;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_24 = var_mname;
        tmp_compexpr_right_24 = const_str_plain_String;
        tmp_tmp_condition_result_26_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_24, tmp_compexpr_right_24);
        if (tmp_tmp_condition_result_26_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 537;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_20 = CHECK_IF_TRUE(tmp_tmp_condition_result_26_object_1);
        if (tmp_truth_name_20 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_26_object_1);

            exception_lineno = 537;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_26 = tmp_truth_name_20 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_26_object_1);
        if (tmp_condition_result_26 == NUITKA_BOOL_TRUE) {
            goto branch_yes_26;
        } else {
            goto branch_no_26;
        }
    }
    branch_yes_26:;
    {
        nuitka_bool tmp_condition_result_27;
        PyObject *tmp_compexpr_left_25;
        PyObject *tmp_compexpr_right_25;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_tmp_condition_result_27_object_1;
        int tmp_truth_name_21;
        CHECK_OBJECT(par_args);
        tmp_len_arg_1 = par_args;
        tmp_compexpr_left_25 = BUILTIN_LEN(tmp_len_arg_1);
        assert(!(tmp_compexpr_left_25 == NULL));
        tmp_compexpr_right_25 = const_int_pos_1;
        tmp_tmp_condition_result_27_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_25, tmp_compexpr_right_25);
        Py_DECREF(tmp_compexpr_left_25);
        assert(!(tmp_tmp_condition_result_27_object_1 == NULL));
        tmp_truth_name_21 = CHECK_IF_TRUE(tmp_tmp_condition_result_27_object_1);
        assert(!(tmp_truth_name_21 == -1));
        tmp_condition_result_27 = tmp_truth_name_21 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_27_object_1);
        if (tmp_condition_result_27 == NUITKA_BOOL_TRUE) {
            goto branch_yes_27;
        } else {
            goto branch_no_27;
        }
    }
    branch_yes_27:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 538;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_27:;
    {
        nuitka_bool tmp_condition_result_28;
        PyObject *tmp_operand_name_3;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_name_23;
        PyObject *tmp_subscript_name_4;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_mvar_value_8;
        CHECK_OBJECT(par_args);
        tmp_expression_name_23 = par_args;
        tmp_subscript_name_4 = const_int_0;
        tmp_isinstance_inst_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_23, tmp_subscript_name_4, 0);
        if (tmp_isinstance_inst_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 539;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = (PyObject *)&PyLong_Type;
        tmp_isinstance_cls_1 = PyTuple_New(3);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_isinstance_cls_1, 0, tmp_tuple_element_1);
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_str);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_str);
        }

        if (tmp_mvar_value_7 == NULL) {
            Py_DECREF(tmp_isinstance_inst_1);
            Py_DECREF(tmp_isinstance_cls_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 26637 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 540;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = tmp_mvar_value_7;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_isinstance_cls_1, 1, tmp_tuple_element_1);
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__Undefined);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__Undefined);
        }

        if (tmp_mvar_value_8 == NULL) {
            Py_DECREF(tmp_isinstance_inst_1);
            Py_DECREF(tmp_isinstance_cls_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55827 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 540;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = tmp_mvar_value_8;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_isinstance_cls_1, 2, tmp_tuple_element_1);
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_inst_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 539;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_3 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 539;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_28 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_28 == NUITKA_BOOL_TRUE) {
            goto branch_yes_28;
        } else {
            goto branch_no_28;
        }
    }
    branch_yes_28:;
    {
        PyObject *tmp_raise_type_2;
        tmp_raise_type_2 = PyExc_AssertionError;
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_lineno = 539;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_28:;
    {
        nuitka_bool tmp_condition_result_29;
        PyObject *tmp_compexpr_left_26;
        PyObject *tmp_compexpr_right_26;
        PyObject *tmp_expression_name_24;
        PyObject *tmp_subscript_name_5;
        PyObject *tmp_mvar_value_9;
        CHECK_OBJECT(par_args);
        tmp_expression_name_24 = par_args;
        tmp_subscript_name_5 = const_int_0;
        tmp_compexpr_left_26 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_24, tmp_subscript_name_5, 0);
        if (tmp_compexpr_left_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 541;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_undefined);

        if (unlikely(tmp_mvar_value_9 == NULL)) {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_undefined);
        }

        if (tmp_mvar_value_9 == NULL) {
            Py_DECREF(tmp_compexpr_left_26);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55679 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 541;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_26 = tmp_mvar_value_9;
        tmp_condition_result_29 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_compexpr_left_26, tmp_compexpr_right_26);
        Py_DECREF(tmp_compexpr_left_26);
        if (tmp_condition_result_29 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 541;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_29 == NUITKA_BOOL_TRUE) {
            goto branch_yes_29;
        } else {
            goto branch_no_29;
        }
    }
    branch_yes_29:;
    {
        PyObject *tmp_assign_source_44;
        tmp_assign_source_44 = const_str_plain_undefined;
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_44;
            Py_INCREF(var_res);
            Py_XDECREF(old);
        }

    }
    goto branch_end_29;
    branch_no_29:;
    {
        PyObject *tmp_assign_source_45;
        PyObject *tmp_called_name_26;
        PyObject *tmp_mvar_value_10;
        PyObject *tmp_args_element_name_20;
        PyObject *tmp_expression_name_25;
        PyObject *tmp_subscript_name_6;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_str);

        if (unlikely(tmp_mvar_value_10 == NULL)) {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_str);
        }

        if (tmp_mvar_value_10 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 26637 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 544;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_26 = tmp_mvar_value_10;
        CHECK_OBJECT(par_args);
        tmp_expression_name_25 = par_args;
        tmp_subscript_name_6 = const_int_0;
        tmp_args_element_name_20 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_25, tmp_subscript_name_6, 0);
        if (tmp_args_element_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 544;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 544;
        tmp_assign_source_45 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_26, tmp_args_element_name_20);
        Py_DECREF(tmp_args_element_name_20);
        if (tmp_assign_source_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 544;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_45;
            Py_XDECREF(old);
        }

    }
    branch_end_29:;
    {
        PyObject *tmp_called_instance_30;
        PyObject *tmp_call_result_18;
        PyObject *tmp_args_element_name_21;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_30 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_21 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 545;
        {
            PyObject *call_args[] = {tmp_args_element_name_21};
            tmp_call_result_18 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_30, const_str_plain_append, call_args);
        }

        if (tmp_call_result_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 545;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_18);
    }
    goto loop_start_1;
    goto branch_end_26;
    branch_no_26:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_name_10;
        PyObject *tmp_right_name_10;
        tmp_left_name_10 = const_str_digest_aa76b3aaccf16bd99cc11d45b4ccc7b0;
        CHECK_OBJECT(var_mname);
        tmp_right_name_10 = var_mname;
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_10, tmp_right_name_10);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 549;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 548;
        tmp_raise_type_3 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_NotImplementedError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_3 == NULL));
        exception_type = tmp_raise_type_3;
        exception_lineno = 548;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_end_26:;
    goto branch_end_25;
    branch_no_25:;
    {
        nuitka_bool tmp_condition_result_30;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_mvar_value_11;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_2 = var_obj;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass_Object);

        if (unlikely(tmp_mvar_value_11 == NULL)) {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass_Object);
        }

        if (tmp_mvar_value_11 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55387 ], 38, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 551;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_2 = tmp_mvar_value_11;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 551;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_30 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_30 == NUITKA_BOOL_TRUE) {
            goto branch_yes_30;
        } else {
            goto branch_no_30;
        }
    }
    branch_yes_30:;
    {
        PyObject *tmp_assign_source_46;
        PyObject *tmp_called_name_27;
        PyObject *tmp_expression_name_26;
        PyObject *tmp_args_element_name_22;
        PyObject *tmp_expression_name_27;
        PyObject *tmp_args_element_name_23;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 552;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_26 = PyCell_GET(self->m_closure[2]);
        tmp_called_name_27 = LOOKUP_ATTRIBUTE(tmp_expression_name_26, const_str_plain_extract_function);
        if (tmp_called_name_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 552;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_obj);
        tmp_expression_name_27 = var_obj;
        tmp_args_element_name_22 = LOOKUP_ATTRIBUTE(tmp_expression_name_27, const_str_plain_avm_class);
        if (tmp_args_element_name_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_27);

            exception_lineno = 552;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_mname);
        tmp_args_element_name_23 = var_mname;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 552;
        {
            PyObject *call_args[] = {tmp_args_element_name_22, tmp_args_element_name_23};
            tmp_assign_source_46 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_27, call_args);
        }

        Py_DECREF(tmp_called_name_27);
        Py_DECREF(tmp_args_element_name_22);
        if (tmp_assign_source_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 552;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_func;
            var_func = tmp_assign_source_46;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_47;
        PyObject *tmp_called_name_28;
        PyObject *tmp_args_element_name_24;
        CHECK_OBJECT(var_func);
        tmp_called_name_28 = var_func;
        CHECK_OBJECT(par_args);
        tmp_args_element_name_24 = par_args;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 553;
        tmp_assign_source_47 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_28, tmp_args_element_name_24);
        if (tmp_assign_source_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 553;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_47;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_31;
        PyObject *tmp_call_result_19;
        PyObject *tmp_args_element_name_25;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_31 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_25 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 554;
        {
            PyObject *call_args[] = {tmp_args_element_name_25};
            tmp_call_result_19 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_31, const_str_plain_append, call_args);
        }

        if (tmp_call_result_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 554;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_19);
    }
    goto loop_start_1;
    goto branch_end_30;
    branch_no_30:;
    {
        nuitka_bool tmp_condition_result_31;
        PyObject *tmp_isinstance_inst_3;
        PyObject *tmp_isinstance_cls_3;
        PyObject *tmp_mvar_value_12;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_3 = var_obj;
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass);

        if (unlikely(tmp_mvar_value_12 == NULL)) {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass);
        }

        if (tmp_mvar_value_12 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55648 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 556;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_3 = tmp_mvar_value_12;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_3, tmp_isinstance_cls_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_31 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_31 == NUITKA_BOOL_TRUE) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    {
        PyObject *tmp_assign_source_48;
        PyObject *tmp_called_instance_32;
        PyObject *tmp_args_element_name_26;
        PyObject *tmp_args_element_name_27;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 557;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_32 = PyCell_GET(self->m_closure[2]);
        CHECK_OBJECT(var_obj);
        tmp_args_element_name_26 = var_obj;
        CHECK_OBJECT(var_mname);
        tmp_args_element_name_27 = var_mname;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 557;
        {
            PyObject *call_args[] = {tmp_args_element_name_26, tmp_args_element_name_27};
            tmp_assign_source_48 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_32, const_str_plain_extract_function, call_args);
        }

        if (tmp_assign_source_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 557;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_func;
            var_func = tmp_assign_source_48;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_called_name_29;
        PyObject *tmp_args_element_name_28;
        CHECK_OBJECT(var_func);
        tmp_called_name_29 = var_func;
        CHECK_OBJECT(par_args);
        tmp_args_element_name_28 = par_args;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 558;
        tmp_assign_source_49 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_29, tmp_args_element_name_28);
        if (tmp_assign_source_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_49;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_33;
        PyObject *tmp_call_result_20;
        PyObject *tmp_args_element_name_29;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_33 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_29 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 559;
        {
            PyObject *call_args[] = {tmp_args_element_name_29};
            tmp_call_result_20 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_33, const_str_plain_append, call_args);
        }

        if (tmp_call_result_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 559;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_20);
    }
    goto loop_start_1;
    goto branch_end_31;
    branch_no_31:;
    {
        nuitka_bool tmp_condition_result_32;
        PyObject *tmp_isinstance_inst_4;
        PyObject *tmp_isinstance_cls_4;
        PyObject *tmp_mvar_value_13;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_4 = var_obj;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__ScopeDict);

        if (unlikely(tmp_mvar_value_13 == NULL)) {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__ScopeDict);
        }

        if (tmp_mvar_value_13 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55355 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 561;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_4 = tmp_mvar_value_13;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_4, tmp_isinstance_cls_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 561;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_32 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_32 == NUITKA_BOOL_TRUE) {
            goto branch_yes_32;
        } else {
            goto branch_no_32;
        }
    }
    branch_yes_32:;
    {
        nuitka_bool tmp_condition_result_33;
        PyObject *tmp_compexpr_left_27;
        PyObject *tmp_compexpr_right_27;
        PyObject *tmp_expression_name_28;
        PyObject *tmp_expression_name_29;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_27 = var_mname;
        CHECK_OBJECT(var_obj);
        tmp_expression_name_29 = var_obj;
        tmp_expression_name_28 = LOOKUP_ATTRIBUTE(tmp_expression_name_29, const_str_plain_avm_class);
        if (tmp_expression_name_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 562;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_27 = LOOKUP_ATTRIBUTE(tmp_expression_name_28, const_str_plain_method_names);
        Py_DECREF(tmp_expression_name_28);
        if (tmp_compexpr_right_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 562;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_27, tmp_compexpr_left_27);
        Py_DECREF(tmp_compexpr_right_27);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 562;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_33 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_33 == NUITKA_BOOL_TRUE) {
            goto branch_yes_33;
        } else {
            goto branch_no_33;
        }
    }
    branch_yes_33:;
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_called_name_30;
        PyObject *tmp_expression_name_30;
        PyObject *tmp_args_element_name_30;
        PyObject *tmp_expression_name_31;
        PyObject *tmp_args_element_name_31;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 563;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_30 = PyCell_GET(self->m_closure[2]);
        tmp_called_name_30 = LOOKUP_ATTRIBUTE(tmp_expression_name_30, const_str_plain_extract_function);
        if (tmp_called_name_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 563;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_obj);
        tmp_expression_name_31 = var_obj;
        tmp_args_element_name_30 = LOOKUP_ATTRIBUTE(tmp_expression_name_31, const_str_plain_avm_class);
        if (tmp_args_element_name_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_30);

            exception_lineno = 563;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_mname);
        tmp_args_element_name_31 = var_mname;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 563;
        {
            PyObject *call_args[] = {tmp_args_element_name_30, tmp_args_element_name_31};
            tmp_assign_source_50 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_30, call_args);
        }

        Py_DECREF(tmp_called_name_30);
        Py_DECREF(tmp_args_element_name_30);
        if (tmp_assign_source_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 563;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_func;
            var_func = tmp_assign_source_50;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_called_name_31;
        PyObject *tmp_args_element_name_32;
        CHECK_OBJECT(var_func);
        tmp_called_name_31 = var_func;
        CHECK_OBJECT(par_args);
        tmp_args_element_name_32 = par_args;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 564;
        tmp_assign_source_51 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_31, tmp_args_element_name_32);
        if (tmp_assign_source_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_51;
            Py_XDECREF(old);
        }

    }
    goto branch_end_33;
    branch_no_33:;
    {
        PyObject *tmp_assign_source_52;
        PyObject *tmp_expression_name_32;
        PyObject *tmp_subscript_name_7;
        CHECK_OBJECT(var_obj);
        tmp_expression_name_32 = var_obj;
        CHECK_OBJECT(var_mname);
        tmp_subscript_name_7 = var_mname;
        tmp_assign_source_52 = LOOKUP_SUBSCRIPT(tmp_expression_name_32, tmp_subscript_name_7);
        if (tmp_assign_source_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 566;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_52;
            Py_XDECREF(old);
        }

    }
    branch_end_33:;
    {
        PyObject *tmp_called_instance_34;
        PyObject *tmp_call_result_21;
        PyObject *tmp_args_element_name_33;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_34 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_33 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 567;
        {
            PyObject *call_args[] = {tmp_args_element_name_33};
            tmp_call_result_21 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_34, const_str_plain_append, call_args);
        }

        if (tmp_call_result_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 567;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_21);
    }
    goto loop_start_1;
    goto branch_end_32;
    branch_no_32:;
    {
        nuitka_bool tmp_condition_result_34;
        PyObject *tmp_isinstance_inst_5;
        PyObject *tmp_isinstance_cls_5;
        PyObject *tmp_mvar_value_14;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_5 = var_obj;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_str);

        if (unlikely(tmp_mvar_value_14 == NULL)) {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_str);
        }

        if (tmp_mvar_value_14 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 26637 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 569;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_5 = tmp_mvar_value_14;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_5, tmp_isinstance_cls_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 569;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_34 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_34 == NUITKA_BOOL_TRUE) {
            goto branch_yes_34;
        } else {
            goto branch_no_34;
        }
    }
    branch_yes_34:;
    {
        nuitka_bool tmp_condition_result_35;
        PyObject *tmp_compexpr_left_28;
        PyObject *tmp_compexpr_right_28;
        PyObject *tmp_tmp_condition_result_35_object_1;
        int tmp_truth_name_22;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_28 = var_mname;
        tmp_compexpr_right_28 = const_str_plain_split;
        tmp_tmp_condition_result_35_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_28, tmp_compexpr_right_28);
        if (tmp_tmp_condition_result_35_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 570;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_22 = CHECK_IF_TRUE(tmp_tmp_condition_result_35_object_1);
        if (tmp_truth_name_22 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_35_object_1);

            exception_lineno = 570;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_35 = tmp_truth_name_22 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_35_object_1);
        if (tmp_condition_result_35 == NUITKA_BOOL_TRUE) {
            goto branch_yes_35;
        } else {
            goto branch_no_35;
        }
    }
    branch_yes_35:;
    {
        nuitka_bool tmp_condition_result_36;
        PyObject *tmp_compexpr_left_29;
        PyObject *tmp_compexpr_right_29;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_tmp_condition_result_36_object_1;
        int tmp_truth_name_23;
        CHECK_OBJECT(par_args);
        tmp_len_arg_2 = par_args;
        tmp_compexpr_left_29 = BUILTIN_LEN(tmp_len_arg_2);
        assert(!(tmp_compexpr_left_29 == NULL));
        tmp_compexpr_right_29 = const_int_pos_1;
        tmp_tmp_condition_result_36_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_29, tmp_compexpr_right_29);
        Py_DECREF(tmp_compexpr_left_29);
        assert(!(tmp_tmp_condition_result_36_object_1 == NULL));
        tmp_truth_name_23 = CHECK_IF_TRUE(tmp_tmp_condition_result_36_object_1);
        assert(!(tmp_truth_name_23 == -1));
        tmp_condition_result_36 = tmp_truth_name_23 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_36_object_1);
        if (tmp_condition_result_36 == NUITKA_BOOL_TRUE) {
            goto branch_yes_36;
        } else {
            goto branch_no_36;
        }
    }
    branch_yes_36:;
    {
        PyObject *tmp_raise_type_4;
        tmp_raise_type_4 = PyExc_AssertionError;
        exception_type = tmp_raise_type_4;
        Py_INCREF(tmp_raise_type_4);
        exception_lineno = 571;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_36:;
    {
        nuitka_bool tmp_condition_result_37;
        PyObject *tmp_operand_name_4;
        PyObject *tmp_isinstance_inst_6;
        PyObject *tmp_isinstance_cls_6;
        PyObject *tmp_expression_name_33;
        PyObject *tmp_subscript_name_8;
        PyObject *tmp_mvar_value_15;
        CHECK_OBJECT(par_args);
        tmp_expression_name_33 = par_args;
        tmp_subscript_name_8 = const_int_0;
        tmp_isinstance_inst_6 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_33, tmp_subscript_name_8, 0);
        if (tmp_isinstance_inst_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 572;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_15 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_str);

        if (unlikely(tmp_mvar_value_15 == NULL)) {
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_str);
        }

        if (tmp_mvar_value_15 == NULL) {
            Py_DECREF(tmp_isinstance_inst_6);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 26637 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 572;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_6 = tmp_mvar_value_15;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_6, tmp_isinstance_cls_6);
        Py_DECREF(tmp_isinstance_inst_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 572;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_4 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 572;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_37 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_37 == NUITKA_BOOL_TRUE) {
            goto branch_yes_37;
        } else {
            goto branch_no_37;
        }
    }
    branch_yes_37:;
    {
        PyObject *tmp_raise_type_5;
        tmp_raise_type_5 = PyExc_AssertionError;
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_lineno = 572;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_37:;
    {
        nuitka_bool tmp_condition_result_38;
        PyObject *tmp_compexpr_left_30;
        PyObject *tmp_compexpr_right_30;
        PyObject *tmp_expression_name_34;
        PyObject *tmp_subscript_name_9;
        PyObject *tmp_tmp_condition_result_38_object_1;
        int tmp_truth_name_24;
        CHECK_OBJECT(par_args);
        tmp_expression_name_34 = par_args;
        tmp_subscript_name_9 = const_int_0;
        tmp_compexpr_left_30 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_34, tmp_subscript_name_9, 0);
        if (tmp_compexpr_left_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_30 = const_str_empty;
        tmp_tmp_condition_result_38_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_30, tmp_compexpr_right_30);
        Py_DECREF(tmp_compexpr_left_30);
        if (tmp_tmp_condition_result_38_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_24 = CHECK_IF_TRUE(tmp_tmp_condition_result_38_object_1);
        if (tmp_truth_name_24 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_38_object_1);

            exception_lineno = 573;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_38 = tmp_truth_name_24 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_38_object_1);
        if (tmp_condition_result_38 == NUITKA_BOOL_TRUE) {
            goto branch_yes_38;
        } else {
            goto branch_no_38;
        }
    }
    branch_yes_38:;
    {
        PyObject *tmp_assign_source_53;
        PyObject *tmp_list_arg_4;
        CHECK_OBJECT(var_obj);
        tmp_list_arg_4 = var_obj;
        tmp_assign_source_53 = PySequence_List(tmp_list_arg_4);
        if (tmp_assign_source_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 574;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_53;
            Py_XDECREF(old);
        }

    }
    goto branch_end_38;
    branch_no_38:;
    {
        PyObject *tmp_assign_source_54;
        PyObject *tmp_called_name_32;
        PyObject *tmp_expression_name_35;
        PyObject *tmp_args_element_name_34;
        PyObject *tmp_expression_name_36;
        PyObject *tmp_subscript_name_10;
        CHECK_OBJECT(var_obj);
        tmp_expression_name_35 = var_obj;
        tmp_called_name_32 = LOOKUP_ATTRIBUTE(tmp_expression_name_35, const_str_plain_split);
        if (tmp_called_name_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_args);
        tmp_expression_name_36 = par_args;
        tmp_subscript_name_10 = const_int_0;
        tmp_args_element_name_34 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_36, tmp_subscript_name_10, 0);
        if (tmp_args_element_name_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_32);

            exception_lineno = 576;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 576;
        tmp_assign_source_54 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_32, tmp_args_element_name_34);
        Py_DECREF(tmp_called_name_32);
        Py_DECREF(tmp_args_element_name_34);
        if (tmp_assign_source_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_54;
            Py_XDECREF(old);
        }

    }
    branch_end_38:;
    {
        PyObject *tmp_called_instance_35;
        PyObject *tmp_call_result_22;
        PyObject *tmp_args_element_name_35;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_35 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_35 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 577;
        {
            PyObject *call_args[] = {tmp_args_element_name_35};
            tmp_call_result_22 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_35, const_str_plain_append, call_args);
        }

        if (tmp_call_result_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_22);
    }
    goto loop_start_1;
    goto branch_end_35;
    branch_no_35:;
    {
        nuitka_bool tmp_condition_result_39;
        PyObject *tmp_compexpr_left_31;
        PyObject *tmp_compexpr_right_31;
        PyObject *tmp_tmp_condition_result_39_object_1;
        int tmp_truth_name_25;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_31 = var_mname;
        tmp_compexpr_right_31 = const_str_plain_charCodeAt;
        tmp_tmp_condition_result_39_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_31, tmp_compexpr_right_31);
        if (tmp_tmp_condition_result_39_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 579;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_25 = CHECK_IF_TRUE(tmp_tmp_condition_result_39_object_1);
        if (tmp_truth_name_25 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_39_object_1);

            exception_lineno = 579;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_39 = tmp_truth_name_25 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_39_object_1);
        if (tmp_condition_result_39 == NUITKA_BOOL_TRUE) {
            goto branch_yes_39;
        } else {
            goto branch_no_39;
        }
    }
    branch_yes_39:;
    {
        nuitka_bool tmp_condition_result_40;
        PyObject *tmp_compexpr_left_32;
        PyObject *tmp_compexpr_right_32;
        PyObject *tmp_len_arg_3;
        PyObject *tmp_tmp_condition_result_40_object_1;
        int tmp_truth_name_26;
        CHECK_OBJECT(par_args);
        tmp_len_arg_3 = par_args;
        tmp_compexpr_left_32 = BUILTIN_LEN(tmp_len_arg_3);
        assert(!(tmp_compexpr_left_32 == NULL));
        tmp_compexpr_right_32 = const_int_pos_1;
        tmp_tmp_condition_result_40_object_1 = RICH_COMPARE_GT_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_32, tmp_compexpr_right_32);
        Py_DECREF(tmp_compexpr_left_32);
        assert(!(tmp_tmp_condition_result_40_object_1 == NULL));
        tmp_truth_name_26 = CHECK_IF_TRUE(tmp_tmp_condition_result_40_object_1);
        assert(!(tmp_truth_name_26 == -1));
        tmp_condition_result_40 = tmp_truth_name_26 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_40_object_1);
        if (tmp_condition_result_40 == NUITKA_BOOL_TRUE) {
            goto branch_yes_40;
        } else {
            goto branch_no_40;
        }
    }
    branch_yes_40:;
    {
        PyObject *tmp_raise_type_6;
        tmp_raise_type_6 = PyExc_AssertionError;
        exception_type = tmp_raise_type_6;
        Py_INCREF(tmp_raise_type_6);
        exception_lineno = 580;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_40:;
    {
        PyObject *tmp_assign_source_55;
        nuitka_bool tmp_condition_result_41;
        PyObject *tmp_compexpr_left_33;
        PyObject *tmp_compexpr_right_33;
        PyObject *tmp_len_arg_4;
        PyObject *tmp_tmp_condition_result_41_object_1;
        int tmp_truth_name_27;
        PyObject *tmp_expression_name_37;
        PyObject *tmp_subscript_name_11;
        CHECK_OBJECT(par_args);
        tmp_len_arg_4 = par_args;
        tmp_compexpr_left_33 = BUILTIN_LEN(tmp_len_arg_4);
        assert(!(tmp_compexpr_left_33 == NULL));
        tmp_compexpr_right_33 = const_int_0;
        tmp_tmp_condition_result_41_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_33, tmp_compexpr_right_33);
        Py_DECREF(tmp_compexpr_left_33);
        assert(!(tmp_tmp_condition_result_41_object_1 == NULL));
        tmp_truth_name_27 = CHECK_IF_TRUE(tmp_tmp_condition_result_41_object_1);
        assert(!(tmp_truth_name_27 == -1));
        tmp_condition_result_41 = tmp_truth_name_27 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_41_object_1);
        if (tmp_condition_result_41 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_assign_source_55 = const_int_0;
        Py_INCREF(tmp_assign_source_55);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(par_args);
        tmp_expression_name_37 = par_args;
        tmp_subscript_name_11 = const_int_0;
        tmp_assign_source_55 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_37, tmp_subscript_name_11, 0);
        if (tmp_assign_source_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        {
            PyObject *old = var_idx;
            var_idx = tmp_assign_source_55;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_42;
        PyObject *tmp_operand_name_5;
        PyObject *tmp_isinstance_inst_7;
        PyObject *tmp_isinstance_cls_7;
        CHECK_OBJECT(var_idx);
        tmp_isinstance_inst_7 = var_idx;
        tmp_isinstance_cls_7 = (PyObject *)&PyLong_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_7, tmp_isinstance_cls_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 582;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_5 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 582;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_42 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_42 == NUITKA_BOOL_TRUE) {
            goto branch_yes_41;
        } else {
            goto branch_no_41;
        }
    }
    branch_yes_41:;
    {
        PyObject *tmp_raise_type_7;
        tmp_raise_type_7 = PyExc_AssertionError;
        exception_type = tmp_raise_type_7;
        Py_INCREF(tmp_raise_type_7);
        exception_lineno = 582;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_41:;
    {
        PyObject *tmp_assign_source_56;
        PyObject *tmp_ord_arg_1;
        PyObject *tmp_expression_name_38;
        PyObject *tmp_subscript_name_12;
        CHECK_OBJECT(var_obj);
        tmp_expression_name_38 = var_obj;
        CHECK_OBJECT(var_idx);
        tmp_subscript_name_12 = var_idx;
        tmp_ord_arg_1 = LOOKUP_SUBSCRIPT(tmp_expression_name_38, tmp_subscript_name_12);
        if (tmp_ord_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 583;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_56 = BUILTIN_ORD(tmp_ord_arg_1);
        Py_DECREF(tmp_ord_arg_1);
        if (tmp_assign_source_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 583;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_56;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_36;
        PyObject *tmp_call_result_23;
        PyObject *tmp_args_element_name_36;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_36 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_36 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 584;
        {
            PyObject *call_args[] = {tmp_args_element_name_36};
            tmp_call_result_23 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_36, const_str_plain_append, call_args);
        }

        if (tmp_call_result_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 584;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_23);
    }
    goto loop_start_1;
    branch_no_39:;
    branch_end_35:;
    goto branch_end_34;
    branch_no_34:;
    {
        nuitka_bool tmp_condition_result_43;
        PyObject *tmp_isinstance_inst_8;
        PyObject *tmp_isinstance_cls_8;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_8 = var_obj;
        tmp_isinstance_cls_8 = (PyObject *)&PyList_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_8, tmp_isinstance_cls_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 586;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_43 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_43 == NUITKA_BOOL_TRUE) {
            goto branch_yes_42;
        } else {
            goto branch_no_42;
        }
    }
    branch_yes_42:;
    {
        nuitka_bool tmp_condition_result_44;
        PyObject *tmp_compexpr_left_34;
        PyObject *tmp_compexpr_right_34;
        PyObject *tmp_tmp_condition_result_44_object_1;
        int tmp_truth_name_28;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_34 = var_mname;
        tmp_compexpr_right_34 = const_str_plain_slice;
        tmp_tmp_condition_result_44_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_34, tmp_compexpr_right_34);
        if (tmp_tmp_condition_result_44_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 587;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_28 = CHECK_IF_TRUE(tmp_tmp_condition_result_44_object_1);
        if (tmp_truth_name_28 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_44_object_1);

            exception_lineno = 587;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_44 = tmp_truth_name_28 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_44_object_1);
        if (tmp_condition_result_44 == NUITKA_BOOL_TRUE) {
            goto branch_yes_43;
        } else {
            goto branch_no_43;
        }
    }
    branch_yes_43:;
    {
        nuitka_bool tmp_condition_result_45;
        PyObject *tmp_compexpr_left_35;
        PyObject *tmp_compexpr_right_35;
        PyObject *tmp_len_arg_5;
        PyObject *tmp_tmp_condition_result_45_object_1;
        int tmp_truth_name_29;
        CHECK_OBJECT(par_args);
        tmp_len_arg_5 = par_args;
        tmp_compexpr_left_35 = BUILTIN_LEN(tmp_len_arg_5);
        assert(!(tmp_compexpr_left_35 == NULL));
        tmp_compexpr_right_35 = const_int_pos_1;
        tmp_tmp_condition_result_45_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_35, tmp_compexpr_right_35);
        Py_DECREF(tmp_compexpr_left_35);
        assert(!(tmp_tmp_condition_result_45_object_1 == NULL));
        tmp_truth_name_29 = CHECK_IF_TRUE(tmp_tmp_condition_result_45_object_1);
        assert(!(tmp_truth_name_29 == -1));
        tmp_condition_result_45 = tmp_truth_name_29 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_45_object_1);
        if (tmp_condition_result_45 == NUITKA_BOOL_TRUE) {
            goto branch_yes_44;
        } else {
            goto branch_no_44;
        }
    }
    branch_yes_44:;
    {
        PyObject *tmp_raise_type_8;
        tmp_raise_type_8 = PyExc_AssertionError;
        exception_type = tmp_raise_type_8;
        Py_INCREF(tmp_raise_type_8);
        exception_lineno = 588;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_44:;
    {
        nuitka_bool tmp_condition_result_46;
        PyObject *tmp_operand_name_6;
        PyObject *tmp_isinstance_inst_9;
        PyObject *tmp_isinstance_cls_9;
        PyObject *tmp_expression_name_39;
        PyObject *tmp_subscript_name_13;
        CHECK_OBJECT(par_args);
        tmp_expression_name_39 = par_args;
        tmp_subscript_name_13 = const_int_0;
        tmp_isinstance_inst_9 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_39, tmp_subscript_name_13, 0);
        if (tmp_isinstance_inst_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_9 = (PyObject *)&PyLong_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_9, tmp_isinstance_cls_9);
        Py_DECREF(tmp_isinstance_inst_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_6 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_46 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_46 == NUITKA_BOOL_TRUE) {
            goto branch_yes_45;
        } else {
            goto branch_no_45;
        }
    }
    branch_yes_45:;
    {
        PyObject *tmp_raise_type_9;
        tmp_raise_type_9 = PyExc_AssertionError;
        exception_type = tmp_raise_type_9;
        Py_INCREF(tmp_raise_type_9);
        exception_lineno = 589;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_45:;
    {
        PyObject *tmp_assign_source_57;
        PyObject *tmp_expression_name_40;
        PyObject *tmp_subscript_name_14;
        PyObject *tmp_start_name_1;
        PyObject *tmp_expression_name_41;
        PyObject *tmp_subscript_name_15;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_step_name_1;
        CHECK_OBJECT(var_obj);
        tmp_expression_name_40 = var_obj;
        CHECK_OBJECT(par_args);
        tmp_expression_name_41 = par_args;
        tmp_subscript_name_15 = const_int_0;
        tmp_start_name_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_41, tmp_subscript_name_15, 0);
        if (tmp_start_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 590;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_stop_name_1 = Py_None;
        tmp_step_name_1 = Py_None;
        tmp_subscript_name_14 = MAKE_SLICEOBJ3(tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1);
        Py_DECREF(tmp_start_name_1);
        assert(!(tmp_subscript_name_14 == NULL));
        tmp_assign_source_57 = LOOKUP_SUBSCRIPT(tmp_expression_name_40, tmp_subscript_name_14);
        Py_DECREF(tmp_subscript_name_14);
        if (tmp_assign_source_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 590;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_57;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_37;
        PyObject *tmp_call_result_24;
        PyObject *tmp_args_element_name_37;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_37 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_37 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 591;
        {
            PyObject *call_args[] = {tmp_args_element_name_37};
            tmp_call_result_24 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_37, const_str_plain_append, call_args);
        }

        if (tmp_call_result_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 591;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_24);
    }
    goto loop_start_1;
    goto branch_end_43;
    branch_no_43:;
    {
        nuitka_bool tmp_condition_result_47;
        PyObject *tmp_compexpr_left_36;
        PyObject *tmp_compexpr_right_36;
        PyObject *tmp_tmp_condition_result_47_object_1;
        int tmp_truth_name_30;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_36 = var_mname;
        tmp_compexpr_right_36 = const_str_plain_join;
        tmp_tmp_condition_result_47_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_36, tmp_compexpr_right_36);
        if (tmp_tmp_condition_result_47_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 593;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_30 = CHECK_IF_TRUE(tmp_tmp_condition_result_47_object_1);
        if (tmp_truth_name_30 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_47_object_1);

            exception_lineno = 593;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_47 = tmp_truth_name_30 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_47_object_1);
        if (tmp_condition_result_47 == NUITKA_BOOL_TRUE) {
            goto branch_yes_46;
        } else {
            goto branch_no_46;
        }
    }
    branch_yes_46:;
    {
        nuitka_bool tmp_condition_result_48;
        PyObject *tmp_compexpr_left_37;
        PyObject *tmp_compexpr_right_37;
        PyObject *tmp_len_arg_6;
        PyObject *tmp_tmp_condition_result_48_object_1;
        int tmp_truth_name_31;
        CHECK_OBJECT(par_args);
        tmp_len_arg_6 = par_args;
        tmp_compexpr_left_37 = BUILTIN_LEN(tmp_len_arg_6);
        assert(!(tmp_compexpr_left_37 == NULL));
        tmp_compexpr_right_37 = const_int_pos_1;
        tmp_tmp_condition_result_48_object_1 = RICH_COMPARE_NE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_37, tmp_compexpr_right_37);
        Py_DECREF(tmp_compexpr_left_37);
        assert(!(tmp_tmp_condition_result_48_object_1 == NULL));
        tmp_truth_name_31 = CHECK_IF_TRUE(tmp_tmp_condition_result_48_object_1);
        assert(!(tmp_truth_name_31 == -1));
        tmp_condition_result_48 = tmp_truth_name_31 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_48_object_1);
        if (tmp_condition_result_48 == NUITKA_BOOL_TRUE) {
            goto branch_yes_47;
        } else {
            goto branch_no_47;
        }
    }
    branch_yes_47:;
    {
        PyObject *tmp_raise_type_10;
        tmp_raise_type_10 = PyExc_AssertionError;
        exception_type = tmp_raise_type_10;
        Py_INCREF(tmp_raise_type_10);
        exception_lineno = 594;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_47:;
    {
        nuitka_bool tmp_condition_result_49;
        PyObject *tmp_operand_name_7;
        PyObject *tmp_isinstance_inst_10;
        PyObject *tmp_isinstance_cls_10;
        PyObject *tmp_expression_name_42;
        PyObject *tmp_subscript_name_16;
        PyObject *tmp_mvar_value_16;
        CHECK_OBJECT(par_args);
        tmp_expression_name_42 = par_args;
        tmp_subscript_name_16 = const_int_0;
        tmp_isinstance_inst_10 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_42, tmp_subscript_name_16, 0);
        if (tmp_isinstance_inst_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 595;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_str);

        if (unlikely(tmp_mvar_value_16 == NULL)) {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_str);
        }

        if (tmp_mvar_value_16 == NULL) {
            Py_DECREF(tmp_isinstance_inst_10);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 26637 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 595;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_10 = tmp_mvar_value_16;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_10, tmp_isinstance_cls_10);
        Py_DECREF(tmp_isinstance_inst_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 595;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_7 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 595;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_49 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_49 == NUITKA_BOOL_TRUE) {
            goto branch_yes_48;
        } else {
            goto branch_no_48;
        }
    }
    branch_yes_48:;
    {
        PyObject *tmp_raise_type_11;
        tmp_raise_type_11 = PyExc_AssertionError;
        exception_type = tmp_raise_type_11;
        Py_INCREF(tmp_raise_type_11);
        exception_lineno = 595;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_48:;
    {
        PyObject *tmp_assign_source_58;
        PyObject *tmp_called_instance_38;
        PyObject *tmp_expression_name_43;
        PyObject *tmp_subscript_name_17;
        PyObject *tmp_args_element_name_38;
        CHECK_OBJECT(par_args);
        tmp_expression_name_43 = par_args;
        tmp_subscript_name_17 = const_int_0;
        tmp_called_instance_38 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_43, tmp_subscript_name_17, 0);
        if (tmp_called_instance_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 596;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_obj);
        tmp_args_element_name_38 = var_obj;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 596;
        {
            PyObject *call_args[] = {tmp_args_element_name_38};
            tmp_assign_source_58 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_38, const_str_plain_join, call_args);
        }

        Py_DECREF(tmp_called_instance_38);
        if (tmp_assign_source_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 596;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_58;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_39;
        PyObject *tmp_call_result_25;
        PyObject *tmp_args_element_name_39;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_39 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_39 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 597;
        {
            PyObject *call_args[] = {tmp_args_element_name_39};
            tmp_call_result_25 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_39, const_str_plain_append, call_args);
        }

        if (tmp_call_result_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_25);
    }
    goto loop_start_1;
    branch_no_46:;
    branch_end_43:;
    branch_no_42:;
    branch_end_34:;
    branch_end_32:;
    branch_end_31:;
    branch_end_30:;
    branch_end_25:;
    {
        PyObject *tmp_raise_type_12;
        PyObject *tmp_make_exception_arg_2;
        PyObject *tmp_left_name_11;
        PyObject *tmp_right_name_11;
        PyObject *tmp_tuple_element_2;
        tmp_left_name_11 = const_str_digest_151b07cf0606353e8be96c4eef43395e;
        CHECK_OBJECT(var_mname);
        tmp_tuple_element_2 = var_mname;
        tmp_right_name_11 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_2);
        PyTuple_SET_ITEM(tmp_right_name_11, 0, tmp_tuple_element_2);
        CHECK_OBJECT(var_obj);
        tmp_tuple_element_2 = var_obj;
        Py_INCREF(tmp_tuple_element_2);
        PyTuple_SET_ITEM(tmp_right_name_11, 1, tmp_tuple_element_2);
        tmp_make_exception_arg_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_11, tmp_right_name_11);
        Py_DECREF(tmp_right_name_11);
        if (tmp_make_exception_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 600;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 599;
        tmp_raise_type_12 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_NotImplementedError, tmp_make_exception_arg_2);
        Py_DECREF(tmp_make_exception_arg_2);
        assert(!(tmp_raise_type_12 == NULL));
        exception_type = tmp_raise_type_12;
        exception_lineno = 599;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    goto branch_end_24;
    branch_no_24:;
    {
        nuitka_bool tmp_condition_result_50;
        PyObject *tmp_compexpr_left_38;
        PyObject *tmp_compexpr_right_38;
        PyObject *tmp_tmp_condition_result_50_object_1;
        int tmp_truth_name_32;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_38 = var_opcode;
        tmp_compexpr_right_38 = const_int_pos_71;
        tmp_tmp_condition_result_50_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_38, tmp_compexpr_right_38);
        if (tmp_tmp_condition_result_50_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 602;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_32 = CHECK_IF_TRUE(tmp_tmp_condition_result_50_object_1);
        if (tmp_truth_name_32 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_50_object_1);

            exception_lineno = 602;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_50 = tmp_truth_name_32 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_50_object_1);
        if (tmp_condition_result_50 == NUITKA_BOOL_TRUE) {
            goto branch_yes_49;
        } else {
            goto branch_no_49;
        }
    }
    branch_yes_49:;
    {
        PyObject *tmp_assign_source_59;
        PyObject *tmp_mvar_value_17;
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_undefined);

        if (unlikely(tmp_mvar_value_17 == NULL)) {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_undefined);
        }

        if (tmp_mvar_value_17 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55679 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 603;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_assign_source_59 = tmp_mvar_value_17;
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_59;
            Py_INCREF(var_res);
            Py_XDECREF(old);
        }

    }
    CHECK_OBJECT(var_res);
    tmp_return_value = var_res;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_49;
    branch_no_49:;
    {
        nuitka_bool tmp_condition_result_51;
        PyObject *tmp_compexpr_left_39;
        PyObject *tmp_compexpr_right_39;
        PyObject *tmp_tmp_condition_result_51_object_1;
        int tmp_truth_name_33;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_39 = var_opcode;
        tmp_compexpr_right_39 = const_int_pos_72;
        tmp_tmp_condition_result_51_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_39, tmp_compexpr_right_39);
        if (tmp_tmp_condition_result_51_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_33 = CHECK_IF_TRUE(tmp_tmp_condition_result_51_object_1);
        if (tmp_truth_name_33 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_51_object_1);

            exception_lineno = 605;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_51 = tmp_truth_name_33 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_51_object_1);
        if (tmp_condition_result_51 == NUITKA_BOOL_TRUE) {
            goto branch_yes_50;
        } else {
            goto branch_no_50;
        }
    }
    branch_yes_50:;
    {
        PyObject *tmp_assign_source_60;
        PyObject *tmp_called_instance_40;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_40 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 606;
        tmp_assign_source_60 = CALL_METHOD_NO_ARGS(tmp_called_instance_40, const_str_plain_pop);
        if (tmp_assign_source_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 606;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_60;
            Py_XDECREF(old);
        }

    }
    CHECK_OBJECT(var_res);
    tmp_return_value = var_res;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_50;
    branch_no_50:;
    {
        nuitka_bool tmp_condition_result_52;
        PyObject *tmp_compexpr_left_40;
        PyObject *tmp_compexpr_right_40;
        PyObject *tmp_tmp_condition_result_52_object_1;
        int tmp_truth_name_34;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_40 = var_opcode;
        tmp_compexpr_right_40 = const_int_pos_73;
        tmp_tmp_condition_result_52_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_40, tmp_compexpr_right_40);
        if (tmp_tmp_condition_result_52_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 608;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_34 = CHECK_IF_TRUE(tmp_tmp_condition_result_52_object_1);
        if (tmp_truth_name_34 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_52_object_1);

            exception_lineno = 608;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_52 = tmp_truth_name_34 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_52_object_1);
        if (tmp_condition_result_52 == NUITKA_BOOL_TRUE) {
            goto branch_yes_51;
        } else {
            goto branch_no_51;
        }
    }
    branch_yes_51:;
    {
        PyObject *tmp_assign_source_61;
        PyObject *tmp_called_name_33;
        CHECK_OBJECT(var_u30);
        tmp_called_name_33 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 610;
        tmp_assign_source_61 = CALL_FUNCTION_NO_ARGS(tmp_called_name_33);
        if (tmp_assign_source_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 610;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_arg_count;
            var_arg_count = tmp_assign_source_61;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_62;
        PyObject *tmp_list_arg_5;
        PyObject *tmp_called_name_34;
        PyObject *tmp_args_element_name_40;
        tmp_called_name_34 = (PyObject *)&PyReversed_Type;
        // Tried code:
        {
            PyObject *tmp_assign_source_63;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_xrange_low_3;
            CHECK_OBJECT(var_arg_count);
            tmp_xrange_low_3 = var_arg_count;
            tmp_iter_arg_3 = BUILTIN_XRANGE1(tmp_xrange_low_3);
            if (tmp_iter_arg_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 612;
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                goto try_except_handler_6;
            }
            tmp_assign_source_63 = MAKE_ITERATOR(tmp_iter_arg_3);
            Py_DECREF(tmp_iter_arg_3);
            if (tmp_assign_source_63 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 612;
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                goto try_except_handler_6;
            }
            {
                PyObject *old = tmp_listcomp_3__$0;
                tmp_listcomp_3__$0 = tmp_assign_source_63;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_64;
            tmp_assign_source_64 = PyList_New(0);
            {
                PyObject *old = tmp_listcomp_3__contraction;
                tmp_listcomp_3__contraction = tmp_assign_source_64;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_97012d2548b39c788b5d47e2b83539e8_4)) {
            Py_XDECREF(cache_frame_97012d2548b39c788b5d47e2b83539e8_4);

#if _DEBUG_REFCOUNTS
            if (cache_frame_97012d2548b39c788b5d47e2b83539e8_4 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_97012d2548b39c788b5d47e2b83539e8_4 = MAKE_FUNCTION_FRAME(codeobj_97012d2548b39c788b5d47e2b83539e8, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_97012d2548b39c788b5d47e2b83539e8_4->m_type_description == NULL);
        frame_97012d2548b39c788b5d47e2b83539e8_4 = cache_frame_97012d2548b39c788b5d47e2b83539e8_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_97012d2548b39c788b5d47e2b83539e8_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_97012d2548b39c788b5d47e2b83539e8_4) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_4:;
        {
            PyObject *tmp_next_source_3;
            PyObject *tmp_assign_source_65;
            CHECK_OBJECT(tmp_listcomp_3__$0);
            tmp_next_source_3 = tmp_listcomp_3__$0;
            tmp_assign_source_65 = ITERATOR_NEXT(tmp_next_source_3);
            if (tmp_assign_source_65 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_3;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 612;
                    goto try_except_handler_7;
                }
            }

            {
                PyObject *old = tmp_listcomp_3__iter_value_0;
                tmp_listcomp_3__iter_value_0 = tmp_assign_source_65;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_66;
            CHECK_OBJECT(tmp_listcomp_3__iter_value_0);
            tmp_assign_source_66 = tmp_listcomp_3__iter_value_0;
            {
                PyObject *old = outline_2_var__;
                outline_2_var__ = tmp_assign_source_66;
                Py_INCREF(outline_2_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_3;
            PyObject *tmp_append_value_3;
            PyObject *tmp_called_instance_41;
            CHECK_OBJECT(tmp_listcomp_3__contraction);
            tmp_append_list_3 = tmp_listcomp_3__contraction;
            CHECK_OBJECT(var_stack);
            tmp_called_instance_41 = var_stack;
            frame_97012d2548b39c788b5d47e2b83539e8_4->m_frame.f_lineno = 612;
            tmp_append_value_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_41, const_str_plain_pop);
            if (tmp_append_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 612;
                type_description_2 = "oo";
                goto try_except_handler_7;
            }
            assert(PyList_Check(tmp_append_list_3));
            tmp_res = PyList_Append(tmp_append_list_3, tmp_append_value_3);
            Py_DECREF(tmp_append_value_3);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 612;
                type_description_2 = "oo";
                goto try_except_handler_7;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 612;
            type_description_2 = "oo";
            goto try_except_handler_7;
        }
        goto loop_start_4;
        loop_end_3:;
        CHECK_OBJECT(tmp_listcomp_3__contraction);
        tmp_args_element_name_40 = tmp_listcomp_3__contraction;
        Py_INCREF(tmp_args_element_name_40);
        goto try_return_handler_7;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        CHECK_OBJECT(tmp_listcomp_3__$0);
        Py_DECREF(tmp_listcomp_3__$0);
        tmp_listcomp_3__$0 = NULL;

        CHECK_OBJECT(tmp_listcomp_3__contraction);
        Py_DECREF(tmp_listcomp_3__contraction);
        tmp_listcomp_3__contraction = NULL;

        Py_XDECREF(tmp_listcomp_3__iter_value_0);
        tmp_listcomp_3__iter_value_0 = NULL;

        goto frame_return_exit_4;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_3__$0);
        Py_DECREF(tmp_listcomp_3__$0);
        tmp_listcomp_3__$0 = NULL;

        CHECK_OBJECT(tmp_listcomp_3__contraction);
        Py_DECREF(tmp_listcomp_3__contraction);
        tmp_listcomp_3__contraction = NULL;

        Py_XDECREF(tmp_listcomp_3__iter_value_0);
        tmp_listcomp_3__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto frame_exception_exit_4;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_97012d2548b39c788b5d47e2b83539e8_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_return_exit_4:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_97012d2548b39c788b5d47e2b83539e8_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_6;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_97012d2548b39c788b5d47e2b83539e8_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_97012d2548b39c788b5d47e2b83539e8_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_97012d2548b39c788b5d47e2b83539e8_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_97012d2548b39c788b5d47e2b83539e8_4, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_97012d2548b39c788b5d47e2b83539e8_4,
            type_description_2,
            outline_2_var__,
            var_stack
        );


        // Release cached frame.
        if (frame_97012d2548b39c788b5d47e2b83539e8_4 == cache_frame_97012d2548b39c788b5d47e2b83539e8_4) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_97012d2548b39c788b5d47e2b83539e8_4);
        }
        cache_frame_97012d2548b39c788b5d47e2b83539e8_4 = NULL;

        assertFrameObject(frame_97012d2548b39c788b5d47e2b83539e8_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto try_except_handler_6;
        skip_nested_handling_3:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        Py_XDECREF(outline_2_var__);
        outline_2_var__ = NULL;

        goto outline_result_3;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_2_var__);
        outline_2_var__ = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 612;
        goto frame_exception_exit_1;
        outline_result_3:;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 611;
        tmp_list_arg_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_34, tmp_args_element_name_40);
        Py_DECREF(tmp_args_element_name_40);
        if (tmp_list_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 611;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_62 = PySequence_List(tmp_list_arg_5);
        Py_DECREF(tmp_list_arg_5);
        if (tmp_assign_source_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 611;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_args;
            par_args = tmp_assign_source_62;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_67;
        PyObject *tmp_called_instance_42;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_42 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 613;
        tmp_assign_source_67 = CALL_METHOD_NO_ARGS(tmp_called_instance_42, const_str_plain_pop);
        if (tmp_assign_source_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_67;
            Py_XDECREF(old);
        }

    }
    goto branch_end_51;
    branch_no_51:;
    {
        nuitka_bool tmp_condition_result_53;
        PyObject *tmp_compexpr_left_41;
        PyObject *tmp_compexpr_right_41;
        PyObject *tmp_tmp_condition_result_53_object_1;
        int tmp_truth_name_35;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_41 = var_opcode;
        tmp_compexpr_right_41 = const_int_pos_74;
        tmp_tmp_condition_result_53_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_41, tmp_compexpr_right_41);
        if (tmp_tmp_condition_result_53_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_35 = CHECK_IF_TRUE(tmp_tmp_condition_result_53_object_1);
        if (tmp_truth_name_35 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_53_object_1);

            exception_lineno = 614;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_53 = tmp_truth_name_35 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_53_object_1);
        if (tmp_condition_result_53 == NUITKA_BOOL_TRUE) {
            goto branch_yes_52;
        } else {
            goto branch_no_52;
        }
    }
    branch_yes_52:;
    {
        PyObject *tmp_assign_source_68;
        PyObject *tmp_called_name_35;
        CHECK_OBJECT(var_u30);
        tmp_called_name_35 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 615;
        tmp_assign_source_68 = CALL_FUNCTION_NO_ARGS(tmp_called_name_35);
        if (tmp_assign_source_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 615;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_68;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_69;
        PyObject *tmp_called_name_36;
        CHECK_OBJECT(var_u30);
        tmp_called_name_36 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 616;
        tmp_assign_source_69 = CALL_FUNCTION_NO_ARGS(tmp_called_name_36);
        if (tmp_assign_source_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 616;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_arg_count;
            var_arg_count = tmp_assign_source_69;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_70;
        PyObject *tmp_list_arg_6;
        PyObject *tmp_called_name_37;
        PyObject *tmp_args_element_name_41;
        tmp_called_name_37 = (PyObject *)&PyReversed_Type;
        // Tried code:
        {
            PyObject *tmp_assign_source_71;
            PyObject *tmp_iter_arg_4;
            PyObject *tmp_xrange_low_4;
            CHECK_OBJECT(var_arg_count);
            tmp_xrange_low_4 = var_arg_count;
            tmp_iter_arg_4 = BUILTIN_XRANGE1(tmp_xrange_low_4);
            if (tmp_iter_arg_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 618;
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                goto try_except_handler_8;
            }
            tmp_assign_source_71 = MAKE_ITERATOR(tmp_iter_arg_4);
            Py_DECREF(tmp_iter_arg_4);
            if (tmp_assign_source_71 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 618;
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                goto try_except_handler_8;
            }
            {
                PyObject *old = tmp_listcomp_4__$0;
                tmp_listcomp_4__$0 = tmp_assign_source_71;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_72;
            tmp_assign_source_72 = PyList_New(0);
            {
                PyObject *old = tmp_listcomp_4__contraction;
                tmp_listcomp_4__contraction = tmp_assign_source_72;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_bbb0887acc5c1e2b70b29edf31263a1f_5)) {
            Py_XDECREF(cache_frame_bbb0887acc5c1e2b70b29edf31263a1f_5);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bbb0887acc5c1e2b70b29edf31263a1f_5 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bbb0887acc5c1e2b70b29edf31263a1f_5 = MAKE_FUNCTION_FRAME(codeobj_bbb0887acc5c1e2b70b29edf31263a1f, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bbb0887acc5c1e2b70b29edf31263a1f_5->m_type_description == NULL);
        frame_bbb0887acc5c1e2b70b29edf31263a1f_5 = cache_frame_bbb0887acc5c1e2b70b29edf31263a1f_5;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bbb0887acc5c1e2b70b29edf31263a1f_5);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bbb0887acc5c1e2b70b29edf31263a1f_5) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_5:;
        {
            PyObject *tmp_next_source_4;
            PyObject *tmp_assign_source_73;
            CHECK_OBJECT(tmp_listcomp_4__$0);
            tmp_next_source_4 = tmp_listcomp_4__$0;
            tmp_assign_source_73 = ITERATOR_NEXT(tmp_next_source_4);
            if (tmp_assign_source_73 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_4;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 618;
                    goto try_except_handler_9;
                }
            }

            {
                PyObject *old = tmp_listcomp_4__iter_value_0;
                tmp_listcomp_4__iter_value_0 = tmp_assign_source_73;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_74;
            CHECK_OBJECT(tmp_listcomp_4__iter_value_0);
            tmp_assign_source_74 = tmp_listcomp_4__iter_value_0;
            {
                PyObject *old = outline_3_var__;
                outline_3_var__ = tmp_assign_source_74;
                Py_INCREF(outline_3_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_4;
            PyObject *tmp_append_value_4;
            PyObject *tmp_called_instance_43;
            CHECK_OBJECT(tmp_listcomp_4__contraction);
            tmp_append_list_4 = tmp_listcomp_4__contraction;
            CHECK_OBJECT(var_stack);
            tmp_called_instance_43 = var_stack;
            frame_bbb0887acc5c1e2b70b29edf31263a1f_5->m_frame.f_lineno = 618;
            tmp_append_value_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_43, const_str_plain_pop);
            if (tmp_append_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 618;
                type_description_2 = "oo";
                goto try_except_handler_9;
            }
            assert(PyList_Check(tmp_append_list_4));
            tmp_res = PyList_Append(tmp_append_list_4, tmp_append_value_4);
            Py_DECREF(tmp_append_value_4);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 618;
                type_description_2 = "oo";
                goto try_except_handler_9;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 618;
            type_description_2 = "oo";
            goto try_except_handler_9;
        }
        goto loop_start_5;
        loop_end_4:;
        CHECK_OBJECT(tmp_listcomp_4__contraction);
        tmp_args_element_name_41 = tmp_listcomp_4__contraction;
        Py_INCREF(tmp_args_element_name_41);
        goto try_return_handler_9;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT(tmp_listcomp_4__$0);
        Py_DECREF(tmp_listcomp_4__$0);
        tmp_listcomp_4__$0 = NULL;

        CHECK_OBJECT(tmp_listcomp_4__contraction);
        Py_DECREF(tmp_listcomp_4__contraction);
        tmp_listcomp_4__contraction = NULL;

        Py_XDECREF(tmp_listcomp_4__iter_value_0);
        tmp_listcomp_4__iter_value_0 = NULL;

        goto frame_return_exit_5;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_4__$0);
        Py_DECREF(tmp_listcomp_4__$0);
        tmp_listcomp_4__$0 = NULL;

        CHECK_OBJECT(tmp_listcomp_4__contraction);
        Py_DECREF(tmp_listcomp_4__contraction);
        tmp_listcomp_4__contraction = NULL;

        Py_XDECREF(tmp_listcomp_4__iter_value_0);
        tmp_listcomp_4__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto frame_exception_exit_5;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bbb0887acc5c1e2b70b29edf31263a1f_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_return_exit_5:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_bbb0887acc5c1e2b70b29edf31263a1f_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_8;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bbb0887acc5c1e2b70b29edf31263a1f_5);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bbb0887acc5c1e2b70b29edf31263a1f_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bbb0887acc5c1e2b70b29edf31263a1f_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bbb0887acc5c1e2b70b29edf31263a1f_5, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bbb0887acc5c1e2b70b29edf31263a1f_5,
            type_description_2,
            outline_3_var__,
            var_stack
        );


        // Release cached frame.
        if (frame_bbb0887acc5c1e2b70b29edf31263a1f_5 == cache_frame_bbb0887acc5c1e2b70b29edf31263a1f_5) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_bbb0887acc5c1e2b70b29edf31263a1f_5);
        }
        cache_frame_bbb0887acc5c1e2b70b29edf31263a1f_5 = NULL;

        assertFrameObject(frame_bbb0887acc5c1e2b70b29edf31263a1f_5);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto try_except_handler_8;
        skip_nested_handling_4:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_8:;
        Py_XDECREF(outline_3_var__);
        outline_3_var__ = NULL;

        goto outline_result_4;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_3_var__);
        outline_3_var__ = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 618;
        goto frame_exception_exit_1;
        outline_result_4:;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 617;
        tmp_list_arg_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_37, tmp_args_element_name_41);
        Py_DECREF(tmp_args_element_name_41);
        if (tmp_list_arg_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 617;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_70 = PySequence_List(tmp_list_arg_6);
        Py_DECREF(tmp_list_arg_6);
        if (tmp_assign_source_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 617;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_args;
            par_args = tmp_assign_source_70;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_75;
        PyObject *tmp_called_instance_44;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_44 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 619;
        tmp_assign_source_75 = CALL_METHOD_NO_ARGS(tmp_called_instance_44, const_str_plain_pop);
        if (tmp_assign_source_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 619;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_75;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_76;
        PyObject *tmp_expression_name_44;
        PyObject *tmp_expression_name_45;
        PyObject *tmp_subscript_name_18;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 621;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_45 = PyCell_GET(self->m_closure[2]);
        tmp_expression_name_44 = LOOKUP_ATTRIBUTE(tmp_expression_name_45, const_str_plain_multinames);
        if (tmp_expression_name_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 621;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_18 = var_index;
        tmp_assign_source_76 = LOOKUP_SUBSCRIPT(tmp_expression_name_44, tmp_subscript_name_18);
        Py_DECREF(tmp_expression_name_44);
        if (tmp_assign_source_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 621;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_mname;
            var_mname = tmp_assign_source_76;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_54;
        PyObject *tmp_operand_name_8;
        PyObject *tmp_isinstance_inst_11;
        PyObject *tmp_isinstance_cls_11;
        PyObject *tmp_mvar_value_18;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_11 = var_obj;
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass);

        if (unlikely(tmp_mvar_value_18 == NULL)) {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass);
        }

        if (tmp_mvar_value_18 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55648 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 622;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_11 = tmp_mvar_value_18;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_11, tmp_isinstance_cls_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 622;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_8 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 622;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_54 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_54 == NUITKA_BOOL_TRUE) {
            goto branch_yes_53;
        } else {
            goto branch_no_53;
        }
    }
    branch_yes_53:;
    {
        PyObject *tmp_raise_type_13;
        tmp_raise_type_13 = PyExc_AssertionError;
        exception_type = tmp_raise_type_13;
        Py_INCREF(tmp_raise_type_13);
        exception_lineno = 622;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_53:;
    {
        PyObject *tmp_called_name_38;
        PyObject *tmp_expression_name_46;
        PyObject *tmp_call_result_26;
        PyObject *tmp_args_element_name_42;
        PyObject *tmp_called_instance_45;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_46 = var_stack;
        tmp_called_name_38 = LOOKUP_ATTRIBUTE(tmp_expression_name_46, const_str_plain_append);
        if (tmp_called_name_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 626;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_obj);
        tmp_called_instance_45 = var_obj;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 626;
        tmp_args_element_name_42 = CALL_METHOD_NO_ARGS(tmp_called_instance_45, const_str_plain_make_object);
        if (tmp_args_element_name_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_38);

            exception_lineno = 626;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 626;
        tmp_call_result_26 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_38, tmp_args_element_name_42);
        Py_DECREF(tmp_called_name_38);
        Py_DECREF(tmp_args_element_name_42);
        if (tmp_call_result_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 626;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_26);
    }
    goto branch_end_52;
    branch_no_52:;
    {
        nuitka_bool tmp_condition_result_55;
        PyObject *tmp_compexpr_left_42;
        PyObject *tmp_compexpr_right_42;
        PyObject *tmp_tmp_condition_result_55_object_1;
        int tmp_truth_name_36;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_42 = var_opcode;
        tmp_compexpr_right_42 = const_int_pos_79;
        tmp_tmp_condition_result_55_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_42, tmp_compexpr_right_42);
        if (tmp_tmp_condition_result_55_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 627;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_36 = CHECK_IF_TRUE(tmp_tmp_condition_result_55_object_1);
        if (tmp_truth_name_36 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_55_object_1);

            exception_lineno = 627;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_55 = tmp_truth_name_36 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_55_object_1);
        if (tmp_condition_result_55 == NUITKA_BOOL_TRUE) {
            goto branch_yes_54;
        } else {
            goto branch_no_54;
        }
    }
    branch_yes_54:;
    {
        PyObject *tmp_assign_source_77;
        PyObject *tmp_called_name_39;
        CHECK_OBJECT(var_u30);
        tmp_called_name_39 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 628;
        tmp_assign_source_77 = CALL_FUNCTION_NO_ARGS(tmp_called_name_39);
        if (tmp_assign_source_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 628;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_77;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_78;
        PyObject *tmp_expression_name_47;
        PyObject *tmp_expression_name_48;
        PyObject *tmp_subscript_name_19;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 629;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_48 = PyCell_GET(self->m_closure[2]);
        tmp_expression_name_47 = LOOKUP_ATTRIBUTE(tmp_expression_name_48, const_str_plain_multinames);
        if (tmp_expression_name_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_19 = var_index;
        tmp_assign_source_78 = LOOKUP_SUBSCRIPT(tmp_expression_name_47, tmp_subscript_name_19);
        Py_DECREF(tmp_expression_name_47);
        if (tmp_assign_source_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_mname;
            var_mname = tmp_assign_source_78;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_79;
        PyObject *tmp_called_name_40;
        CHECK_OBJECT(var_u30);
        tmp_called_name_40 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 630;
        tmp_assign_source_79 = CALL_FUNCTION_NO_ARGS(tmp_called_name_40);
        if (tmp_assign_source_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 630;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_arg_count;
            var_arg_count = tmp_assign_source_79;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_80;
        PyObject *tmp_list_arg_7;
        PyObject *tmp_called_name_41;
        PyObject *tmp_args_element_name_43;
        tmp_called_name_41 = (PyObject *)&PyReversed_Type;
        // Tried code:
        {
            PyObject *tmp_assign_source_81;
            PyObject *tmp_iter_arg_5;
            PyObject *tmp_xrange_low_5;
            CHECK_OBJECT(var_arg_count);
            tmp_xrange_low_5 = var_arg_count;
            tmp_iter_arg_5 = BUILTIN_XRANGE1(tmp_xrange_low_5);
            if (tmp_iter_arg_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 632;
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                goto try_except_handler_10;
            }
            tmp_assign_source_81 = MAKE_ITERATOR(tmp_iter_arg_5);
            Py_DECREF(tmp_iter_arg_5);
            if (tmp_assign_source_81 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 632;
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                goto try_except_handler_10;
            }
            {
                PyObject *old = tmp_listcomp_5__$0;
                tmp_listcomp_5__$0 = tmp_assign_source_81;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_82;
            tmp_assign_source_82 = PyList_New(0);
            {
                PyObject *old = tmp_listcomp_5__contraction;
                tmp_listcomp_5__contraction = tmp_assign_source_82;
                Py_XDECREF(old);
            }

        }
        if (isFrameUnusable(cache_frame_3b85a0a43062564d9409c85d24a80370_6)) {
            Py_XDECREF(cache_frame_3b85a0a43062564d9409c85d24a80370_6);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3b85a0a43062564d9409c85d24a80370_6 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3b85a0a43062564d9409c85d24a80370_6 = MAKE_FUNCTION_FRAME(codeobj_3b85a0a43062564d9409c85d24a80370, module_youtube_dl$swfinterp, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3b85a0a43062564d9409c85d24a80370_6->m_type_description == NULL);
        frame_3b85a0a43062564d9409c85d24a80370_6 = cache_frame_3b85a0a43062564d9409c85d24a80370_6;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3b85a0a43062564d9409c85d24a80370_6);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3b85a0a43062564d9409c85d24a80370_6) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_6:;
        {
            PyObject *tmp_next_source_5;
            PyObject *tmp_assign_source_83;
            CHECK_OBJECT(tmp_listcomp_5__$0);
            tmp_next_source_5 = tmp_listcomp_5__$0;
            tmp_assign_source_83 = ITERATOR_NEXT(tmp_next_source_5);
            if (tmp_assign_source_83 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_5;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 632;
                    goto try_except_handler_11;
                }
            }

            {
                PyObject *old = tmp_listcomp_5__iter_value_0;
                tmp_listcomp_5__iter_value_0 = tmp_assign_source_83;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_84;
            CHECK_OBJECT(tmp_listcomp_5__iter_value_0);
            tmp_assign_source_84 = tmp_listcomp_5__iter_value_0;
            {
                PyObject *old = outline_4_var__;
                outline_4_var__ = tmp_assign_source_84;
                Py_INCREF(outline_4_var__);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_5;
            PyObject *tmp_append_value_5;
            PyObject *tmp_called_instance_46;
            CHECK_OBJECT(tmp_listcomp_5__contraction);
            tmp_append_list_5 = tmp_listcomp_5__contraction;
            CHECK_OBJECT(var_stack);
            tmp_called_instance_46 = var_stack;
            frame_3b85a0a43062564d9409c85d24a80370_6->m_frame.f_lineno = 632;
            tmp_append_value_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_46, const_str_plain_pop);
            if (tmp_append_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 632;
                type_description_2 = "oo";
                goto try_except_handler_11;
            }
            assert(PyList_Check(tmp_append_list_5));
            tmp_res = PyList_Append(tmp_append_list_5, tmp_append_value_5);
            Py_DECREF(tmp_append_value_5);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 632;
                type_description_2 = "oo";
                goto try_except_handler_11;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 632;
            type_description_2 = "oo";
            goto try_except_handler_11;
        }
        goto loop_start_6;
        loop_end_5:;
        CHECK_OBJECT(tmp_listcomp_5__contraction);
        tmp_args_element_name_43 = tmp_listcomp_5__contraction;
        Py_INCREF(tmp_args_element_name_43);
        goto try_return_handler_11;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_11:;
        CHECK_OBJECT(tmp_listcomp_5__$0);
        Py_DECREF(tmp_listcomp_5__$0);
        tmp_listcomp_5__$0 = NULL;

        CHECK_OBJECT(tmp_listcomp_5__contraction);
        Py_DECREF(tmp_listcomp_5__contraction);
        tmp_listcomp_5__contraction = NULL;

        Py_XDECREF(tmp_listcomp_5__iter_value_0);
        tmp_listcomp_5__iter_value_0 = NULL;

        goto frame_return_exit_6;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_5__$0);
        Py_DECREF(tmp_listcomp_5__$0);
        tmp_listcomp_5__$0 = NULL;

        CHECK_OBJECT(tmp_listcomp_5__contraction);
        Py_DECREF(tmp_listcomp_5__contraction);
        tmp_listcomp_5__contraction = NULL;

        Py_XDECREF(tmp_listcomp_5__iter_value_0);
        tmp_listcomp_5__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto frame_exception_exit_6;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3b85a0a43062564d9409c85d24a80370_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_return_exit_6:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_3b85a0a43062564d9409c85d24a80370_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_10;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3b85a0a43062564d9409c85d24a80370_6);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3b85a0a43062564d9409c85d24a80370_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3b85a0a43062564d9409c85d24a80370_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3b85a0a43062564d9409c85d24a80370_6, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3b85a0a43062564d9409c85d24a80370_6,
            type_description_2,
            outline_4_var__,
            var_stack
        );


        // Release cached frame.
        if (frame_3b85a0a43062564d9409c85d24a80370_6 == cache_frame_3b85a0a43062564d9409c85d24a80370_6) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_3b85a0a43062564d9409c85d24a80370_6);
        }
        cache_frame_3b85a0a43062564d9409c85d24a80370_6 = NULL;

        assertFrameObject(frame_3b85a0a43062564d9409c85d24a80370_6);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto try_except_handler_10;
        skip_nested_handling_5:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_10:;
        Py_XDECREF(outline_4_var__);
        outline_4_var__ = NULL;

        goto outline_result_5;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_4_var__);
        outline_4_var__ = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 632;
        goto frame_exception_exit_1;
        outline_result_5:;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 631;
        tmp_list_arg_7 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_41, tmp_args_element_name_43);
        Py_DECREF(tmp_args_element_name_43);
        if (tmp_list_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 631;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_80 = PySequence_List(tmp_list_arg_7);
        Py_DECREF(tmp_list_arg_7);
        if (tmp_assign_source_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 631;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_args;
            par_args = tmp_assign_source_80;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_85;
        PyObject *tmp_called_instance_47;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_47 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 633;
        tmp_assign_source_85 = CALL_METHOD_NO_ARGS(tmp_called_instance_47, const_str_plain_pop);
        if (tmp_assign_source_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_85;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_56;
        PyObject *tmp_isinstance_inst_12;
        PyObject *tmp_isinstance_cls_12;
        PyObject *tmp_mvar_value_19;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_12 = var_obj;
        tmp_mvar_value_19 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass_Object);

        if (unlikely(tmp_mvar_value_19 == NULL)) {
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass_Object);
        }

        if (tmp_mvar_value_19 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55387 ], 38, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 634;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_12 = tmp_mvar_value_19;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_12, tmp_isinstance_cls_12);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 634;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_56 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_56 == NUITKA_BOOL_TRUE) {
            goto branch_yes_55;
        } else {
            goto branch_no_55;
        }
    }
    branch_yes_55:;
    {
        PyObject *tmp_assign_source_86;
        PyObject *tmp_called_name_42;
        PyObject *tmp_expression_name_49;
        PyObject *tmp_args_element_name_44;
        PyObject *tmp_expression_name_50;
        PyObject *tmp_args_element_name_45;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 635;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_49 = PyCell_GET(self->m_closure[2]);
        tmp_called_name_42 = LOOKUP_ATTRIBUTE(tmp_expression_name_49, const_str_plain_extract_function);
        if (tmp_called_name_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 635;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_obj);
        tmp_expression_name_50 = var_obj;
        tmp_args_element_name_44 = LOOKUP_ATTRIBUTE(tmp_expression_name_50, const_str_plain_avm_class);
        if (tmp_args_element_name_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_42);

            exception_lineno = 635;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_mname);
        tmp_args_element_name_45 = var_mname;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 635;
        {
            PyObject *call_args[] = {tmp_args_element_name_44, tmp_args_element_name_45};
            tmp_assign_source_86 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_42, call_args);
        }

        Py_DECREF(tmp_called_name_42);
        Py_DECREF(tmp_args_element_name_44);
        if (tmp_assign_source_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 635;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_func;
            var_func = tmp_assign_source_86;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_called_name_43;
        PyObject *tmp_args_element_name_46;
        CHECK_OBJECT(var_func);
        tmp_called_name_43 = var_func;
        CHECK_OBJECT(par_args);
        tmp_args_element_name_46 = par_args;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 636;
        tmp_assign_source_87 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_43, tmp_args_element_name_46);
        if (tmp_assign_source_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 636;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_87;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_57;
        PyObject *tmp_compexpr_left_43;
        PyObject *tmp_compexpr_right_43;
        PyObject *tmp_mvar_value_20;
        CHECK_OBJECT(var_res);
        tmp_compexpr_left_43 = var_res;
        tmp_mvar_value_20 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_undefined);

        if (unlikely(tmp_mvar_value_20 == NULL)) {
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_undefined);
        }

        if (tmp_mvar_value_20 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55679 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 637;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_43 = tmp_mvar_value_20;
        tmp_condition_result_57 = (tmp_compexpr_left_43 != tmp_compexpr_right_43) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_57 == NUITKA_BOOL_TRUE) {
            goto branch_yes_56;
        } else {
            goto branch_no_56;
        }
    }
    branch_yes_56:;
    {
        PyObject *tmp_raise_type_14;
        tmp_raise_type_14 = PyExc_AssertionError;
        exception_type = tmp_raise_type_14;
        Py_INCREF(tmp_raise_type_14);
        exception_lineno = 637;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_56:;
    goto loop_start_1;
    branch_no_55:;
    {
        nuitka_bool tmp_condition_result_58;
        PyObject *tmp_isinstance_inst_13;
        PyObject *tmp_isinstance_cls_13;
        PyObject *tmp_mvar_value_21;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_13 = var_obj;
        tmp_mvar_value_21 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__ScopeDict);

        if (unlikely(tmp_mvar_value_21 == NULL)) {
            tmp_mvar_value_21 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__ScopeDict);
        }

        if (tmp_mvar_value_21 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55355 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 639;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_13 = tmp_mvar_value_21;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_13, tmp_isinstance_cls_13);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 639;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_58 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_58 == NUITKA_BOOL_TRUE) {
            goto branch_yes_57;
        } else {
            goto branch_no_57;
        }
    }
    branch_yes_57:;
    {
        nuitka_bool tmp_condition_result_59;
        PyObject *tmp_compexpr_left_44;
        PyObject *tmp_compexpr_right_44;
        PyObject *tmp_expression_name_51;
        PyObject *tmp_expression_name_52;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_44 = var_mname;
        CHECK_OBJECT(var_obj);
        tmp_expression_name_52 = var_obj;
        tmp_expression_name_51 = LOOKUP_ATTRIBUTE(tmp_expression_name_52, const_str_plain_avm_class);
        if (tmp_expression_name_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 640;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_44 = LOOKUP_ATTRIBUTE(tmp_expression_name_51, const_str_plain_method_names);
        Py_DECREF(tmp_expression_name_51);
        if (tmp_compexpr_right_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 640;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_44, tmp_compexpr_left_44);
        Py_DECREF(tmp_compexpr_right_44);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 640;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_59 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_59 == NUITKA_BOOL_TRUE) {
            goto branch_yes_58;
        } else {
            goto branch_no_58;
        }
    }
    branch_yes_58:;
    {
        PyObject *tmp_raise_type_15;
        tmp_raise_type_15 = PyExc_AssertionError;
        exception_type = tmp_raise_type_15;
        Py_INCREF(tmp_raise_type_15);
        exception_lineno = 640;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_58:;
    {
        PyObject *tmp_assign_source_88;
        PyObject *tmp_called_name_44;
        PyObject *tmp_expression_name_53;
        PyObject *tmp_args_element_name_47;
        PyObject *tmp_expression_name_54;
        PyObject *tmp_args_element_name_48;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 641;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_53 = PyCell_GET(self->m_closure[2]);
        tmp_called_name_44 = LOOKUP_ATTRIBUTE(tmp_expression_name_53, const_str_plain_extract_function);
        if (tmp_called_name_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_obj);
        tmp_expression_name_54 = var_obj;
        tmp_args_element_name_47 = LOOKUP_ATTRIBUTE(tmp_expression_name_54, const_str_plain_avm_class);
        if (tmp_args_element_name_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_44);

            exception_lineno = 641;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_mname);
        tmp_args_element_name_48 = var_mname;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 641;
        {
            PyObject *call_args[] = {tmp_args_element_name_47, tmp_args_element_name_48};
            tmp_assign_source_88 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_44, call_args);
        }

        Py_DECREF(tmp_called_name_44);
        Py_DECREF(tmp_args_element_name_47);
        if (tmp_assign_source_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_func;
            var_func = tmp_assign_source_88;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_89;
        PyObject *tmp_called_name_45;
        PyObject *tmp_args_element_name_49;
        CHECK_OBJECT(var_func);
        tmp_called_name_45 = var_func;
        CHECK_OBJECT(par_args);
        tmp_args_element_name_49 = par_args;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 642;
        tmp_assign_source_89 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_45, tmp_args_element_name_49);
        if (tmp_assign_source_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 642;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_89;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_60;
        PyObject *tmp_compexpr_left_45;
        PyObject *tmp_compexpr_right_45;
        PyObject *tmp_mvar_value_22;
        CHECK_OBJECT(var_res);
        tmp_compexpr_left_45 = var_res;
        tmp_mvar_value_22 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_undefined);

        if (unlikely(tmp_mvar_value_22 == NULL)) {
            tmp_mvar_value_22 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_undefined);
        }

        if (tmp_mvar_value_22 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55679 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 643;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_45 = tmp_mvar_value_22;
        tmp_condition_result_60 = (tmp_compexpr_left_45 != tmp_compexpr_right_45) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_60 == NUITKA_BOOL_TRUE) {
            goto branch_yes_59;
        } else {
            goto branch_no_59;
        }
    }
    branch_yes_59:;
    {
        PyObject *tmp_raise_type_16;
        tmp_raise_type_16 = PyExc_AssertionError;
        exception_type = tmp_raise_type_16;
        Py_INCREF(tmp_raise_type_16);
        exception_lineno = 643;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_59:;
    goto loop_start_1;
    branch_no_57:;
    {
        nuitka_bool tmp_condition_result_61;
        PyObject *tmp_compexpr_left_46;
        PyObject *tmp_compexpr_right_46;
        PyObject *tmp_tmp_condition_result_61_object_1;
        int tmp_truth_name_37;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_46 = var_mname;
        tmp_compexpr_right_46 = const_str_plain_reverse;
        tmp_tmp_condition_result_61_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_46, tmp_compexpr_right_46);
        if (tmp_tmp_condition_result_61_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 645;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_37 = CHECK_IF_TRUE(tmp_tmp_condition_result_61_object_1);
        if (tmp_truth_name_37 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_61_object_1);

            exception_lineno = 645;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_61 = tmp_truth_name_37 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_61_object_1);
        if (tmp_condition_result_61 == NUITKA_BOOL_TRUE) {
            goto branch_yes_60;
        } else {
            goto branch_no_60;
        }
    }
    branch_yes_60:;
    {
        nuitka_bool tmp_condition_result_62;
        PyObject *tmp_operand_name_9;
        PyObject *tmp_isinstance_inst_14;
        PyObject *tmp_isinstance_cls_14;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_14 = var_obj;
        tmp_isinstance_cls_14 = (PyObject *)&PyList_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_14, tmp_isinstance_cls_14);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 646;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_9 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 646;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_62 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_62 == NUITKA_BOOL_TRUE) {
            goto branch_yes_61;
        } else {
            goto branch_no_61;
        }
    }
    branch_yes_61:;
    {
        PyObject *tmp_raise_type_17;
        tmp_raise_type_17 = PyExc_AssertionError;
        exception_type = tmp_raise_type_17;
        Py_INCREF(tmp_raise_type_17);
        exception_lineno = 646;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_61:;
    {
        PyObject *tmp_called_instance_48;
        PyObject *tmp_call_result_27;
        CHECK_OBJECT(var_obj);
        tmp_called_instance_48 = var_obj;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 647;
        tmp_call_result_27 = CALL_METHOD_NO_ARGS(tmp_called_instance_48, const_str_plain_reverse);
        if (tmp_call_result_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_27);
    }
    goto branch_end_60;
    branch_no_60:;
    {
        PyObject *tmp_raise_type_18;
        PyObject *tmp_make_exception_arg_3;
        PyObject *tmp_left_name_12;
        PyObject *tmp_right_name_12;
        PyObject *tmp_tuple_element_3;
        tmp_left_name_12 = const_str_digest_4a6c0ebe6af711fff9c22fed4b3bb8a3;
        CHECK_OBJECT(var_mname);
        tmp_tuple_element_3 = var_mname;
        tmp_right_name_12 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_3);
        PyTuple_SET_ITEM(tmp_right_name_12, 0, tmp_tuple_element_3);
        CHECK_OBJECT(var_obj);
        tmp_tuple_element_3 = var_obj;
        Py_INCREF(tmp_tuple_element_3);
        PyTuple_SET_ITEM(tmp_right_name_12, 1, tmp_tuple_element_3);
        tmp_make_exception_arg_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_12, tmp_right_name_12);
        Py_DECREF(tmp_right_name_12);
        if (tmp_make_exception_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 650;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 649;
        tmp_raise_type_18 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_NotImplementedError, tmp_make_exception_arg_3);
        Py_DECREF(tmp_make_exception_arg_3);
        assert(!(tmp_raise_type_18 == NULL));
        exception_type = tmp_raise_type_18;
        exception_lineno = 649;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_end_60:;
    goto branch_end_54;
    branch_no_54:;
    {
        nuitka_bool tmp_condition_result_63;
        PyObject *tmp_compexpr_left_47;
        PyObject *tmp_compexpr_right_47;
        PyObject *tmp_tmp_condition_result_63_object_1;
        int tmp_truth_name_38;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_47 = var_opcode;
        tmp_compexpr_right_47 = const_int_pos_86;
        tmp_tmp_condition_result_63_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_47, tmp_compexpr_right_47);
        if (tmp_tmp_condition_result_63_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 652;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_38 = CHECK_IF_TRUE(tmp_tmp_condition_result_63_object_1);
        if (tmp_truth_name_38 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_63_object_1);

            exception_lineno = 652;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_63 = tmp_truth_name_38 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_63_object_1);
        if (tmp_condition_result_63 == NUITKA_BOOL_TRUE) {
            goto branch_yes_62;
        } else {
            goto branch_no_62;
        }
    }
    branch_yes_62:;
    {
        PyObject *tmp_assign_source_90;
        PyObject *tmp_called_name_46;
        CHECK_OBJECT(var_u30);
        tmp_called_name_46 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 653;
        tmp_assign_source_90 = CALL_FUNCTION_NO_ARGS(tmp_called_name_46);
        if (tmp_assign_source_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 653;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_arg_count;
            var_arg_count = tmp_assign_source_90;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_91;
        tmp_assign_source_91 = PyList_New(0);
        {
            PyObject *old = var_arr;
            var_arr = tmp_assign_source_91;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_92;
        PyObject *tmp_iter_arg_6;
        PyObject *tmp_xrange_low_6;
        CHECK_OBJECT(var_arg_count);
        tmp_xrange_low_6 = var_arg_count;
        tmp_iter_arg_6 = BUILTIN_XRANGE1(tmp_xrange_low_6);
        if (tmp_iter_arg_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 655;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_92 = MAKE_ITERATOR(tmp_iter_arg_6);
        Py_DECREF(tmp_iter_arg_6);
        if (tmp_assign_source_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 655;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = tmp_for_loop_1__for_iterator;
            tmp_for_loop_1__for_iterator = tmp_assign_source_92;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_7:;
    {
        PyObject *tmp_next_source_6;
        PyObject *tmp_assign_source_93;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_6 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_93 = ITERATOR_NEXT(tmp_next_source_6);
        if (tmp_assign_source_93 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_6;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ocooooooooooooooooooooooooooccc";
                exception_lineno = 655;
                goto try_except_handler_12;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_93;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_94;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_94 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_94;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_47;
        PyObject *tmp_expression_name_55;
        PyObject *tmp_call_result_28;
        PyObject *tmp_args_element_name_50;
        PyObject *tmp_called_instance_49;
        CHECK_OBJECT(var_arr);
        tmp_expression_name_55 = var_arr;
        tmp_called_name_47 = LOOKUP_ATTRIBUTE(tmp_expression_name_55, const_str_plain_append);
        if (tmp_called_name_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 656;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto try_except_handler_12;
        }
        CHECK_OBJECT(var_stack);
        tmp_called_instance_49 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 656;
        tmp_args_element_name_50 = CALL_METHOD_NO_ARGS(tmp_called_instance_49, const_str_plain_pop);
        if (tmp_args_element_name_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_47);

            exception_lineno = 656;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto try_except_handler_12;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 656;
        tmp_call_result_28 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_47, tmp_args_element_name_50);
        Py_DECREF(tmp_called_name_47);
        Py_DECREF(tmp_args_element_name_50);
        if (tmp_call_result_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 656;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto try_except_handler_12;
        }
        Py_DECREF(tmp_call_result_28);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 655;
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto try_except_handler_12;
    }
    goto loop_start_7;
    loop_end_6:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_95;
        PyObject *tmp_expression_name_56;
        PyObject *tmp_subscript_name_20;
        CHECK_OBJECT(var_arr);
        tmp_expression_name_56 = var_arr;
        tmp_subscript_name_20 = const_slice_none_none_int_neg_1;
        tmp_assign_source_95 = LOOKUP_SUBSCRIPT(tmp_expression_name_56, tmp_subscript_name_20);
        if (tmp_assign_source_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 657;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_arr;
            assert(old != NULL);
            var_arr = tmp_assign_source_95;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_50;
        PyObject *tmp_call_result_29;
        PyObject *tmp_args_element_name_51;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_50 = var_stack;
        CHECK_OBJECT(var_arr);
        tmp_args_element_name_51 = var_arr;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 658;
        {
            PyObject *call_args[] = {tmp_args_element_name_51};
            tmp_call_result_29 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_50, const_str_plain_append, call_args);
        }

        if (tmp_call_result_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 658;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_29);
    }
    goto branch_end_62;
    branch_no_62:;
    {
        nuitka_bool tmp_condition_result_64;
        PyObject *tmp_compexpr_left_48;
        PyObject *tmp_compexpr_right_48;
        PyObject *tmp_tmp_condition_result_64_object_1;
        int tmp_truth_name_39;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_48 = var_opcode;
        tmp_compexpr_right_48 = const_int_pos_93;
        tmp_tmp_condition_result_64_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_48, tmp_compexpr_right_48);
        if (tmp_tmp_condition_result_64_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 659;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_39 = CHECK_IF_TRUE(tmp_tmp_condition_result_64_object_1);
        if (tmp_truth_name_39 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_64_object_1);

            exception_lineno = 659;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_64 = tmp_truth_name_39 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_64_object_1);
        if (tmp_condition_result_64 == NUITKA_BOOL_TRUE) {
            goto branch_yes_63;
        } else {
            goto branch_no_63;
        }
    }
    branch_yes_63:;
    {
        PyObject *tmp_assign_source_96;
        PyObject *tmp_called_name_48;
        CHECK_OBJECT(var_u30);
        tmp_called_name_48 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 660;
        tmp_assign_source_96 = CALL_FUNCTION_NO_ARGS(tmp_called_name_48);
        if (tmp_assign_source_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 660;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_96;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_97;
        PyObject *tmp_expression_name_57;
        PyObject *tmp_expression_name_58;
        PyObject *tmp_subscript_name_21;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 661;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_58 = PyCell_GET(self->m_closure[2]);
        tmp_expression_name_57 = LOOKUP_ATTRIBUTE(tmp_expression_name_58, const_str_plain_multinames);
        if (tmp_expression_name_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 661;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_21 = var_index;
        tmp_assign_source_97 = LOOKUP_SUBSCRIPT(tmp_expression_name_57, tmp_subscript_name_21);
        Py_DECREF(tmp_expression_name_57);
        if (tmp_assign_source_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 661;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_mname;
            var_mname = tmp_assign_source_97;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_assign_source_98;
        tmp_assign_source_98 = NUITKA_BOOL_FALSE;
        tmp_for_loop_2__break_indicator = tmp_assign_source_98;
    }
    {
        PyObject *tmp_assign_source_99;
        PyObject *tmp_iter_arg_7;
        PyObject *tmp_called_name_49;
        PyObject *tmp_args_element_name_52;
        tmp_called_name_49 = (PyObject *)&PyReversed_Type;
        CHECK_OBJECT(var_scopes);
        tmp_args_element_name_52 = var_scopes;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 662;
        tmp_iter_arg_7 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_49, tmp_args_element_name_52);
        if (tmp_iter_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 662;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_99 = MAKE_ITERATOR(tmp_iter_arg_7);
        Py_DECREF(tmp_iter_arg_7);
        if (tmp_assign_source_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 662;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = tmp_for_loop_2__for_iterator;
            tmp_for_loop_2__for_iterator = tmp_assign_source_99;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_8:;
    // Tried code:
    {
        PyObject *tmp_assign_source_100;
        PyObject *tmp_value_name_1;
        CHECK_OBJECT(tmp_for_loop_2__for_iterator);
        tmp_value_name_1 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_100 = ITERATOR_NEXT(tmp_value_name_1);
        if (tmp_assign_source_100 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ocooooooooooooooooooooooooooccc";
            exception_lineno = 662;
            goto try_except_handler_14;
        }
        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_100;
            Py_XDECREF(old);
        }

    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_65;
        PyObject *tmp_compexpr_left_49;
        PyObject *tmp_compexpr_right_49;
        tmp_compexpr_left_49 = exception_keeper_type_12;
        tmp_compexpr_right_49 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_49, tmp_compexpr_right_49);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            Py_DECREF(exception_keeper_type_12);
            Py_XDECREF(exception_keeper_value_12);
            Py_XDECREF(exception_keeper_tb_12);

            exception_lineno = 662;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto try_except_handler_13;
        }
        tmp_condition_result_65 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_65 == NUITKA_BOOL_TRUE) {
            goto branch_yes_64;
        } else {
            goto branch_no_64;
        }
    }
    branch_yes_64:;
    {
        nuitka_bool tmp_assign_source_101;
        tmp_assign_source_101 = NUITKA_BOOL_TRUE;
        tmp_for_loop_2__break_indicator = tmp_assign_source_101;
    }
    Py_DECREF(exception_keeper_type_12);
    Py_XDECREF(exception_keeper_value_12);
    Py_XDECREF(exception_keeper_tb_12);
    goto loop_end_7;
    goto branch_end_64;
    branch_no_64:;
    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto try_except_handler_13;
    branch_end_64:;
    // End of try:
    try_end_2:;
    {
        PyObject *tmp_assign_source_102;
        CHECK_OBJECT(tmp_for_loop_2__iter_value);
        tmp_assign_source_102 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_s;
            var_s = tmp_assign_source_102;
            Py_INCREF(var_s);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_66;
        PyObject *tmp_compexpr_left_50;
        PyObject *tmp_compexpr_right_50;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_50 = var_mname;
        CHECK_OBJECT(var_s);
        tmp_compexpr_right_50 = var_s;
        tmp_res = PySequence_Contains(tmp_compexpr_right_50, tmp_compexpr_left_50);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 663;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto try_except_handler_13;
        }
        tmp_condition_result_66 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_66 == NUITKA_BOOL_TRUE) {
            goto branch_yes_65;
        } else {
            goto branch_no_65;
        }
    }
    branch_yes_65:;
    {
        PyObject *tmp_assign_source_103;
        CHECK_OBJECT(var_s);
        tmp_assign_source_103 = var_s;
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_103;
            Py_INCREF(var_res);
            Py_XDECREF(old);
        }

    }
    goto loop_end_7;
    branch_no_65:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 662;
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto try_except_handler_13;
    }
    goto loop_start_8;
    loop_end_7:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_67;
        nuitka_bool tmp_compexpr_left_51;
        nuitka_bool tmp_compexpr_right_51;
        assert(tmp_for_loop_2__break_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_51 = tmp_for_loop_2__break_indicator;
        tmp_compexpr_right_51 = NUITKA_BOOL_TRUE;
        tmp_condition_result_67 = (tmp_compexpr_left_51 == tmp_compexpr_right_51) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_67 == NUITKA_BOOL_TRUE) {
            goto branch_yes_66;
        } else {
            goto branch_no_66;
        }
    }
    branch_yes_66:;
    {
        PyObject *tmp_assign_source_104;
        PyObject *tmp_expression_name_59;
        PyObject *tmp_subscript_name_22;
        CHECK_OBJECT(var_scopes);
        tmp_expression_name_59 = var_scopes;
        tmp_subscript_name_22 = const_int_0;
        tmp_assign_source_104 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_59, tmp_subscript_name_22, 0);
        if (tmp_assign_source_104 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 667;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_104;
            Py_XDECREF(old);
        }

    }
    branch_no_66:;
    {
        nuitka_bool tmp_condition_result_68;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_52;
        PyObject *tmp_compexpr_right_52;
        PyObject *tmp_compexpr_left_53;
        PyObject *tmp_compexpr_right_53;
        PyObject *tmp_mvar_value_23;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_52 = var_mname;
        if (var_res == NULL) {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "res");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 668;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_52 = var_res;
        tmp_res = PySequence_Contains(tmp_compexpr_right_52, tmp_compexpr_left_52);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 668;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_53 = var_mname;
        tmp_mvar_value_23 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__builtin_classes);

        if (unlikely(tmp_mvar_value_23 == NULL)) {
            tmp_mvar_value_23 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__builtin_classes);
        }

        if (tmp_mvar_value_23 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55859 ], 38, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 668;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_53 = tmp_mvar_value_23;
        tmp_res = PySequence_Contains(tmp_compexpr_right_53, tmp_compexpr_left_53);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 668;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_68 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_68 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_68 == NUITKA_BOOL_TRUE) {
            goto branch_yes_67;
        } else {
            goto branch_no_67;
        }
    }
    branch_yes_67:;
    {
        PyObject *tmp_called_name_50;
        PyObject *tmp_expression_name_60;
        PyObject *tmp_call_result_30;
        PyObject *tmp_args_element_name_53;
        PyObject *tmp_expression_name_61;
        PyObject *tmp_mvar_value_24;
        PyObject *tmp_subscript_name_23;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_60 = var_stack;
        tmp_called_name_50 = LOOKUP_ATTRIBUTE(tmp_expression_name_60, const_str_plain_append);
        if (tmp_called_name_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 669;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_24 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__builtin_classes);

        if (unlikely(tmp_mvar_value_24 == NULL)) {
            tmp_mvar_value_24 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__builtin_classes);
        }

        if (tmp_mvar_value_24 == NULL) {
            Py_DECREF(tmp_called_name_50);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55859 ], 38, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 669;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_61 = tmp_mvar_value_24;
        CHECK_OBJECT(var_mname);
        tmp_subscript_name_23 = var_mname;
        tmp_args_element_name_53 = LOOKUP_SUBSCRIPT(tmp_expression_name_61, tmp_subscript_name_23);
        if (tmp_args_element_name_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_50);

            exception_lineno = 669;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 669;
        tmp_call_result_30 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_50, tmp_args_element_name_53);
        Py_DECREF(tmp_called_name_50);
        Py_DECREF(tmp_args_element_name_53);
        if (tmp_call_result_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 669;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_30);
    }
    goto branch_end_67;
    branch_no_67:;
    {
        PyObject *tmp_called_name_51;
        PyObject *tmp_expression_name_62;
        PyObject *tmp_call_result_31;
        PyObject *tmp_args_element_name_54;
        PyObject *tmp_expression_name_63;
        PyObject *tmp_subscript_name_24;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_62 = var_stack;
        tmp_called_name_51 = LOOKUP_ATTRIBUTE(tmp_expression_name_62, const_str_plain_append);
        if (tmp_called_name_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 671;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (var_res == NULL) {
            Py_DECREF(tmp_called_name_51);
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "res");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 671;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_63 = var_res;
        CHECK_OBJECT(var_mname);
        tmp_subscript_name_24 = var_mname;
        tmp_args_element_name_54 = LOOKUP_SUBSCRIPT(tmp_expression_name_63, tmp_subscript_name_24);
        if (tmp_args_element_name_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_51);

            exception_lineno = 671;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 671;
        tmp_call_result_31 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_51, tmp_args_element_name_54);
        Py_DECREF(tmp_called_name_51);
        Py_DECREF(tmp_args_element_name_54);
        if (tmp_call_result_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 671;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_31);
    }
    branch_end_67:;
    goto branch_end_63;
    branch_no_63:;
    {
        nuitka_bool tmp_condition_result_69;
        PyObject *tmp_compexpr_left_54;
        PyObject *tmp_compexpr_right_54;
        PyObject *tmp_tmp_condition_result_69_object_1;
        int tmp_truth_name_40;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_54 = var_opcode;
        tmp_compexpr_right_54 = const_int_pos_94;
        tmp_tmp_condition_result_69_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_54, tmp_compexpr_right_54);
        if (tmp_tmp_condition_result_69_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 672;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_40 = CHECK_IF_TRUE(tmp_tmp_condition_result_69_object_1);
        if (tmp_truth_name_40 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_69_object_1);

            exception_lineno = 672;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_69 = tmp_truth_name_40 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_69_object_1);
        if (tmp_condition_result_69 == NUITKA_BOOL_TRUE) {
            goto branch_yes_68;
        } else {
            goto branch_no_68;
        }
    }
    branch_yes_68:;
    {
        PyObject *tmp_assign_source_105;
        PyObject *tmp_called_name_52;
        CHECK_OBJECT(var_u30);
        tmp_called_name_52 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 673;
        tmp_assign_source_105 = CALL_FUNCTION_NO_ARGS(tmp_called_name_52);
        if (tmp_assign_source_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 673;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_105;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_106;
        PyObject *tmp_expression_name_64;
        PyObject *tmp_expression_name_65;
        PyObject *tmp_subscript_name_25;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 674;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_65 = PyCell_GET(self->m_closure[2]);
        tmp_expression_name_64 = LOOKUP_ATTRIBUTE(tmp_expression_name_65, const_str_plain_multinames);
        if (tmp_expression_name_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 674;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_25 = var_index;
        tmp_assign_source_106 = LOOKUP_SUBSCRIPT(tmp_expression_name_64, tmp_subscript_name_25);
        Py_DECREF(tmp_expression_name_64);
        if (tmp_assign_source_106 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 674;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_mname;
            var_mname = tmp_assign_source_106;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_assign_source_107;
        tmp_assign_source_107 = NUITKA_BOOL_FALSE;
        tmp_for_loop_3__break_indicator = tmp_assign_source_107;
    }
    {
        PyObject *tmp_assign_source_108;
        PyObject *tmp_iter_arg_8;
        PyObject *tmp_called_name_53;
        PyObject *tmp_args_element_name_55;
        tmp_called_name_53 = (PyObject *)&PyReversed_Type;
        CHECK_OBJECT(var_scopes);
        tmp_args_element_name_55 = var_scopes;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 675;
        tmp_iter_arg_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_53, tmp_args_element_name_55);
        if (tmp_iter_arg_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 675;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_108 = MAKE_ITERATOR(tmp_iter_arg_8);
        Py_DECREF(tmp_iter_arg_8);
        if (tmp_assign_source_108 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 675;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = tmp_for_loop_3__for_iterator;
            tmp_for_loop_3__for_iterator = tmp_assign_source_108;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_9:;
    // Tried code:
    {
        PyObject *tmp_assign_source_109;
        PyObject *tmp_value_name_2;
        CHECK_OBJECT(tmp_for_loop_3__for_iterator);
        tmp_value_name_2 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_109 = ITERATOR_NEXT(tmp_value_name_2);
        if (tmp_assign_source_109 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ocooooooooooooooooooooooooooccc";
            exception_lineno = 675;
            goto try_except_handler_16;
        }
        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_109;
            Py_XDECREF(old);
        }

    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_70;
        PyObject *tmp_compexpr_left_55;
        PyObject *tmp_compexpr_right_55;
        tmp_compexpr_left_55 = exception_keeper_type_14;
        tmp_compexpr_right_55 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_55, tmp_compexpr_right_55);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            Py_DECREF(exception_keeper_type_14);
            Py_XDECREF(exception_keeper_value_14);
            Py_XDECREF(exception_keeper_tb_14);

            exception_lineno = 675;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto try_except_handler_15;
        }
        tmp_condition_result_70 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_70 == NUITKA_BOOL_TRUE) {
            goto branch_yes_69;
        } else {
            goto branch_no_69;
        }
    }
    branch_yes_69:;
    {
        nuitka_bool tmp_assign_source_110;
        tmp_assign_source_110 = NUITKA_BOOL_TRUE;
        tmp_for_loop_3__break_indicator = tmp_assign_source_110;
    }
    Py_DECREF(exception_keeper_type_14);
    Py_XDECREF(exception_keeper_value_14);
    Py_XDECREF(exception_keeper_tb_14);
    goto loop_end_8;
    goto branch_end_69;
    branch_no_69:;
    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto try_except_handler_15;
    branch_end_69:;
    // End of try:
    try_end_4:;
    {
        PyObject *tmp_assign_source_111;
        CHECK_OBJECT(tmp_for_loop_3__iter_value);
        tmp_assign_source_111 = tmp_for_loop_3__iter_value;
        {
            PyObject *old = var_s;
            var_s = tmp_assign_source_111;
            Py_INCREF(var_s);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_71;
        PyObject *tmp_compexpr_left_56;
        PyObject *tmp_compexpr_right_56;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_56 = var_mname;
        CHECK_OBJECT(var_s);
        tmp_compexpr_right_56 = var_s;
        tmp_res = PySequence_Contains(tmp_compexpr_right_56, tmp_compexpr_left_56);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 676;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto try_except_handler_15;
        }
        tmp_condition_result_71 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_71 == NUITKA_BOOL_TRUE) {
            goto branch_yes_70;
        } else {
            goto branch_no_70;
        }
    }
    branch_yes_70:;
    {
        PyObject *tmp_assign_source_112;
        CHECK_OBJECT(var_s);
        tmp_assign_source_112 = var_s;
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_112;
            Py_INCREF(var_res);
            Py_XDECREF(old);
        }

    }
    goto loop_end_8;
    branch_no_70:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 675;
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto try_except_handler_15;
    }
    goto loop_start_9;
    loop_end_8:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_72;
        nuitka_bool tmp_compexpr_left_57;
        nuitka_bool tmp_compexpr_right_57;
        assert(tmp_for_loop_3__break_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_57 = tmp_for_loop_3__break_indicator;
        tmp_compexpr_right_57 = NUITKA_BOOL_TRUE;
        tmp_condition_result_72 = (tmp_compexpr_left_57 == tmp_compexpr_right_57) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_72 == NUITKA_BOOL_TRUE) {
            goto branch_yes_71;
        } else {
            goto branch_no_71;
        }
    }
    branch_yes_71:;
    {
        PyObject *tmp_assign_source_113;
        PyObject *tmp_expression_name_66;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "avm_class");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 680;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_66 = PyCell_GET(self->m_closure[0]);
        tmp_assign_source_113 = LOOKUP_ATTRIBUTE(tmp_expression_name_66, const_str_plain_variables);
        if (tmp_assign_source_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 680;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_113;
            Py_XDECREF(old);
        }

    }
    branch_no_71:;
    {
        PyObject *tmp_called_name_54;
        PyObject *tmp_expression_name_67;
        PyObject *tmp_call_result_32;
        PyObject *tmp_args_element_name_56;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_67 = var_stack;
        tmp_called_name_54 = LOOKUP_ATTRIBUTE(tmp_expression_name_67, const_str_plain_append);
        if (tmp_called_name_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (var_res == NULL) {
            Py_DECREF(tmp_called_name_54);
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "res");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 681;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_56 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 681;
        tmp_call_result_32 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_54, tmp_args_element_name_56);
        Py_DECREF(tmp_called_name_54);
        if (tmp_call_result_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_32);
    }
    goto branch_end_68;
    branch_no_68:;
    {
        nuitka_bool tmp_condition_result_73;
        PyObject *tmp_compexpr_left_58;
        PyObject *tmp_compexpr_right_58;
        PyObject *tmp_tmp_condition_result_73_object_1;
        int tmp_truth_name_41;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_58 = var_opcode;
        tmp_compexpr_right_58 = const_int_pos_96;
        tmp_tmp_condition_result_73_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_58, tmp_compexpr_right_58);
        if (tmp_tmp_condition_result_73_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 682;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_41 = CHECK_IF_TRUE(tmp_tmp_condition_result_73_object_1);
        if (tmp_truth_name_41 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_73_object_1);

            exception_lineno = 682;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_73 = tmp_truth_name_41 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_73_object_1);
        if (tmp_condition_result_73 == NUITKA_BOOL_TRUE) {
            goto branch_yes_72;
        } else {
            goto branch_no_72;
        }
    }
    branch_yes_72:;
    {
        PyObject *tmp_assign_source_114;
        PyObject *tmp_called_name_55;
        CHECK_OBJECT(var_u30);
        tmp_called_name_55 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 683;
        tmp_assign_source_114 = CALL_FUNCTION_NO_ARGS(tmp_called_name_55);
        if (tmp_assign_source_114 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 683;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_114;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_115;
        PyObject *tmp_expression_name_68;
        PyObject *tmp_expression_name_69;
        PyObject *tmp_subscript_name_26;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 684;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_69 = PyCell_GET(self->m_closure[2]);
        tmp_expression_name_68 = LOOKUP_ATTRIBUTE(tmp_expression_name_69, const_str_plain_multinames);
        if (tmp_expression_name_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 684;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_26 = var_index;
        tmp_assign_source_115 = LOOKUP_SUBSCRIPT(tmp_expression_name_68, tmp_subscript_name_26);
        Py_DECREF(tmp_expression_name_68);
        if (tmp_assign_source_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 684;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_mname;
            var_mname = tmp_assign_source_115;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_assign_source_116;
        tmp_assign_source_116 = NUITKA_BOOL_FALSE;
        tmp_for_loop_4__break_indicator = tmp_assign_source_116;
    }
    {
        PyObject *tmp_assign_source_117;
        PyObject *tmp_iter_arg_9;
        PyObject *tmp_called_name_56;
        PyObject *tmp_args_element_name_57;
        tmp_called_name_56 = (PyObject *)&PyReversed_Type;
        CHECK_OBJECT(var_scopes);
        tmp_args_element_name_57 = var_scopes;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 685;
        tmp_iter_arg_9 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_56, tmp_args_element_name_57);
        if (tmp_iter_arg_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 685;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_117 = MAKE_ITERATOR(tmp_iter_arg_9);
        Py_DECREF(tmp_iter_arg_9);
        if (tmp_assign_source_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 685;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = tmp_for_loop_4__for_iterator;
            tmp_for_loop_4__for_iterator = tmp_assign_source_117;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    loop_start_10:;
    // Tried code:
    {
        PyObject *tmp_assign_source_118;
        PyObject *tmp_value_name_3;
        CHECK_OBJECT(tmp_for_loop_4__for_iterator);
        tmp_value_name_3 = tmp_for_loop_4__for_iterator;
        tmp_assign_source_118 = ITERATOR_NEXT(tmp_value_name_3);
        if (tmp_assign_source_118 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ocooooooooooooooooooooooooooccc";
            exception_lineno = 685;
            goto try_except_handler_18;
        }
        {
            PyObject *old = tmp_for_loop_4__iter_value;
            tmp_for_loop_4__iter_value = tmp_assign_source_118;
            Py_XDECREF(old);
        }

    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_74;
        PyObject *tmp_compexpr_left_59;
        PyObject *tmp_compexpr_right_59;
        tmp_compexpr_left_59 = exception_keeper_type_16;
        tmp_compexpr_right_59 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_59, tmp_compexpr_right_59);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

            Py_DECREF(exception_keeper_type_16);
            Py_XDECREF(exception_keeper_value_16);
            Py_XDECREF(exception_keeper_tb_16);

            exception_lineno = 685;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto try_except_handler_17;
        }
        tmp_condition_result_74 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_74 == NUITKA_BOOL_TRUE) {
            goto branch_yes_73;
        } else {
            goto branch_no_73;
        }
    }
    branch_yes_73:;
    {
        nuitka_bool tmp_assign_source_119;
        tmp_assign_source_119 = NUITKA_BOOL_TRUE;
        tmp_for_loop_4__break_indicator = tmp_assign_source_119;
    }
    Py_DECREF(exception_keeper_type_16);
    Py_XDECREF(exception_keeper_value_16);
    Py_XDECREF(exception_keeper_tb_16);
    goto loop_end_9;
    goto branch_end_73;
    branch_no_73:;
    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto try_except_handler_17;
    branch_end_73:;
    // End of try:
    try_end_6:;
    {
        PyObject *tmp_assign_source_120;
        CHECK_OBJECT(tmp_for_loop_4__iter_value);
        tmp_assign_source_120 = tmp_for_loop_4__iter_value;
        {
            PyObject *old = var_s;
            var_s = tmp_assign_source_120;
            Py_INCREF(var_s);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_75;
        PyObject *tmp_compexpr_left_60;
        PyObject *tmp_compexpr_right_60;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_60 = var_mname;
        CHECK_OBJECT(var_s);
        tmp_compexpr_right_60 = var_s;
        tmp_res = PySequence_Contains(tmp_compexpr_right_60, tmp_compexpr_left_60);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 686;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto try_except_handler_17;
        }
        tmp_condition_result_75 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_75 == NUITKA_BOOL_TRUE) {
            goto branch_yes_74;
        } else {
            goto branch_no_74;
        }
    }
    branch_yes_74:;
    {
        PyObject *tmp_assign_source_121;
        CHECK_OBJECT(var_s);
        tmp_assign_source_121 = var_s;
        {
            PyObject *old = var_scope;
            var_scope = tmp_assign_source_121;
            Py_INCREF(var_scope);
            Py_XDECREF(old);
        }

    }
    goto loop_end_9;
    branch_no_74:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 685;
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto try_except_handler_17;
    }
    goto loop_start_10;
    loop_end_9:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_4__iter_value);
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_4__for_iterator);
    Py_DECREF(tmp_for_loop_4__for_iterator);
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF(tmp_for_loop_4__iter_value);
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT(tmp_for_loop_4__for_iterator);
    Py_DECREF(tmp_for_loop_4__for_iterator);
    tmp_for_loop_4__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_76;
        nuitka_bool tmp_compexpr_left_61;
        nuitka_bool tmp_compexpr_right_61;
        assert(tmp_for_loop_4__break_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_61 = tmp_for_loop_4__break_indicator;
        tmp_compexpr_right_61 = NUITKA_BOOL_TRUE;
        tmp_condition_result_76 = (tmp_compexpr_left_61 == tmp_compexpr_right_61) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_76 == NUITKA_BOOL_TRUE) {
            goto branch_yes_75;
        } else {
            goto branch_no_75;
        }
    }
    branch_yes_75:;
    {
        PyObject *tmp_assign_source_122;
        PyObject *tmp_expression_name_70;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "avm_class");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 690;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_70 = PyCell_GET(self->m_closure[0]);
        tmp_assign_source_122 = LOOKUP_ATTRIBUTE(tmp_expression_name_70, const_str_plain_variables);
        if (tmp_assign_source_122 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 690;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_scope;
            var_scope = tmp_assign_source_122;
            Py_XDECREF(old);
        }

    }
    branch_no_75:;
    {
        nuitka_bool tmp_condition_result_77;
        PyObject *tmp_compexpr_left_62;
        PyObject *tmp_compexpr_right_62;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_62 = var_mname;
        if (var_scope == NULL) {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "scope");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 692;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_62 = var_scope;
        tmp_res = PySequence_Contains(tmp_compexpr_right_62, tmp_compexpr_left_62);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 692;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_77 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_77 == NUITKA_BOOL_TRUE) {
            goto branch_yes_76;
        } else {
            goto branch_no_76;
        }
    }
    branch_yes_76:;
    {
        PyObject *tmp_assign_source_123;
        PyObject *tmp_expression_name_71;
        PyObject *tmp_subscript_name_27;
        if (var_scope == NULL) {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "scope");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 693;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_71 = var_scope;
        CHECK_OBJECT(var_mname);
        tmp_subscript_name_27 = var_mname;
        tmp_assign_source_123 = LOOKUP_SUBSCRIPT(tmp_expression_name_71, tmp_subscript_name_27);
        if (tmp_assign_source_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 693;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_123;
            Py_XDECREF(old);
        }

    }
    goto branch_end_76;
    branch_no_76:;
    {
        nuitka_bool tmp_condition_result_78;
        PyObject *tmp_compexpr_left_63;
        PyObject *tmp_compexpr_right_63;
        PyObject *tmp_mvar_value_25;
        CHECK_OBJECT(var_mname);
        tmp_compexpr_left_63 = var_mname;
        tmp_mvar_value_25 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__builtin_classes);

        if (unlikely(tmp_mvar_value_25 == NULL)) {
            tmp_mvar_value_25 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__builtin_classes);
        }

        if (tmp_mvar_value_25 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55859 ], 38, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 694;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_63 = tmp_mvar_value_25;
        tmp_res = PySequence_Contains(tmp_compexpr_right_63, tmp_compexpr_left_63);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 694;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_78 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_78 == NUITKA_BOOL_TRUE) {
            goto branch_yes_77;
        } else {
            goto branch_no_77;
        }
    }
    branch_yes_77:;
    {
        PyObject *tmp_assign_source_124;
        PyObject *tmp_expression_name_72;
        PyObject *tmp_mvar_value_26;
        PyObject *tmp_subscript_name_28;
        tmp_mvar_value_26 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__builtin_classes);

        if (unlikely(tmp_mvar_value_26 == NULL)) {
            tmp_mvar_value_26 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__builtin_classes);
        }

        if (tmp_mvar_value_26 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55859 ], 38, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 695;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_72 = tmp_mvar_value_26;
        CHECK_OBJECT(var_mname);
        tmp_subscript_name_28 = var_mname;
        tmp_assign_source_124 = LOOKUP_SUBSCRIPT(tmp_expression_name_72, tmp_subscript_name_28);
        if (tmp_assign_source_124 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 695;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_124;
            Py_XDECREF(old);
        }

    }
    goto branch_end_77;
    branch_no_77:;
    {
        PyObject *tmp_assign_source_125;
        PyObject *tmp_mvar_value_27;
        tmp_mvar_value_27 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_undefined);

        if (unlikely(tmp_mvar_value_27 == NULL)) {
            tmp_mvar_value_27 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_undefined);
        }

        if (tmp_mvar_value_27 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55679 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 699;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_assign_source_125 = tmp_mvar_value_27;
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_125;
            Py_INCREF(var_res);
            Py_XDECREF(old);
        }

    }
    branch_end_77:;
    branch_end_76:;
    {
        PyObject *tmp_called_name_57;
        PyObject *tmp_expression_name_73;
        PyObject *tmp_call_result_33;
        PyObject *tmp_args_element_name_58;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_73 = var_stack;
        tmp_called_name_57 = LOOKUP_ATTRIBUTE(tmp_expression_name_73, const_str_plain_append);
        if (tmp_called_name_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 700;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        if (var_res == NULL) {
            Py_DECREF(tmp_called_name_57);
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("local variable '%s' referenced before assignment", "res");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 700;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_58 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 700;
        tmp_call_result_33 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_57, tmp_args_element_name_58);
        Py_DECREF(tmp_called_name_57);
        if (tmp_call_result_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 700;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_33);
    }
    goto branch_end_72;
    branch_no_72:;
    {
        nuitka_bool tmp_condition_result_79;
        PyObject *tmp_compexpr_left_64;
        PyObject *tmp_compexpr_right_64;
        PyObject *tmp_tmp_condition_result_79_object_1;
        int tmp_truth_name_42;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_64 = var_opcode;
        tmp_compexpr_right_64 = const_int_pos_97;
        tmp_tmp_condition_result_79_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_64, tmp_compexpr_right_64);
        if (tmp_tmp_condition_result_79_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 701;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_42 = CHECK_IF_TRUE(tmp_tmp_condition_result_79_object_1);
        if (tmp_truth_name_42 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_79_object_1);

            exception_lineno = 701;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_79 = tmp_truth_name_42 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_79_object_1);
        if (tmp_condition_result_79 == NUITKA_BOOL_TRUE) {
            goto branch_yes_78;
        } else {
            goto branch_no_78;
        }
    }
    branch_yes_78:;
    {
        PyObject *tmp_assign_source_126;
        PyObject *tmp_called_name_58;
        CHECK_OBJECT(var_u30);
        tmp_called_name_58 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 702;
        tmp_assign_source_126 = CALL_FUNCTION_NO_ARGS(tmp_called_name_58);
        if (tmp_assign_source_126 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_126;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_127;
        PyObject *tmp_called_instance_51;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_51 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 703;
        tmp_assign_source_127 = CALL_METHOD_NO_ARGS(tmp_called_instance_51, const_str_plain_pop);
        if (tmp_assign_source_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 703;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_127;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_128;
        PyObject *tmp_expression_name_74;
        PyObject *tmp_expression_name_75;
        PyObject *tmp_subscript_name_29;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 704;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_75 = PyCell_GET(self->m_closure[2]);
        tmp_expression_name_74 = LOOKUP_ATTRIBUTE(tmp_expression_name_75, const_str_plain_multinames);
        if (tmp_expression_name_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 704;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_29 = var_index;
        tmp_assign_source_128 = LOOKUP_SUBSCRIPT(tmp_expression_name_74, tmp_subscript_name_29);
        Py_DECREF(tmp_expression_name_74);
        if (tmp_assign_source_128 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 704;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_idx;
            var_idx = tmp_assign_source_128;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_80;
        PyObject *tmp_isinstance_inst_15;
        PyObject *tmp_isinstance_cls_15;
        PyObject *tmp_mvar_value_28;
        CHECK_OBJECT(var_idx);
        tmp_isinstance_inst_15 = var_idx;
        tmp_mvar_value_28 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__Multiname);

        if (unlikely(tmp_mvar_value_28 == NULL)) {
            tmp_mvar_value_28 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__Multiname);
        }

        if (tmp_mvar_value_28 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55616 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 705;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_15 = tmp_mvar_value_28;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_15, tmp_isinstance_cls_15);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 705;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_80 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_80 == NUITKA_BOOL_TRUE) {
            goto branch_yes_79;
        } else {
            goto branch_no_79;
        }
    }
    branch_yes_79:;
    {
        PyObject *tmp_assign_source_129;
        PyObject *tmp_called_instance_52;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_52 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 706;
        tmp_assign_source_129 = CALL_METHOD_NO_ARGS(tmp_called_instance_52, const_str_plain_pop);
        if (tmp_assign_source_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 706;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_idx;
            assert(old != NULL);
            var_idx = tmp_assign_source_129;
            Py_DECREF(old);
        }

    }
    branch_no_79:;
    {
        PyObject *tmp_assign_source_130;
        PyObject *tmp_called_instance_53;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_53 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 707;
        tmp_assign_source_130 = CALL_METHOD_NO_ARGS(tmp_called_instance_53, const_str_plain_pop);
        if (tmp_assign_source_130 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 707;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_130;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(var_value);
        tmp_ass_subvalue_1 = var_value;
        CHECK_OBJECT(var_obj);
        tmp_ass_subscribed_1 = var_obj;
        CHECK_OBJECT(var_idx);
        tmp_ass_subscript_1 = var_idx;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 708;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_78;
    branch_no_78:;
    {
        nuitka_bool tmp_condition_result_81;
        PyObject *tmp_compexpr_left_65;
        PyObject *tmp_compexpr_right_65;
        PyObject *tmp_tmp_condition_result_81_object_1;
        int tmp_truth_name_43;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_65 = var_opcode;
        tmp_compexpr_right_65 = const_int_pos_98;
        tmp_tmp_condition_result_81_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_65, tmp_compexpr_right_65);
        if (tmp_tmp_condition_result_81_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 709;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_43 = CHECK_IF_TRUE(tmp_tmp_condition_result_81_object_1);
        if (tmp_truth_name_43 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_81_object_1);

            exception_lineno = 709;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_81 = tmp_truth_name_43 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_81_object_1);
        if (tmp_condition_result_81 == NUITKA_BOOL_TRUE) {
            goto branch_yes_80;
        } else {
            goto branch_no_80;
        }
    }
    branch_yes_80:;
    {
        PyObject *tmp_assign_source_131;
        PyObject *tmp_called_name_59;
        CHECK_OBJECT(var_u30);
        tmp_called_name_59 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 710;
        tmp_assign_source_131 = CALL_FUNCTION_NO_ARGS(tmp_called_name_59);
        if (tmp_assign_source_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 710;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_131;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_60;
        PyObject *tmp_expression_name_76;
        PyObject *tmp_call_result_34;
        PyObject *tmp_args_element_name_59;
        PyObject *tmp_expression_name_77;
        PyObject *tmp_subscript_name_30;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_76 = var_stack;
        tmp_called_name_60 = LOOKUP_ATTRIBUTE(tmp_expression_name_76, const_str_plain_append);
        if (tmp_called_name_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 711;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_registers);
        tmp_expression_name_77 = var_registers;
        CHECK_OBJECT(var_index);
        tmp_subscript_name_30 = var_index;
        tmp_args_element_name_59 = LOOKUP_SUBSCRIPT(tmp_expression_name_77, tmp_subscript_name_30);
        if (tmp_args_element_name_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_60);

            exception_lineno = 711;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 711;
        tmp_call_result_34 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_60, tmp_args_element_name_59);
        Py_DECREF(tmp_called_name_60);
        Py_DECREF(tmp_args_element_name_59);
        if (tmp_call_result_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 711;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_34);
    }
    goto branch_end_80;
    branch_no_80:;
    {
        nuitka_bool tmp_condition_result_82;
        PyObject *tmp_compexpr_left_66;
        PyObject *tmp_compexpr_right_66;
        PyObject *tmp_tmp_condition_result_82_object_1;
        int tmp_truth_name_44;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_66 = var_opcode;
        tmp_compexpr_right_66 = const_int_pos_99;
        tmp_tmp_condition_result_82_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_66, tmp_compexpr_right_66);
        if (tmp_tmp_condition_result_82_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 712;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_44 = CHECK_IF_TRUE(tmp_tmp_condition_result_82_object_1);
        if (tmp_truth_name_44 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_82_object_1);

            exception_lineno = 712;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_82 = tmp_truth_name_44 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_82_object_1);
        if (tmp_condition_result_82 == NUITKA_BOOL_TRUE) {
            goto branch_yes_81;
        } else {
            goto branch_no_81;
        }
    }
    branch_yes_81:;
    {
        PyObject *tmp_assign_source_132;
        PyObject *tmp_called_name_61;
        CHECK_OBJECT(var_u30);
        tmp_called_name_61 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 713;
        tmp_assign_source_132 = CALL_FUNCTION_NO_ARGS(tmp_called_name_61);
        if (tmp_assign_source_132 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 713;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_132;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_133;
        PyObject *tmp_called_instance_54;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_54 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 714;
        tmp_assign_source_133 = CALL_METHOD_NO_ARGS(tmp_called_instance_54, const_str_plain_pop);
        if (tmp_assign_source_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 714;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_133;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_ass_subscript_2;
        CHECK_OBJECT(var_value);
        tmp_ass_subvalue_2 = var_value;
        CHECK_OBJECT(var_registers);
        tmp_ass_subscribed_2 = var_registers;
        CHECK_OBJECT(var_index);
        tmp_ass_subscript_2 = var_index;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 715;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_81;
    branch_no_81:;
    {
        nuitka_bool tmp_condition_result_83;
        PyObject *tmp_compexpr_left_67;
        PyObject *tmp_compexpr_right_67;
        PyObject *tmp_tmp_condition_result_83_object_1;
        int tmp_truth_name_45;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_67 = var_opcode;
        tmp_compexpr_right_67 = const_int_pos_102;
        tmp_tmp_condition_result_83_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_67, tmp_compexpr_right_67);
        if (tmp_tmp_condition_result_83_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 716;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_45 = CHECK_IF_TRUE(tmp_tmp_condition_result_83_object_1);
        if (tmp_truth_name_45 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_83_object_1);

            exception_lineno = 716;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_83 = tmp_truth_name_45 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_83_object_1);
        if (tmp_condition_result_83 == NUITKA_BOOL_TRUE) {
            goto branch_yes_82;
        } else {
            goto branch_no_82;
        }
    }
    branch_yes_82:;
    {
        PyObject *tmp_assign_source_134;
        PyObject *tmp_called_name_62;
        CHECK_OBJECT(var_u30);
        tmp_called_name_62 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 717;
        tmp_assign_source_134 = CALL_FUNCTION_NO_ARGS(tmp_called_name_62);
        if (tmp_assign_source_134 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 717;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_134;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_135;
        PyObject *tmp_expression_name_78;
        PyObject *tmp_expression_name_79;
        PyObject *tmp_subscript_name_31;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 718;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_79 = PyCell_GET(self->m_closure[2]);
        tmp_expression_name_78 = LOOKUP_ATTRIBUTE(tmp_expression_name_79, const_str_plain_multinames);
        if (tmp_expression_name_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 718;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_31 = var_index;
        tmp_assign_source_135 = LOOKUP_SUBSCRIPT(tmp_expression_name_78, tmp_subscript_name_31);
        Py_DECREF(tmp_expression_name_78);
        if (tmp_assign_source_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 718;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_pname;
            var_pname = tmp_assign_source_135;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_84;
        PyObject *tmp_compexpr_left_68;
        PyObject *tmp_compexpr_right_68;
        PyObject *tmp_tmp_condition_result_84_object_1;
        int tmp_truth_name_46;
        CHECK_OBJECT(var_pname);
        tmp_compexpr_left_68 = var_pname;
        tmp_compexpr_right_68 = const_str_plain_length;
        tmp_tmp_condition_result_84_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_68, tmp_compexpr_right_68);
        if (tmp_tmp_condition_result_84_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 719;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_46 = CHECK_IF_TRUE(tmp_tmp_condition_result_84_object_1);
        if (tmp_truth_name_46 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_84_object_1);

            exception_lineno = 719;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_84 = tmp_truth_name_46 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_84_object_1);
        if (tmp_condition_result_84 == NUITKA_BOOL_TRUE) {
            goto branch_yes_83;
        } else {
            goto branch_no_83;
        }
    }
    branch_yes_83:;
    {
        PyObject *tmp_assign_source_136;
        PyObject *tmp_called_instance_55;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_55 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 720;
        tmp_assign_source_136 = CALL_METHOD_NO_ARGS(tmp_called_instance_55, const_str_plain_pop);
        if (tmp_assign_source_136 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 720;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_136;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_85;
        PyObject *tmp_operand_name_10;
        PyObject *tmp_isinstance_inst_16;
        PyObject *tmp_isinstance_cls_16;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_mvar_value_29;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_16 = var_obj;
        tmp_mvar_value_29 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_str);

        if (unlikely(tmp_mvar_value_29 == NULL)) {
            tmp_mvar_value_29 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_str);
        }

        if (tmp_mvar_value_29 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 26637 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 721;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_4 = tmp_mvar_value_29;
        tmp_isinstance_cls_16 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_4);
        PyTuple_SET_ITEM(tmp_isinstance_cls_16, 0, tmp_tuple_element_4);
        tmp_tuple_element_4 = (PyObject *)&PyList_Type;
        Py_INCREF(tmp_tuple_element_4);
        PyTuple_SET_ITEM(tmp_isinstance_cls_16, 1, tmp_tuple_element_4);
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_16, tmp_isinstance_cls_16);
        Py_DECREF(tmp_isinstance_cls_16);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 721;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_10 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 721;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_85 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_85 == NUITKA_BOOL_TRUE) {
            goto branch_yes_84;
        } else {
            goto branch_no_84;
        }
    }
    branch_yes_84:;
    {
        PyObject *tmp_raise_type_19;
        tmp_raise_type_19 = PyExc_AssertionError;
        exception_type = tmp_raise_type_19;
        Py_INCREF(tmp_raise_type_19);
        exception_lineno = 721;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_84:;
    {
        PyObject *tmp_called_name_63;
        PyObject *tmp_expression_name_80;
        PyObject *tmp_call_result_35;
        PyObject *tmp_args_element_name_60;
        PyObject *tmp_len_arg_7;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_80 = var_stack;
        tmp_called_name_63 = LOOKUP_ATTRIBUTE(tmp_expression_name_80, const_str_plain_append);
        if (tmp_called_name_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 722;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_obj);
        tmp_len_arg_7 = var_obj;
        tmp_args_element_name_60 = BUILTIN_LEN(tmp_len_arg_7);
        if (tmp_args_element_name_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_63);

            exception_lineno = 722;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 722;
        tmp_call_result_35 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_63, tmp_args_element_name_60);
        Py_DECREF(tmp_called_name_63);
        Py_DECREF(tmp_args_element_name_60);
        if (tmp_call_result_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 722;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_35);
    }
    goto branch_end_83;
    branch_no_83:;
    {
        nuitka_bool tmp_condition_result_86;
        PyObject *tmp_isinstance_inst_17;
        PyObject *tmp_isinstance_cls_17;
        PyObject *tmp_mvar_value_30;
        CHECK_OBJECT(var_pname);
        tmp_isinstance_inst_17 = var_pname;
        tmp_mvar_value_30 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_str);

        if (unlikely(tmp_mvar_value_30 == NULL)) {
            tmp_mvar_value_30 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_str);
        }

        if (tmp_mvar_value_30 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 26637 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 723;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_17 = tmp_mvar_value_30;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_17, tmp_isinstance_cls_17);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 723;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_86 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_86 == NUITKA_BOOL_TRUE) {
            goto branch_yes_85;
        } else {
            goto branch_no_85;
        }
    }
    branch_yes_85:;
    {
        PyObject *tmp_assign_source_137;
        PyObject *tmp_called_instance_56;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_56 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 724;
        tmp_assign_source_137 = CALL_METHOD_NO_ARGS(tmp_called_instance_56, const_str_plain_pop);
        if (tmp_assign_source_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 724;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_137;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_87;
        PyObject *tmp_isinstance_inst_18;
        PyObject *tmp_isinstance_cls_18;
        PyObject *tmp_mvar_value_31;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_18 = var_obj;
        tmp_mvar_value_31 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass);

        if (unlikely(tmp_mvar_value_31 == NULL)) {
            tmp_mvar_value_31 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass);
        }

        if (tmp_mvar_value_31 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55648 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 725;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_18 = tmp_mvar_value_31;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_18, tmp_isinstance_cls_18);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 725;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_87 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_87 == NUITKA_BOOL_TRUE) {
            goto branch_yes_86;
        } else {
            goto branch_no_86;
        }
    }
    branch_yes_86:;
    {
        PyObject *tmp_assign_source_138;
        PyObject *tmp_expression_name_81;
        PyObject *tmp_expression_name_82;
        PyObject *tmp_subscript_name_32;
        CHECK_OBJECT(var_obj);
        tmp_expression_name_82 = var_obj;
        tmp_expression_name_81 = LOOKUP_ATTRIBUTE(tmp_expression_name_82, const_str_plain_static_properties);
        if (tmp_expression_name_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 726;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_pname);
        tmp_subscript_name_32 = var_pname;
        tmp_assign_source_138 = LOOKUP_SUBSCRIPT(tmp_expression_name_81, tmp_subscript_name_32);
        Py_DECREF(tmp_expression_name_81);
        if (tmp_assign_source_138 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 726;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_138;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_57;
        PyObject *tmp_call_result_36;
        PyObject *tmp_args_element_name_61;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_57 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_61 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 727;
        {
            PyObject *call_args[] = {tmp_args_element_name_61};
            tmp_call_result_36 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_57, const_str_plain_append, call_args);
        }

        if (tmp_call_result_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 727;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_36);
    }
    goto loop_start_1;
    branch_no_86:;
    {
        nuitka_bool tmp_condition_result_88;
        PyObject *tmp_operand_name_11;
        PyObject *tmp_isinstance_inst_19;
        PyObject *tmp_isinstance_cls_19;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_mvar_value_32;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_19 = var_obj;
        tmp_tuple_element_5 = (PyObject *)&PyDict_Type;
        tmp_isinstance_cls_19 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_5);
        PyTuple_SET_ITEM(tmp_isinstance_cls_19, 0, tmp_tuple_element_5);
        tmp_mvar_value_32 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__ScopeDict);

        if (unlikely(tmp_mvar_value_32 == NULL)) {
            tmp_mvar_value_32 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__ScopeDict);
        }

        if (tmp_mvar_value_32 == NULL) {
            Py_DECREF(tmp_isinstance_cls_19);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55355 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 730;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_5 = tmp_mvar_value_32;
        Py_INCREF(tmp_tuple_element_5);
        PyTuple_SET_ITEM(tmp_isinstance_cls_19, 1, tmp_tuple_element_5);
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_19, tmp_isinstance_cls_19);
        Py_DECREF(tmp_isinstance_cls_19);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 730;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_11 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 730;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_88 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_88 == NUITKA_BOOL_TRUE) {
            goto branch_yes_87;
        } else {
            goto branch_no_87;
        }
    }
    branch_yes_87:;
    {
        PyObject *tmp_raise_type_20;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_left_name_13;
        PyObject *tmp_right_name_13;
        PyObject *tmp_tuple_element_7;
        tmp_raise_type_20 = PyExc_AssertionError;
        tmp_left_name_13 = const_str_digest_54cbf714d1a0ba7f222ccc9b83ba72dd;
        CHECK_OBJECT(var_pname);
        tmp_tuple_element_7 = var_pname;
        tmp_right_name_13 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_7);
        PyTuple_SET_ITEM(tmp_right_name_13, 0, tmp_tuple_element_7);
        CHECK_OBJECT(var_obj);
        tmp_tuple_element_7 = var_obj;
        Py_INCREF(tmp_tuple_element_7);
        PyTuple_SET_ITEM(tmp_right_name_13, 1, tmp_tuple_element_7);
        tmp_tuple_element_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_13, tmp_right_name_13);
        Py_DECREF(tmp_right_name_13);
        if (tmp_tuple_element_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 731;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_raise_value_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_raise_value_1, 0, tmp_tuple_element_6);
        exception_type = tmp_raise_type_20;
        Py_INCREF(tmp_raise_type_20);
        exception_value = tmp_raise_value_1;
        exception_lineno = 730;
        RAISE_EXCEPTION_WITH_VALUE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_87:;
    {
        PyObject *tmp_assign_source_139;
        PyObject *tmp_called_name_64;
        PyObject *tmp_expression_name_83;
        PyObject *tmp_args_element_name_62;
        PyObject *tmp_args_element_name_63;
        PyObject *tmp_mvar_value_33;
        CHECK_OBJECT(var_obj);
        tmp_expression_name_83 = var_obj;
        tmp_called_name_64 = LOOKUP_ATTRIBUTE(tmp_expression_name_83, const_str_plain_get);
        if (tmp_called_name_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 732;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_pname);
        tmp_args_element_name_62 = var_pname;
        tmp_mvar_value_33 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_undefined);

        if (unlikely(tmp_mvar_value_33 == NULL)) {
            tmp_mvar_value_33 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_undefined);
        }

        if (tmp_mvar_value_33 == NULL) {
            Py_DECREF(tmp_called_name_64);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55679 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 732;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_63 = tmp_mvar_value_33;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 732;
        {
            PyObject *call_args[] = {tmp_args_element_name_62, tmp_args_element_name_63};
            tmp_assign_source_139 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_64, call_args);
        }

        Py_DECREF(tmp_called_name_64);
        if (tmp_assign_source_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 732;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_139;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_58;
        PyObject *tmp_call_result_37;
        PyObject *tmp_args_element_name_64;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_58 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_64 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 733;
        {
            PyObject *call_args[] = {tmp_args_element_name_64};
            tmp_call_result_37 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_58, const_str_plain_append, call_args);
        }

        if (tmp_call_result_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 733;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_37);
    }
    goto branch_end_85;
    branch_no_85:;
    {
        PyObject *tmp_assign_source_140;
        PyObject *tmp_called_instance_59;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_59 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 735;
        tmp_assign_source_140 = CALL_METHOD_NO_ARGS(tmp_called_instance_59, const_str_plain_pop);
        if (tmp_assign_source_140 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 735;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_idx;
            var_idx = tmp_assign_source_140;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_89;
        PyObject *tmp_operand_name_12;
        PyObject *tmp_isinstance_inst_20;
        PyObject *tmp_isinstance_cls_20;
        CHECK_OBJECT(var_idx);
        tmp_isinstance_inst_20 = var_idx;
        tmp_isinstance_cls_20 = (PyObject *)&PyLong_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_20, tmp_isinstance_cls_20);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 736;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_12 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_12);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 736;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_89 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_89 == NUITKA_BOOL_TRUE) {
            goto branch_yes_88;
        } else {
            goto branch_no_88;
        }
    }
    branch_yes_88:;
    {
        PyObject *tmp_raise_type_21;
        tmp_raise_type_21 = PyExc_AssertionError;
        exception_type = tmp_raise_type_21;
        Py_INCREF(tmp_raise_type_21);
        exception_lineno = 736;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_88:;
    {
        PyObject *tmp_assign_source_141;
        PyObject *tmp_called_instance_60;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_60 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 737;
        tmp_assign_source_141 = CALL_METHOD_NO_ARGS(tmp_called_instance_60, const_str_plain_pop);
        if (tmp_assign_source_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 737;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_141;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_90;
        PyObject *tmp_operand_name_13;
        PyObject *tmp_isinstance_inst_21;
        PyObject *tmp_isinstance_cls_21;
        CHECK_OBJECT(var_obj);
        tmp_isinstance_inst_21 = var_obj;
        tmp_isinstance_cls_21 = (PyObject *)&PyList_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_21, tmp_isinstance_cls_21);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 738;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_13 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_13);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 738;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_90 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_90 == NUITKA_BOOL_TRUE) {
            goto branch_yes_89;
        } else {
            goto branch_no_89;
        }
    }
    branch_yes_89:;
    {
        PyObject *tmp_raise_type_22;
        tmp_raise_type_22 = PyExc_AssertionError;
        exception_type = tmp_raise_type_22;
        Py_INCREF(tmp_raise_type_22);
        exception_lineno = 738;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_89:;
    {
        PyObject *tmp_called_name_65;
        PyObject *tmp_expression_name_84;
        PyObject *tmp_call_result_38;
        PyObject *tmp_args_element_name_65;
        PyObject *tmp_expression_name_85;
        PyObject *tmp_subscript_name_33;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_84 = var_stack;
        tmp_called_name_65 = LOOKUP_ATTRIBUTE(tmp_expression_name_84, const_str_plain_append);
        if (tmp_called_name_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 739;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_obj);
        tmp_expression_name_85 = var_obj;
        CHECK_OBJECT(var_idx);
        tmp_subscript_name_33 = var_idx;
        tmp_args_element_name_65 = LOOKUP_SUBSCRIPT(tmp_expression_name_85, tmp_subscript_name_33);
        if (tmp_args_element_name_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_65);

            exception_lineno = 739;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 739;
        tmp_call_result_38 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_65, tmp_args_element_name_65);
        Py_DECREF(tmp_called_name_65);
        Py_DECREF(tmp_args_element_name_65);
        if (tmp_call_result_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 739;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_38);
    }
    branch_end_85:;
    branch_end_83:;
    goto branch_end_82;
    branch_no_82:;
    {
        nuitka_bool tmp_condition_result_91;
        PyObject *tmp_compexpr_left_69;
        PyObject *tmp_compexpr_right_69;
        PyObject *tmp_tmp_condition_result_91_object_1;
        int tmp_truth_name_47;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_69 = var_opcode;
        tmp_compexpr_right_69 = const_int_pos_104;
        tmp_tmp_condition_result_91_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_69, tmp_compexpr_right_69);
        if (tmp_tmp_condition_result_91_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 740;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_47 = CHECK_IF_TRUE(tmp_tmp_condition_result_91_object_1);
        if (tmp_truth_name_47 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_91_object_1);

            exception_lineno = 740;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_91 = tmp_truth_name_47 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_91_object_1);
        if (tmp_condition_result_91 == NUITKA_BOOL_TRUE) {
            goto branch_yes_90;
        } else {
            goto branch_no_90;
        }
    }
    branch_yes_90:;
    {
        PyObject *tmp_assign_source_142;
        PyObject *tmp_called_name_66;
        CHECK_OBJECT(var_u30);
        tmp_called_name_66 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 741;
        tmp_assign_source_142 = CALL_FUNCTION_NO_ARGS(tmp_called_name_66);
        if (tmp_assign_source_142 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 741;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_142;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_143;
        PyObject *tmp_called_instance_61;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_61 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 742;
        tmp_assign_source_143 = CALL_METHOD_NO_ARGS(tmp_called_instance_61, const_str_plain_pop);
        if (tmp_assign_source_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 742;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_143;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_144;
        PyObject *tmp_expression_name_86;
        PyObject *tmp_expression_name_87;
        PyObject *tmp_subscript_name_34;
        if (PyCell_GET(self->m_closure[2]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 743;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_name_87 = PyCell_GET(self->m_closure[2]);
        tmp_expression_name_86 = LOOKUP_ATTRIBUTE(tmp_expression_name_87, const_str_plain_multinames);
        if (tmp_expression_name_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 743;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_34 = var_index;
        tmp_assign_source_144 = LOOKUP_SUBSCRIPT(tmp_expression_name_86, tmp_subscript_name_34);
        Py_DECREF(tmp_expression_name_86);
        if (tmp_assign_source_144 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 743;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_idx;
            var_idx = tmp_assign_source_144;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_92;
        PyObject *tmp_isinstance_inst_22;
        PyObject *tmp_isinstance_cls_22;
        PyObject *tmp_mvar_value_34;
        CHECK_OBJECT(var_idx);
        tmp_isinstance_inst_22 = var_idx;
        tmp_mvar_value_34 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__Multiname);

        if (unlikely(tmp_mvar_value_34 == NULL)) {
            tmp_mvar_value_34 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__Multiname);
        }

        if (tmp_mvar_value_34 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55616 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 744;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_22 = tmp_mvar_value_34;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_22, tmp_isinstance_cls_22);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 744;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_92 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_92 == NUITKA_BOOL_TRUE) {
            goto branch_yes_91;
        } else {
            goto branch_no_91;
        }
    }
    branch_yes_91:;
    {
        PyObject *tmp_assign_source_145;
        PyObject *tmp_called_instance_62;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_62 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 745;
        tmp_assign_source_145 = CALL_METHOD_NO_ARGS(tmp_called_instance_62, const_str_plain_pop);
        if (tmp_assign_source_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 745;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_idx;
            assert(old != NULL);
            var_idx = tmp_assign_source_145;
            Py_DECREF(old);
        }

    }
    branch_no_91:;
    {
        PyObject *tmp_assign_source_146;
        PyObject *tmp_called_instance_63;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_63 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 746;
        tmp_assign_source_146 = CALL_METHOD_NO_ARGS(tmp_called_instance_63, const_str_plain_pop);
        if (tmp_assign_source_146 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 746;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_146;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_ass_subvalue_3;
        PyObject *tmp_ass_subscribed_3;
        PyObject *tmp_ass_subscript_3;
        CHECK_OBJECT(var_value);
        tmp_ass_subvalue_3 = var_value;
        CHECK_OBJECT(var_obj);
        tmp_ass_subscribed_3 = var_obj;
        CHECK_OBJECT(var_idx);
        tmp_ass_subscript_3 = var_idx;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 747;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_90;
    branch_no_90:;
    {
        nuitka_bool tmp_condition_result_93;
        PyObject *tmp_compexpr_left_70;
        PyObject *tmp_compexpr_right_70;
        PyObject *tmp_tmp_condition_result_93_object_1;
        int tmp_truth_name_48;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_70 = var_opcode;
        tmp_compexpr_right_70 = const_int_pos_115;
        tmp_tmp_condition_result_93_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_70, tmp_compexpr_right_70);
        if (tmp_tmp_condition_result_93_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 748;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_48 = CHECK_IF_TRUE(tmp_tmp_condition_result_93_object_1);
        if (tmp_truth_name_48 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_93_object_1);

            exception_lineno = 748;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_93 = tmp_truth_name_48 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_93_object_1);
        if (tmp_condition_result_93 == NUITKA_BOOL_TRUE) {
            goto branch_yes_92;
        } else {
            goto branch_no_92;
        }
    }
    branch_yes_92:;
    {
        PyObject *tmp_assign_source_147;
        PyObject *tmp_called_instance_64;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_64 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 749;
        tmp_assign_source_147 = CALL_METHOD_NO_ARGS(tmp_called_instance_64, const_str_plain_pop);
        if (tmp_assign_source_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 749;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_147;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_148;
        PyObject *tmp_int_arg_1;
        CHECK_OBJECT(var_value);
        tmp_int_arg_1 = var_value;
        tmp_assign_source_148 = PyNumber_Int(tmp_int_arg_1);
        if (tmp_assign_source_148 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 750;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_intvalue;
            var_intvalue = tmp_assign_source_148;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_65;
        PyObject *tmp_call_result_39;
        PyObject *tmp_args_element_name_66;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_65 = var_stack;
        CHECK_OBJECT(var_intvalue);
        tmp_args_element_name_66 = var_intvalue;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 751;
        {
            PyObject *call_args[] = {tmp_args_element_name_66};
            tmp_call_result_39 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_65, const_str_plain_append, call_args);
        }

        if (tmp_call_result_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 751;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_39);
    }
    goto branch_end_92;
    branch_no_92:;
    {
        nuitka_bool tmp_condition_result_94;
        PyObject *tmp_compexpr_left_71;
        PyObject *tmp_compexpr_right_71;
        PyObject *tmp_tmp_condition_result_94_object_1;
        int tmp_truth_name_49;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_71 = var_opcode;
        tmp_compexpr_right_71 = const_int_pos_128;
        tmp_tmp_condition_result_94_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_71, tmp_compexpr_right_71);
        if (tmp_tmp_condition_result_94_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 752;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_49 = CHECK_IF_TRUE(tmp_tmp_condition_result_94_object_1);
        if (tmp_truth_name_49 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_94_object_1);

            exception_lineno = 752;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_94 = tmp_truth_name_49 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_94_object_1);
        if (tmp_condition_result_94 == NUITKA_BOOL_TRUE) {
            goto branch_yes_93;
        } else {
            goto branch_no_93;
        }
    }
    branch_yes_93:;
    {
        PyObject *tmp_called_name_67;
        PyObject *tmp_call_result_40;
        CHECK_OBJECT(var_u30);
        tmp_called_name_67 = var_u30;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 753;
        tmp_call_result_40 = CALL_FUNCTION_NO_ARGS(tmp_called_name_67);
        if (tmp_call_result_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 753;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_40);
    }
    goto branch_end_93;
    branch_no_93:;
    {
        nuitka_bool tmp_condition_result_95;
        PyObject *tmp_compexpr_left_72;
        PyObject *tmp_compexpr_right_72;
        PyObject *tmp_tmp_condition_result_95_object_1;
        int tmp_truth_name_50;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_72 = var_opcode;
        tmp_compexpr_right_72 = const_int_pos_130;
        tmp_tmp_condition_result_95_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_72, tmp_compexpr_right_72);
        if (tmp_tmp_condition_result_95_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 754;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_50 = CHECK_IF_TRUE(tmp_tmp_condition_result_95_object_1);
        if (tmp_truth_name_50 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_95_object_1);

            exception_lineno = 754;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_95 = tmp_truth_name_50 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_95_object_1);
        if (tmp_condition_result_95 == NUITKA_BOOL_TRUE) {
            goto branch_yes_94;
        } else {
            goto branch_no_94;
        }
    }
    branch_yes_94:;
    {
        PyObject *tmp_assign_source_149;
        PyObject *tmp_called_instance_66;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_66 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 755;
        tmp_assign_source_149 = CALL_METHOD_NO_ARGS(tmp_called_instance_66, const_str_plain_pop);
        if (tmp_assign_source_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 755;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_149;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_67;
        PyObject *tmp_call_result_41;
        PyObject *tmp_args_element_name_67;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_67 = var_stack;
        CHECK_OBJECT(var_value);
        tmp_args_element_name_67 = var_value;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 757;
        {
            PyObject *call_args[] = {tmp_args_element_name_67};
            tmp_call_result_41 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_67, const_str_plain_append, call_args);
        }

        if (tmp_call_result_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_41);
    }
    goto branch_end_94;
    branch_no_94:;
    {
        nuitka_bool tmp_condition_result_96;
        PyObject *tmp_compexpr_left_73;
        PyObject *tmp_compexpr_right_73;
        PyObject *tmp_tmp_condition_result_96_object_1;
        int tmp_truth_name_51;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_73 = var_opcode;
        tmp_compexpr_right_73 = const_int_pos_133;
        tmp_tmp_condition_result_96_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_73, tmp_compexpr_right_73);
        if (tmp_tmp_condition_result_96_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 758;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_51 = CHECK_IF_TRUE(tmp_tmp_condition_result_96_object_1);
        if (tmp_truth_name_51 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_96_object_1);

            exception_lineno = 758;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_96 = tmp_truth_name_51 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_96_object_1);
        if (tmp_condition_result_96 == NUITKA_BOOL_TRUE) {
            goto branch_yes_95;
        } else {
            goto branch_no_95;
        }
    }
    branch_yes_95:;
    {
        nuitka_bool tmp_condition_result_97;
        PyObject *tmp_operand_name_14;
        PyObject *tmp_isinstance_inst_23;
        PyObject *tmp_isinstance_cls_23;
        PyObject *tmp_expression_name_88;
        PyObject *tmp_subscript_name_35;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_mvar_value_35;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_88 = var_stack;
        tmp_subscript_name_35 = const_int_neg_1;
        tmp_isinstance_inst_23 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_88, tmp_subscript_name_35, -1);
        if (tmp_isinstance_inst_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 759;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_8 = (PyObject *)Py_TYPE(Py_None);
        tmp_isinstance_cls_23 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_8);
        PyTuple_SET_ITEM(tmp_isinstance_cls_23, 0, tmp_tuple_element_8);
        tmp_mvar_value_35 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_str);

        if (unlikely(tmp_mvar_value_35 == NULL)) {
            tmp_mvar_value_35 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_str);
        }

        if (tmp_mvar_value_35 == NULL) {
            Py_DECREF(tmp_isinstance_inst_23);
            Py_DECREF(tmp_isinstance_cls_23);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 26637 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 759;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_8 = tmp_mvar_value_35;
        Py_INCREF(tmp_tuple_element_8);
        PyTuple_SET_ITEM(tmp_isinstance_cls_23, 1, tmp_tuple_element_8);
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_23, tmp_isinstance_cls_23);
        Py_DECREF(tmp_isinstance_inst_23);
        Py_DECREF(tmp_isinstance_cls_23);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 759;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_14 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_14);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 759;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_97 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_97 == NUITKA_BOOL_TRUE) {
            goto branch_yes_96;
        } else {
            goto branch_no_96;
        }
    }
    branch_yes_96:;
    {
        PyObject *tmp_raise_type_23;
        tmp_raise_type_23 = PyExc_AssertionError;
        exception_type = tmp_raise_type_23;
        Py_INCREF(tmp_raise_type_23);
        exception_lineno = 759;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_96:;
    goto branch_end_95;
    branch_no_95:;
    {
        nuitka_bool tmp_condition_result_98;
        PyObject *tmp_compexpr_left_74;
        PyObject *tmp_compexpr_right_74;
        PyObject *tmp_tmp_condition_result_98_object_1;
        int tmp_truth_name_52;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_74 = var_opcode;
        tmp_compexpr_right_74 = const_int_pos_147;
        tmp_tmp_condition_result_98_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_74, tmp_compexpr_right_74);
        if (tmp_tmp_condition_result_98_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 760;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_52 = CHECK_IF_TRUE(tmp_tmp_condition_result_98_object_1);
        if (tmp_truth_name_52 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_98_object_1);

            exception_lineno = 760;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_98 = tmp_truth_name_52 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_98_object_1);
        if (tmp_condition_result_98 == NUITKA_BOOL_TRUE) {
            goto branch_yes_97;
        } else {
            goto branch_no_97;
        }
    }
    branch_yes_97:;
    {
        PyObject *tmp_assign_source_150;
        PyObject *tmp_called_instance_68;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_68 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 761;
        tmp_assign_source_150 = CALL_METHOD_NO_ARGS(tmp_called_instance_68, const_str_plain_pop);
        if (tmp_assign_source_150 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 761;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_150;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_99;
        PyObject *tmp_operand_name_15;
        PyObject *tmp_isinstance_inst_24;
        PyObject *tmp_isinstance_cls_24;
        CHECK_OBJECT(var_value);
        tmp_isinstance_inst_24 = var_value;
        tmp_isinstance_cls_24 = (PyObject *)&PyLong_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_24, tmp_isinstance_cls_24);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 762;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_15 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_15);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 762;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_99 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_99 == NUITKA_BOOL_TRUE) {
            goto branch_yes_98;
        } else {
            goto branch_no_98;
        }
    }
    branch_yes_98:;
    {
        PyObject *tmp_raise_type_24;
        tmp_raise_type_24 = PyExc_AssertionError;
        exception_type = tmp_raise_type_24;
        Py_INCREF(tmp_raise_type_24);
        exception_lineno = 762;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_98:;
    {
        PyObject *tmp_called_name_68;
        PyObject *tmp_expression_name_89;
        PyObject *tmp_call_result_42;
        PyObject *tmp_args_element_name_68;
        PyObject *tmp_left_name_14;
        PyObject *tmp_right_name_14;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_89 = var_stack;
        tmp_called_name_68 = LOOKUP_ATTRIBUTE(tmp_expression_name_89, const_str_plain_append);
        if (tmp_called_name_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 763;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_value);
        tmp_left_name_14 = var_value;
        tmp_right_name_14 = const_int_pos_1;
        tmp_args_element_name_68 = BINARY_OPERATION_SUB_OBJECT_OBJECT_LONG(tmp_left_name_14, tmp_right_name_14);
        if (tmp_args_element_name_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_68);

            exception_lineno = 763;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 763;
        tmp_call_result_42 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_68, tmp_args_element_name_68);
        Py_DECREF(tmp_called_name_68);
        Py_DECREF(tmp_args_element_name_68);
        if (tmp_call_result_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 763;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_42);
    }
    goto branch_end_97;
    branch_no_97:;
    {
        nuitka_bool tmp_condition_result_100;
        PyObject *tmp_compexpr_left_75;
        PyObject *tmp_compexpr_right_75;
        PyObject *tmp_tmp_condition_result_100_object_1;
        int tmp_truth_name_53;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_75 = var_opcode;
        tmp_compexpr_right_75 = const_int_pos_149;
        tmp_tmp_condition_result_100_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_75, tmp_compexpr_right_75);
        if (tmp_tmp_condition_result_100_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 764;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_53 = CHECK_IF_TRUE(tmp_tmp_condition_result_100_object_1);
        if (tmp_truth_name_53 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_100_object_1);

            exception_lineno = 764;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_100 = tmp_truth_name_53 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_100_object_1);
        if (tmp_condition_result_100 == NUITKA_BOOL_TRUE) {
            goto branch_yes_99;
        } else {
            goto branch_no_99;
        }
    }
    branch_yes_99:;
    {
        PyObject *tmp_assign_source_151;
        PyObject *tmp_called_instance_69;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_69 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 765;
        tmp_assign_source_151 = CALL_METHOD_NO_ARGS(tmp_called_instance_69, const_str_plain_pop);
        if (tmp_assign_source_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 765;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_151;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_expression_name_90;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_mvar_value_36;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_mvar_value_37;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        PyObject *tmp_subscript_name_36;
        PyObject *tmp_type_arg_1;
        tmp_mvar_value_36 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__Undefined);

        if (unlikely(tmp_mvar_value_36 == NULL)) {
            tmp_mvar_value_36 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__Undefined);
        }

        if (tmp_mvar_value_36 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55827 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 767;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_dict_key_1 = tmp_mvar_value_36;
        tmp_dict_value_1 = const_str_plain_undefined;
        tmp_expression_name_90 = _PyDict_NewPresized( 4 );
        tmp_res = PyDict_SetItem(tmp_expression_name_90, tmp_dict_key_1, tmp_dict_value_1);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_expression_name_90);

            exception_lineno = 766;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_37 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_str);

        if (unlikely(tmp_mvar_value_37 == NULL)) {
            tmp_mvar_value_37 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_compat_str);
        }

        if (tmp_mvar_value_37 == NULL) {
            Py_DECREF(tmp_expression_name_90);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 26637 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 768;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }

        tmp_dict_key_2 = tmp_mvar_value_37;
        tmp_dict_value_2 = const_str_plain_String;
        tmp_res = PyDict_SetItem(tmp_expression_name_90, tmp_dict_key_2, tmp_dict_value_2);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_expression_name_90);

            exception_lineno = 766;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_3 = (PyObject *)&PyLong_Type;
        tmp_dict_value_3 = const_str_plain_Number;
        tmp_res = PyDict_SetItem(tmp_expression_name_90, tmp_dict_key_3, tmp_dict_value_3);
        assert(!(tmp_res != 0));
        tmp_dict_key_4 = (PyObject *)&PyFloat_Type;
        tmp_dict_value_4 = const_str_plain_Number;
        tmp_res = PyDict_SetItem(tmp_expression_name_90, tmp_dict_key_4, tmp_dict_value_4);
        assert(!(tmp_res != 0));
        CHECK_OBJECT(var_value);
        tmp_type_arg_1 = var_value;
        tmp_subscript_name_36 = BUILTIN_TYPE1(tmp_type_arg_1);
        assert(!(tmp_subscript_name_36 == NULL));
        tmp_return_value = LOOKUP_SUBSCRIPT(tmp_expression_name_90, tmp_subscript_name_36);
        Py_DECREF(tmp_expression_name_90);
        Py_DECREF(tmp_subscript_name_36);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 766;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_99;
    branch_no_99:;
    {
        nuitka_bool tmp_condition_result_101;
        PyObject *tmp_compexpr_left_76;
        PyObject *tmp_compexpr_right_76;
        PyObject *tmp_tmp_condition_result_101_object_1;
        int tmp_truth_name_54;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_76 = var_opcode;
        tmp_compexpr_right_76 = const_int_pos_160;
        tmp_tmp_condition_result_101_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_76, tmp_compexpr_right_76);
        if (tmp_tmp_condition_result_101_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 772;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_54 = CHECK_IF_TRUE(tmp_tmp_condition_result_101_object_1);
        if (tmp_truth_name_54 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_101_object_1);

            exception_lineno = 772;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_101 = tmp_truth_name_54 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_101_object_1);
        if (tmp_condition_result_101 == NUITKA_BOOL_TRUE) {
            goto branch_yes_100;
        } else {
            goto branch_no_100;
        }
    }
    branch_yes_100:;
    {
        PyObject *tmp_assign_source_152;
        PyObject *tmp_called_instance_70;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_70 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 773;
        tmp_assign_source_152 = CALL_METHOD_NO_ARGS(tmp_called_instance_70, const_str_plain_pop);
        if (tmp_assign_source_152 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 773;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value2;
            var_value2 = tmp_assign_source_152;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_153;
        PyObject *tmp_called_instance_71;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_71 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 774;
        tmp_assign_source_153 = CALL_METHOD_NO_ARGS(tmp_called_instance_71, const_str_plain_pop);
        if (tmp_assign_source_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 774;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value1;
            var_value1 = tmp_assign_source_153;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_154;
        PyObject *tmp_left_name_15;
        PyObject *tmp_right_name_15;
        CHECK_OBJECT(var_value1);
        tmp_left_name_15 = var_value1;
        CHECK_OBJECT(var_value2);
        tmp_right_name_15 = var_value2;
        tmp_assign_source_154 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_name_15, tmp_right_name_15);
        if (tmp_assign_source_154 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 775;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_154;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_72;
        PyObject *tmp_call_result_43;
        PyObject *tmp_args_element_name_69;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_72 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_69 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 776;
        {
            PyObject *call_args[] = {tmp_args_element_name_69};
            tmp_call_result_43 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_72, const_str_plain_append, call_args);
        }

        if (tmp_call_result_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 776;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_43);
    }
    goto branch_end_100;
    branch_no_100:;
    {
        nuitka_bool tmp_condition_result_102;
        PyObject *tmp_compexpr_left_77;
        PyObject *tmp_compexpr_right_77;
        PyObject *tmp_tmp_condition_result_102_object_1;
        int tmp_truth_name_55;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_77 = var_opcode;
        tmp_compexpr_right_77 = const_int_pos_161;
        tmp_tmp_condition_result_102_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_77, tmp_compexpr_right_77);
        if (tmp_tmp_condition_result_102_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 777;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_55 = CHECK_IF_TRUE(tmp_tmp_condition_result_102_object_1);
        if (tmp_truth_name_55 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_102_object_1);

            exception_lineno = 777;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_102 = tmp_truth_name_55 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_102_object_1);
        if (tmp_condition_result_102 == NUITKA_BOOL_TRUE) {
            goto branch_yes_101;
        } else {
            goto branch_no_101;
        }
    }
    branch_yes_101:;
    {
        PyObject *tmp_assign_source_155;
        PyObject *tmp_called_instance_73;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_73 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 778;
        tmp_assign_source_155 = CALL_METHOD_NO_ARGS(tmp_called_instance_73, const_str_plain_pop);
        if (tmp_assign_source_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 778;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value2;
            var_value2 = tmp_assign_source_155;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_156;
        PyObject *tmp_called_instance_74;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_74 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 779;
        tmp_assign_source_156 = CALL_METHOD_NO_ARGS(tmp_called_instance_74, const_str_plain_pop);
        if (tmp_assign_source_156 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 779;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value1;
            var_value1 = tmp_assign_source_156;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_157;
        PyObject *tmp_left_name_16;
        PyObject *tmp_right_name_16;
        CHECK_OBJECT(var_value1);
        tmp_left_name_16 = var_value1;
        CHECK_OBJECT(var_value2);
        tmp_right_name_16 = var_value2;
        tmp_assign_source_157 = BINARY_OPERATION_SUB_OBJECT_OBJECT_OBJECT(tmp_left_name_16, tmp_right_name_16);
        if (tmp_assign_source_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 780;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_157;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_75;
        PyObject *tmp_call_result_44;
        PyObject *tmp_args_element_name_70;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_75 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_70 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 781;
        {
            PyObject *call_args[] = {tmp_args_element_name_70};
            tmp_call_result_44 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_75, const_str_plain_append, call_args);
        }

        if (tmp_call_result_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 781;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_44);
    }
    goto branch_end_101;
    branch_no_101:;
    {
        nuitka_bool tmp_condition_result_103;
        PyObject *tmp_compexpr_left_78;
        PyObject *tmp_compexpr_right_78;
        PyObject *tmp_tmp_condition_result_103_object_1;
        int tmp_truth_name_56;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_78 = var_opcode;
        tmp_compexpr_right_78 = const_int_pos_162;
        tmp_tmp_condition_result_103_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_78, tmp_compexpr_right_78);
        if (tmp_tmp_condition_result_103_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 782;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_56 = CHECK_IF_TRUE(tmp_tmp_condition_result_103_object_1);
        if (tmp_truth_name_56 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_103_object_1);

            exception_lineno = 782;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_103 = tmp_truth_name_56 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_103_object_1);
        if (tmp_condition_result_103 == NUITKA_BOOL_TRUE) {
            goto branch_yes_102;
        } else {
            goto branch_no_102;
        }
    }
    branch_yes_102:;
    {
        PyObject *tmp_assign_source_158;
        PyObject *tmp_called_instance_76;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_76 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 783;
        tmp_assign_source_158 = CALL_METHOD_NO_ARGS(tmp_called_instance_76, const_str_plain_pop);
        if (tmp_assign_source_158 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 783;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value2;
            var_value2 = tmp_assign_source_158;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_159;
        PyObject *tmp_called_instance_77;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_77 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 784;
        tmp_assign_source_159 = CALL_METHOD_NO_ARGS(tmp_called_instance_77, const_str_plain_pop);
        if (tmp_assign_source_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 784;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value1;
            var_value1 = tmp_assign_source_159;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_160;
        PyObject *tmp_left_name_17;
        PyObject *tmp_right_name_17;
        CHECK_OBJECT(var_value1);
        tmp_left_name_17 = var_value1;
        CHECK_OBJECT(var_value2);
        tmp_right_name_17 = var_value2;
        tmp_assign_source_160 = BINARY_OPERATION_MULT_OBJECT_OBJECT_OBJECT(tmp_left_name_17, tmp_right_name_17);
        if (tmp_assign_source_160 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 785;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_160;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_78;
        PyObject *tmp_call_result_45;
        PyObject *tmp_args_element_name_71;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_78 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_71 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 786;
        {
            PyObject *call_args[] = {tmp_args_element_name_71};
            tmp_call_result_45 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_78, const_str_plain_append, call_args);
        }

        if (tmp_call_result_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 786;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_45);
    }
    goto branch_end_102;
    branch_no_102:;
    {
        nuitka_bool tmp_condition_result_104;
        PyObject *tmp_compexpr_left_79;
        PyObject *tmp_compexpr_right_79;
        PyObject *tmp_tmp_condition_result_104_object_1;
        int tmp_truth_name_57;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_79 = var_opcode;
        tmp_compexpr_right_79 = const_int_pos_164;
        tmp_tmp_condition_result_104_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_79, tmp_compexpr_right_79);
        if (tmp_tmp_condition_result_104_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 787;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_57 = CHECK_IF_TRUE(tmp_tmp_condition_result_104_object_1);
        if (tmp_truth_name_57 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_104_object_1);

            exception_lineno = 787;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_104 = tmp_truth_name_57 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_104_object_1);
        if (tmp_condition_result_104 == NUITKA_BOOL_TRUE) {
            goto branch_yes_103;
        } else {
            goto branch_no_103;
        }
    }
    branch_yes_103:;
    {
        PyObject *tmp_assign_source_161;
        PyObject *tmp_called_instance_79;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_79 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 788;
        tmp_assign_source_161 = CALL_METHOD_NO_ARGS(tmp_called_instance_79, const_str_plain_pop);
        if (tmp_assign_source_161 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 788;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value2;
            var_value2 = tmp_assign_source_161;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_162;
        PyObject *tmp_called_instance_80;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_80 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 789;
        tmp_assign_source_162 = CALL_METHOD_NO_ARGS(tmp_called_instance_80, const_str_plain_pop);
        if (tmp_assign_source_162 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 789;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value1;
            var_value1 = tmp_assign_source_162;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_163;
        PyObject *tmp_left_name_18;
        PyObject *tmp_right_name_18;
        CHECK_OBJECT(var_value1);
        tmp_left_name_18 = var_value1;
        CHECK_OBJECT(var_value2);
        tmp_right_name_18 = var_value2;
        tmp_assign_source_163 = BINARY_OPERATION_MOD_OBJECT_OBJECT_OBJECT(tmp_left_name_18, tmp_right_name_18);
        if (tmp_assign_source_163 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 790;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_163;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_81;
        PyObject *tmp_call_result_46;
        PyObject *tmp_args_element_name_72;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_81 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_72 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 791;
        {
            PyObject *call_args[] = {tmp_args_element_name_72};
            tmp_call_result_46 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_81, const_str_plain_append, call_args);
        }

        if (tmp_call_result_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_46);
    }
    goto branch_end_103;
    branch_no_103:;
    {
        nuitka_bool tmp_condition_result_105;
        PyObject *tmp_compexpr_left_80;
        PyObject *tmp_compexpr_right_80;
        PyObject *tmp_tmp_condition_result_105_object_1;
        int tmp_truth_name_58;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_80 = var_opcode;
        tmp_compexpr_right_80 = const_int_pos_168;
        tmp_tmp_condition_result_105_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_80, tmp_compexpr_right_80);
        if (tmp_tmp_condition_result_105_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 792;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_58 = CHECK_IF_TRUE(tmp_tmp_condition_result_105_object_1);
        if (tmp_truth_name_58 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_105_object_1);

            exception_lineno = 792;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_105 = tmp_truth_name_58 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_105_object_1);
        if (tmp_condition_result_105 == NUITKA_BOOL_TRUE) {
            goto branch_yes_104;
        } else {
            goto branch_no_104;
        }
    }
    branch_yes_104:;
    {
        PyObject *tmp_assign_source_164;
        PyObject *tmp_called_instance_82;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_82 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 793;
        tmp_assign_source_164 = CALL_METHOD_NO_ARGS(tmp_called_instance_82, const_str_plain_pop);
        if (tmp_assign_source_164 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 793;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value2;
            var_value2 = tmp_assign_source_164;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_165;
        PyObject *tmp_called_instance_83;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_83 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 794;
        tmp_assign_source_165 = CALL_METHOD_NO_ARGS(tmp_called_instance_83, const_str_plain_pop);
        if (tmp_assign_source_165 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 794;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value1;
            var_value1 = tmp_assign_source_165;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_106;
        PyObject *tmp_operand_name_16;
        PyObject *tmp_isinstance_inst_25;
        PyObject *tmp_isinstance_cls_25;
        CHECK_OBJECT(var_value1);
        tmp_isinstance_inst_25 = var_value1;
        tmp_isinstance_cls_25 = (PyObject *)&PyLong_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_25, tmp_isinstance_cls_25);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 795;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_16 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_16);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 795;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_106 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_106 == NUITKA_BOOL_TRUE) {
            goto branch_yes_105;
        } else {
            goto branch_no_105;
        }
    }
    branch_yes_105:;
    {
        PyObject *tmp_raise_type_25;
        tmp_raise_type_25 = PyExc_AssertionError;
        exception_type = tmp_raise_type_25;
        Py_INCREF(tmp_raise_type_25);
        exception_lineno = 795;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_105:;
    {
        nuitka_bool tmp_condition_result_107;
        PyObject *tmp_operand_name_17;
        PyObject *tmp_isinstance_inst_26;
        PyObject *tmp_isinstance_cls_26;
        CHECK_OBJECT(var_value2);
        tmp_isinstance_inst_26 = var_value2;
        tmp_isinstance_cls_26 = (PyObject *)&PyLong_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_26, tmp_isinstance_cls_26);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 796;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_17 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_17);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 796;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_107 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_107 == NUITKA_BOOL_TRUE) {
            goto branch_yes_106;
        } else {
            goto branch_no_106;
        }
    }
    branch_yes_106:;
    {
        PyObject *tmp_raise_type_26;
        tmp_raise_type_26 = PyExc_AssertionError;
        exception_type = tmp_raise_type_26;
        Py_INCREF(tmp_raise_type_26);
        exception_lineno = 796;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_106:;
    {
        PyObject *tmp_assign_source_166;
        PyObject *tmp_left_name_19;
        PyObject *tmp_right_name_19;
        CHECK_OBJECT(var_value1);
        tmp_left_name_19 = var_value1;
        CHECK_OBJECT(var_value2);
        tmp_right_name_19 = var_value2;
        tmp_assign_source_166 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_OBJECT(tmp_left_name_19, tmp_right_name_19);
        if (tmp_assign_source_166 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 797;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_166;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_84;
        PyObject *tmp_call_result_47;
        PyObject *tmp_args_element_name_73;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_84 = var_stack;
        CHECK_OBJECT(var_res);
        tmp_args_element_name_73 = var_res;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 798;
        {
            PyObject *call_args[] = {tmp_args_element_name_73};
            tmp_call_result_47 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_84, const_str_plain_append, call_args);
        }

        if (tmp_call_result_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 798;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_47);
    }
    goto branch_end_104;
    branch_no_104:;
    {
        nuitka_bool tmp_condition_result_108;
        PyObject *tmp_compexpr_left_81;
        PyObject *tmp_compexpr_right_81;
        PyObject *tmp_tmp_condition_result_108_object_1;
        int tmp_truth_name_59;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_81 = var_opcode;
        tmp_compexpr_right_81 = const_int_pos_171;
        tmp_tmp_condition_result_108_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_81, tmp_compexpr_right_81);
        if (tmp_tmp_condition_result_108_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 799;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_59 = CHECK_IF_TRUE(tmp_tmp_condition_result_108_object_1);
        if (tmp_truth_name_59 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_108_object_1);

            exception_lineno = 799;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_108 = tmp_truth_name_59 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_108_object_1);
        if (tmp_condition_result_108 == NUITKA_BOOL_TRUE) {
            goto branch_yes_107;
        } else {
            goto branch_no_107;
        }
    }
    branch_yes_107:;
    {
        PyObject *tmp_assign_source_167;
        PyObject *tmp_called_instance_85;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_85 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 800;
        tmp_assign_source_167 = CALL_METHOD_NO_ARGS(tmp_called_instance_85, const_str_plain_pop);
        if (tmp_assign_source_167 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 800;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value2;
            var_value2 = tmp_assign_source_167;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_168;
        PyObject *tmp_called_instance_86;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_86 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 801;
        tmp_assign_source_168 = CALL_METHOD_NO_ARGS(tmp_called_instance_86, const_str_plain_pop);
        if (tmp_assign_source_168 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 801;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value1;
            var_value1 = tmp_assign_source_168;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_169;
        PyObject *tmp_compexpr_left_82;
        PyObject *tmp_compexpr_right_82;
        CHECK_OBJECT(var_value1);
        tmp_compexpr_left_82 = var_value1;
        CHECK_OBJECT(var_value2);
        tmp_compexpr_right_82 = var_value2;
        tmp_assign_source_169 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_82, tmp_compexpr_right_82);
        if (tmp_assign_source_169 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 802;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_result;
            var_result = tmp_assign_source_169;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_87;
        PyObject *tmp_call_result_48;
        PyObject *tmp_args_element_name_74;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_87 = var_stack;
        CHECK_OBJECT(var_result);
        tmp_args_element_name_74 = var_result;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 803;
        {
            PyObject *call_args[] = {tmp_args_element_name_74};
            tmp_call_result_48 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_87, const_str_plain_append, call_args);
        }

        if (tmp_call_result_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 803;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_48);
    }
    goto branch_end_107;
    branch_no_107:;
    {
        nuitka_bool tmp_condition_result_109;
        PyObject *tmp_compexpr_left_83;
        PyObject *tmp_compexpr_right_83;
        PyObject *tmp_tmp_condition_result_109_object_1;
        int tmp_truth_name_60;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_83 = var_opcode;
        tmp_compexpr_right_83 = const_int_pos_175;
        tmp_tmp_condition_result_109_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_83, tmp_compexpr_right_83);
        if (tmp_tmp_condition_result_109_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 804;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_60 = CHECK_IF_TRUE(tmp_tmp_condition_result_109_object_1);
        if (tmp_truth_name_60 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_109_object_1);

            exception_lineno = 804;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_109 = tmp_truth_name_60 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_109_object_1);
        if (tmp_condition_result_109 == NUITKA_BOOL_TRUE) {
            goto branch_yes_108;
        } else {
            goto branch_no_108;
        }
    }
    branch_yes_108:;
    {
        PyObject *tmp_assign_source_170;
        PyObject *tmp_called_instance_88;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_88 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 805;
        tmp_assign_source_170 = CALL_METHOD_NO_ARGS(tmp_called_instance_88, const_str_plain_pop);
        if (tmp_assign_source_170 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 805;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value2;
            var_value2 = tmp_assign_source_170;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_171;
        PyObject *tmp_called_instance_89;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_89 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 806;
        tmp_assign_source_171 = CALL_METHOD_NO_ARGS(tmp_called_instance_89, const_str_plain_pop);
        if (tmp_assign_source_171 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 806;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value1;
            var_value1 = tmp_assign_source_171;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_172;
        PyObject *tmp_compexpr_left_84;
        PyObject *tmp_compexpr_right_84;
        CHECK_OBJECT(var_value1);
        tmp_compexpr_left_84 = var_value1;
        CHECK_OBJECT(var_value2);
        tmp_compexpr_right_84 = var_value2;
        tmp_assign_source_172 = RICH_COMPARE_GE_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_84, tmp_compexpr_right_84);
        if (tmp_assign_source_172 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 807;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_result;
            var_result = tmp_assign_source_172;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_90;
        PyObject *tmp_call_result_49;
        PyObject *tmp_args_element_name_75;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_90 = var_stack;
        CHECK_OBJECT(var_result);
        tmp_args_element_name_75 = var_result;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 808;
        {
            PyObject *call_args[] = {tmp_args_element_name_75};
            tmp_call_result_49 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_90, const_str_plain_append, call_args);
        }

        if (tmp_call_result_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 808;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_49);
    }
    goto branch_end_108;
    branch_no_108:;
    {
        nuitka_bool tmp_condition_result_110;
        PyObject *tmp_compexpr_left_85;
        PyObject *tmp_compexpr_right_85;
        PyObject *tmp_tmp_condition_result_110_object_1;
        int tmp_truth_name_61;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_85 = var_opcode;
        tmp_compexpr_right_85 = const_int_pos_192;
        tmp_tmp_condition_result_110_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_85, tmp_compexpr_right_85);
        if (tmp_tmp_condition_result_110_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 809;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_61 = CHECK_IF_TRUE(tmp_tmp_condition_result_110_object_1);
        if (tmp_truth_name_61 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_110_object_1);

            exception_lineno = 809;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_110 = tmp_truth_name_61 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_110_object_1);
        if (tmp_condition_result_110 == NUITKA_BOOL_TRUE) {
            goto branch_yes_109;
        } else {
            goto branch_no_109;
        }
    }
    branch_yes_109:;
    {
        PyObject *tmp_assign_source_173;
        PyObject *tmp_called_instance_91;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_91 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 810;
        tmp_assign_source_173 = CALL_METHOD_NO_ARGS(tmp_called_instance_91, const_str_plain_pop);
        if (tmp_assign_source_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 810;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_173;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_111;
        PyObject *tmp_operand_name_18;
        PyObject *tmp_isinstance_inst_27;
        PyObject *tmp_isinstance_cls_27;
        CHECK_OBJECT(var_value);
        tmp_isinstance_inst_27 = var_value;
        tmp_isinstance_cls_27 = (PyObject *)&PyLong_Type;
        tmp_res = Nuitka_IsInstance(tmp_isinstance_inst_27, tmp_isinstance_cls_27);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 811;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_18 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_18);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 811;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_111 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_111 == NUITKA_BOOL_TRUE) {
            goto branch_yes_110;
        } else {
            goto branch_no_110;
        }
    }
    branch_yes_110:;
    {
        PyObject *tmp_raise_type_27;
        tmp_raise_type_27 = PyExc_AssertionError;
        exception_type = tmp_raise_type_27;
        Py_INCREF(tmp_raise_type_27);
        exception_lineno = 811;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_no_110:;
    {
        PyObject *tmp_called_name_69;
        PyObject *tmp_expression_name_91;
        PyObject *tmp_call_result_50;
        PyObject *tmp_args_element_name_76;
        PyObject *tmp_left_name_20;
        PyObject *tmp_right_name_20;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_91 = var_stack;
        tmp_called_name_69 = LOOKUP_ATTRIBUTE(tmp_expression_name_91, const_str_plain_append);
        if (tmp_called_name_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_value);
        tmp_left_name_20 = var_value;
        tmp_right_name_20 = const_int_pos_1;
        tmp_args_element_name_76 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_name_20, tmp_right_name_20);
        if (tmp_args_element_name_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_69);

            exception_lineno = 812;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 812;
        tmp_call_result_50 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_69, tmp_args_element_name_76);
        Py_DECREF(tmp_called_name_69);
        Py_DECREF(tmp_args_element_name_76);
        if (tmp_call_result_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 812;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_50);
    }
    goto branch_end_109;
    branch_no_109:;
    {
        nuitka_bool tmp_condition_result_112;
        PyObject *tmp_compexpr_left_86;
        PyObject *tmp_compexpr_right_86;
        PyObject *tmp_tmp_condition_result_112_object_1;
        int tmp_truth_name_62;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_86 = var_opcode;
        tmp_compexpr_right_86 = const_int_pos_208;
        tmp_tmp_condition_result_112_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_86, tmp_compexpr_right_86);
        if (tmp_tmp_condition_result_112_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 813;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_62 = CHECK_IF_TRUE(tmp_tmp_condition_result_112_object_1);
        if (tmp_truth_name_62 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_112_object_1);

            exception_lineno = 813;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_112 = tmp_truth_name_62 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_112_object_1);
        if (tmp_condition_result_112 == NUITKA_BOOL_TRUE) {
            goto branch_yes_111;
        } else {
            goto branch_no_111;
        }
    }
    branch_yes_111:;
    {
        PyObject *tmp_called_name_70;
        PyObject *tmp_expression_name_92;
        PyObject *tmp_call_result_51;
        PyObject *tmp_args_element_name_77;
        PyObject *tmp_expression_name_93;
        PyObject *tmp_subscript_name_37;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_92 = var_stack;
        tmp_called_name_70 = LOOKUP_ATTRIBUTE(tmp_expression_name_92, const_str_plain_append);
        if (tmp_called_name_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 814;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_registers);
        tmp_expression_name_93 = var_registers;
        tmp_subscript_name_37 = const_int_0;
        tmp_args_element_name_77 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_93, tmp_subscript_name_37, 0);
        if (tmp_args_element_name_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_70);

            exception_lineno = 814;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 814;
        tmp_call_result_51 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_70, tmp_args_element_name_77);
        Py_DECREF(tmp_called_name_70);
        Py_DECREF(tmp_args_element_name_77);
        if (tmp_call_result_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 814;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_51);
    }
    goto branch_end_111;
    branch_no_111:;
    {
        nuitka_bool tmp_condition_result_113;
        PyObject *tmp_compexpr_left_87;
        PyObject *tmp_compexpr_right_87;
        PyObject *tmp_tmp_condition_result_113_object_1;
        int tmp_truth_name_63;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_87 = var_opcode;
        tmp_compexpr_right_87 = const_int_pos_209;
        tmp_tmp_condition_result_113_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_87, tmp_compexpr_right_87);
        if (tmp_tmp_condition_result_113_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 815;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_63 = CHECK_IF_TRUE(tmp_tmp_condition_result_113_object_1);
        if (tmp_truth_name_63 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_113_object_1);

            exception_lineno = 815;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_113 = tmp_truth_name_63 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_113_object_1);
        if (tmp_condition_result_113 == NUITKA_BOOL_TRUE) {
            goto branch_yes_112;
        } else {
            goto branch_no_112;
        }
    }
    branch_yes_112:;
    {
        PyObject *tmp_called_name_71;
        PyObject *tmp_expression_name_94;
        PyObject *tmp_call_result_52;
        PyObject *tmp_args_element_name_78;
        PyObject *tmp_expression_name_95;
        PyObject *tmp_subscript_name_38;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_94 = var_stack;
        tmp_called_name_71 = LOOKUP_ATTRIBUTE(tmp_expression_name_94, const_str_plain_append);
        if (tmp_called_name_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 816;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_registers);
        tmp_expression_name_95 = var_registers;
        tmp_subscript_name_38 = const_int_pos_1;
        tmp_args_element_name_78 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_95, tmp_subscript_name_38, 1);
        if (tmp_args_element_name_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_71);

            exception_lineno = 816;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 816;
        tmp_call_result_52 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_71, tmp_args_element_name_78);
        Py_DECREF(tmp_called_name_71);
        Py_DECREF(tmp_args_element_name_78);
        if (tmp_call_result_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 816;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_52);
    }
    goto branch_end_112;
    branch_no_112:;
    {
        nuitka_bool tmp_condition_result_114;
        PyObject *tmp_compexpr_left_88;
        PyObject *tmp_compexpr_right_88;
        PyObject *tmp_tmp_condition_result_114_object_1;
        int tmp_truth_name_64;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_88 = var_opcode;
        tmp_compexpr_right_88 = const_int_pos_210;
        tmp_tmp_condition_result_114_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_88, tmp_compexpr_right_88);
        if (tmp_tmp_condition_result_114_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 817;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_64 = CHECK_IF_TRUE(tmp_tmp_condition_result_114_object_1);
        if (tmp_truth_name_64 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_114_object_1);

            exception_lineno = 817;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_114 = tmp_truth_name_64 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_114_object_1);
        if (tmp_condition_result_114 == NUITKA_BOOL_TRUE) {
            goto branch_yes_113;
        } else {
            goto branch_no_113;
        }
    }
    branch_yes_113:;
    {
        PyObject *tmp_called_name_72;
        PyObject *tmp_expression_name_96;
        PyObject *tmp_call_result_53;
        PyObject *tmp_args_element_name_79;
        PyObject *tmp_expression_name_97;
        PyObject *tmp_subscript_name_39;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_96 = var_stack;
        tmp_called_name_72 = LOOKUP_ATTRIBUTE(tmp_expression_name_96, const_str_plain_append);
        if (tmp_called_name_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 818;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_registers);
        tmp_expression_name_97 = var_registers;
        tmp_subscript_name_39 = const_int_pos_2;
        tmp_args_element_name_79 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_97, tmp_subscript_name_39, 2);
        if (tmp_args_element_name_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_72);

            exception_lineno = 818;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 818;
        tmp_call_result_53 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_72, tmp_args_element_name_79);
        Py_DECREF(tmp_called_name_72);
        Py_DECREF(tmp_args_element_name_79);
        if (tmp_call_result_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 818;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_53);
    }
    goto branch_end_113;
    branch_no_113:;
    {
        nuitka_bool tmp_condition_result_115;
        PyObject *tmp_compexpr_left_89;
        PyObject *tmp_compexpr_right_89;
        PyObject *tmp_tmp_condition_result_115_object_1;
        int tmp_truth_name_65;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_89 = var_opcode;
        tmp_compexpr_right_89 = const_int_pos_211;
        tmp_tmp_condition_result_115_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_89, tmp_compexpr_right_89);
        if (tmp_tmp_condition_result_115_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 819;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_65 = CHECK_IF_TRUE(tmp_tmp_condition_result_115_object_1);
        if (tmp_truth_name_65 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_115_object_1);

            exception_lineno = 819;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_115 = tmp_truth_name_65 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_115_object_1);
        if (tmp_condition_result_115 == NUITKA_BOOL_TRUE) {
            goto branch_yes_114;
        } else {
            goto branch_no_114;
        }
    }
    branch_yes_114:;
    {
        PyObject *tmp_called_name_73;
        PyObject *tmp_expression_name_98;
        PyObject *tmp_call_result_54;
        PyObject *tmp_args_element_name_80;
        PyObject *tmp_expression_name_99;
        PyObject *tmp_subscript_name_40;
        CHECK_OBJECT(var_stack);
        tmp_expression_name_98 = var_stack;
        tmp_called_name_73 = LOOKUP_ATTRIBUTE(tmp_expression_name_98, const_str_plain_append);
        if (tmp_called_name_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 820;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_registers);
        tmp_expression_name_99 = var_registers;
        tmp_subscript_name_40 = const_int_pos_3;
        tmp_args_element_name_80 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_99, tmp_subscript_name_40, 3);
        if (tmp_args_element_name_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_73);

            exception_lineno = 820;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 820;
        tmp_call_result_54 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_73, tmp_args_element_name_80);
        Py_DECREF(tmp_called_name_73);
        Py_DECREF(tmp_args_element_name_80);
        if (tmp_call_result_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 820;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_54);
    }
    goto branch_end_114;
    branch_no_114:;
    {
        nuitka_bool tmp_condition_result_116;
        PyObject *tmp_compexpr_left_90;
        PyObject *tmp_compexpr_right_90;
        PyObject *tmp_tmp_condition_result_116_object_1;
        int tmp_truth_name_66;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_90 = var_opcode;
        tmp_compexpr_right_90 = const_int_pos_212;
        tmp_tmp_condition_result_116_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_90, tmp_compexpr_right_90);
        if (tmp_tmp_condition_result_116_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 821;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_66 = CHECK_IF_TRUE(tmp_tmp_condition_result_116_object_1);
        if (tmp_truth_name_66 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_116_object_1);

            exception_lineno = 821;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_116 = tmp_truth_name_66 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_116_object_1);
        if (tmp_condition_result_116 == NUITKA_BOOL_TRUE) {
            goto branch_yes_115;
        } else {
            goto branch_no_115;
        }
    }
    branch_yes_115:;
    {
        PyObject *tmp_ass_subvalue_4;
        PyObject *tmp_called_instance_92;
        PyObject *tmp_ass_subscribed_4;
        PyObject *tmp_ass_subscript_4;
        int tmp_ass_subscript_res_1;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_92 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 822;
        tmp_ass_subvalue_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_92, const_str_plain_pop);
        if (tmp_ass_subvalue_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_registers);
        tmp_ass_subscribed_4 = var_registers;
        tmp_ass_subscript_4 = const_int_0;
        tmp_ass_subscript_res_1 = SET_SUBSCRIPT_CONST(tmp_ass_subscribed_4, tmp_ass_subscript_4, 0, tmp_ass_subvalue_4);
        Py_DECREF(tmp_ass_subvalue_4);
        if (tmp_ass_subscript_res_1 == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_115;
    branch_no_115:;
    {
        nuitka_bool tmp_condition_result_117;
        PyObject *tmp_compexpr_left_91;
        PyObject *tmp_compexpr_right_91;
        PyObject *tmp_tmp_condition_result_117_object_1;
        int tmp_truth_name_67;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_91 = var_opcode;
        tmp_compexpr_right_91 = const_int_pos_213;
        tmp_tmp_condition_result_117_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_91, tmp_compexpr_right_91);
        if (tmp_tmp_condition_result_117_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 823;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_67 = CHECK_IF_TRUE(tmp_tmp_condition_result_117_object_1);
        if (tmp_truth_name_67 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_117_object_1);

            exception_lineno = 823;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_117 = tmp_truth_name_67 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_117_object_1);
        if (tmp_condition_result_117 == NUITKA_BOOL_TRUE) {
            goto branch_yes_116;
        } else {
            goto branch_no_116;
        }
    }
    branch_yes_116:;
    {
        PyObject *tmp_ass_subvalue_5;
        PyObject *tmp_called_instance_93;
        PyObject *tmp_ass_subscribed_5;
        PyObject *tmp_ass_subscript_5;
        int tmp_ass_subscript_res_2;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_93 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 824;
        tmp_ass_subvalue_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_93, const_str_plain_pop);
        if (tmp_ass_subvalue_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 824;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_registers);
        tmp_ass_subscribed_5 = var_registers;
        tmp_ass_subscript_5 = const_int_pos_1;
        tmp_ass_subscript_res_2 = SET_SUBSCRIPT_CONST(tmp_ass_subscribed_5, tmp_ass_subscript_5, 1, tmp_ass_subvalue_5);
        Py_DECREF(tmp_ass_subvalue_5);
        if (tmp_ass_subscript_res_2 == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 824;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_116;
    branch_no_116:;
    {
        nuitka_bool tmp_condition_result_118;
        PyObject *tmp_compexpr_left_92;
        PyObject *tmp_compexpr_right_92;
        PyObject *tmp_tmp_condition_result_118_object_1;
        int tmp_truth_name_68;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_92 = var_opcode;
        tmp_compexpr_right_92 = const_int_pos_214;
        tmp_tmp_condition_result_118_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_92, tmp_compexpr_right_92);
        if (tmp_tmp_condition_result_118_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 825;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_68 = CHECK_IF_TRUE(tmp_tmp_condition_result_118_object_1);
        if (tmp_truth_name_68 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_118_object_1);

            exception_lineno = 825;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_118 = tmp_truth_name_68 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_118_object_1);
        if (tmp_condition_result_118 == NUITKA_BOOL_TRUE) {
            goto branch_yes_117;
        } else {
            goto branch_no_117;
        }
    }
    branch_yes_117:;
    {
        PyObject *tmp_ass_subvalue_6;
        PyObject *tmp_called_instance_94;
        PyObject *tmp_ass_subscribed_6;
        PyObject *tmp_ass_subscript_6;
        int tmp_ass_subscript_res_3;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_94 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 826;
        tmp_ass_subvalue_6 = CALL_METHOD_NO_ARGS(tmp_called_instance_94, const_str_plain_pop);
        if (tmp_ass_subvalue_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 826;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_registers);
        tmp_ass_subscribed_6 = var_registers;
        tmp_ass_subscript_6 = const_int_pos_2;
        tmp_ass_subscript_res_3 = SET_SUBSCRIPT_CONST(tmp_ass_subscribed_6, tmp_ass_subscript_6, 2, tmp_ass_subvalue_6);
        Py_DECREF(tmp_ass_subvalue_6);
        if (tmp_ass_subscript_res_3 == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 826;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_117;
    branch_no_117:;
    {
        nuitka_bool tmp_condition_result_119;
        PyObject *tmp_compexpr_left_93;
        PyObject *tmp_compexpr_right_93;
        PyObject *tmp_tmp_condition_result_119_object_1;
        int tmp_truth_name_69;
        CHECK_OBJECT(var_opcode);
        tmp_compexpr_left_93 = var_opcode;
        tmp_compexpr_right_93 = const_int_pos_215;
        tmp_tmp_condition_result_119_object_1 = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_compexpr_left_93, tmp_compexpr_right_93);
        if (tmp_tmp_condition_result_119_object_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 827;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_69 = CHECK_IF_TRUE(tmp_tmp_condition_result_119_object_1);
        if (tmp_truth_name_69 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_tmp_condition_result_119_object_1);

            exception_lineno = 827;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_119 = tmp_truth_name_69 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_tmp_condition_result_119_object_1);
        if (tmp_condition_result_119 == NUITKA_BOOL_TRUE) {
            goto branch_yes_118;
        } else {
            goto branch_no_118;
        }
    }
    branch_yes_118:;
    {
        PyObject *tmp_ass_subvalue_7;
        PyObject *tmp_called_instance_95;
        PyObject *tmp_ass_subscribed_7;
        PyObject *tmp_ass_subscript_7;
        int tmp_ass_subscript_res_4;
        CHECK_OBJECT(var_stack);
        tmp_called_instance_95 = var_stack;
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 828;
        tmp_ass_subvalue_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_95, const_str_plain_pop);
        if (tmp_ass_subvalue_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 828;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_registers);
        tmp_ass_subscribed_7 = var_registers;
        tmp_ass_subscript_7 = const_int_pos_3;
        tmp_ass_subscript_res_4 = SET_SUBSCRIPT_CONST(tmp_ass_subscribed_7, tmp_ass_subscript_7, 3, tmp_ass_subvalue_7);
        Py_DECREF(tmp_ass_subvalue_7);
        if (tmp_ass_subscript_res_4 == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 828;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_118;
    branch_no_118:;
    {
        PyObject *tmp_raise_type_28;
        PyObject *tmp_make_exception_arg_4;
        PyObject *tmp_left_name_21;
        PyObject *tmp_right_name_21;
        tmp_left_name_21 = const_str_digest_f866782662681036ee7f565dea7c3611;
        CHECK_OBJECT(var_opcode);
        tmp_right_name_21 = var_opcode;
        tmp_make_exception_arg_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_name_21, tmp_right_name_21);
        if (tmp_make_exception_arg_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 831;
            type_description_1 = "ocooooooooooooooooooooooooooccc";
            goto frame_exception_exit_1;
        }
        frame_2bea7bcff96360bb620189591cb6fbbc->m_frame.f_lineno = 830;
        tmp_raise_type_28 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_NotImplementedError, tmp_make_exception_arg_4);
        Py_DECREF(tmp_make_exception_arg_4);
        assert(!(tmp_raise_type_28 == NULL));
        exception_type = tmp_raise_type_28;
        exception_lineno = 830;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    branch_end_118:;
    branch_end_117:;
    branch_end_116:;
    branch_end_115:;
    branch_end_114:;
    branch_end_113:;
    branch_end_112:;
    branch_end_111:;
    branch_end_109:;
    branch_end_108:;
    branch_end_107:;
    branch_end_104:;
    branch_end_103:;
    branch_end_102:;
    branch_end_101:;
    branch_end_100:;
    branch_end_99:;
    branch_end_97:;
    branch_end_95:;
    branch_end_94:;
    branch_end_93:;
    branch_end_92:;
    branch_end_90:;
    branch_end_82:;
    branch_end_81:;
    branch_end_80:;
    branch_end_78:;
    branch_end_72:;
    branch_end_68:;
    branch_end_63:;
    branch_end_62:;
    branch_end_54:;
    branch_end_52:;
    branch_end_51:;
    branch_end_50:;
    branch_end_49:;
    branch_end_24:;
    branch_end_23:;
    branch_end_22:;
    branch_end_21:;
    branch_end_20:;
    branch_end_19:;
    branch_end_18:;
    branch_end_17:;
    branch_end_16:;
    branch_end_15:;
    branch_end_14:;
    branch_end_13:;
    branch_end_11:;
    branch_end_9:;
    branch_end_7:;
    branch_end_5:;
    branch_end_3:;
    branch_end_2:;
    branch_no_1:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 461;
        type_description_1 = "ocooooooooooooooooooooooooooccc";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2bea7bcff96360bb620189591cb6fbbc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_6;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_2bea7bcff96360bb620189591cb6fbbc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2bea7bcff96360bb620189591cb6fbbc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2bea7bcff96360bb620189591cb6fbbc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2bea7bcff96360bb620189591cb6fbbc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2bea7bcff96360bb620189591cb6fbbc, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2bea7bcff96360bb620189591cb6fbbc,
        type_description_1,
        par_args,
        var_coder,
        var_s24,
        var_u30,
        var_registers,
        var_stack,
        var_scopes,
        var_opcode,
        var_offset,
        var_value,
        var_value2,
        var_value1,
        var_v,
        var_idx,
        var_new_scope,
        var_arg_count,
        var_obj,
        var_res,
        var_index,
        var_mname,
        var_func,
        var_arr,
        var_i,
        var_s,
        var_scope,
        var_pname,
        var_intvalue,
        var_result,
        self->m_closure[1],
        self->m_closure[0],
        self->m_closure[2]
    );


    // Release cached frame.
    if (frame_2bea7bcff96360bb620189591cb6fbbc == cache_frame_2bea7bcff96360bb620189591cb6fbbc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_2bea7bcff96360bb620189591cb6fbbc);
    }
    cache_frame_2bea7bcff96360bb620189591cb6fbbc = NULL;

    assertFrameObject(frame_2bea7bcff96360bb620189591cb6fbbc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_6:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_args);
    par_args = NULL;

    CHECK_OBJECT(var_coder);
    Py_DECREF(var_coder);
    var_coder = NULL;

    CHECK_OBJECT(var_s24);
    Py_DECREF(var_s24);
    var_s24 = NULL;

    CHECK_OBJECT(var_u30);
    Py_DECREF(var_u30);
    var_u30 = NULL;

    CHECK_OBJECT(var_registers);
    Py_DECREF(var_registers);
    var_registers = NULL;

    CHECK_OBJECT(var_stack);
    Py_DECREF(var_stack);
    var_stack = NULL;

    CHECK_OBJECT(var_scopes);
    Py_DECREF(var_scopes);
    var_scopes = NULL;

    CHECK_OBJECT(var_opcode);
    Py_DECREF(var_opcode);
    var_opcode = NULL;

    Py_XDECREF(var_offset);
    var_offset = NULL;

    Py_XDECREF(var_value);
    var_value = NULL;

    Py_XDECREF(var_value2);
    var_value2 = NULL;

    Py_XDECREF(var_value1);
    var_value1 = NULL;

    Py_XDECREF(var_v);
    var_v = NULL;

    Py_XDECREF(var_idx);
    var_idx = NULL;

    Py_XDECREF(var_new_scope);
    var_new_scope = NULL;

    Py_XDECREF(var_arg_count);
    var_arg_count = NULL;

    Py_XDECREF(var_obj);
    var_obj = NULL;

    Py_XDECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_index);
    var_index = NULL;

    Py_XDECREF(var_mname);
    var_mname = NULL;

    Py_XDECREF(var_func);
    var_func = NULL;

    Py_XDECREF(var_arr);
    var_arr = NULL;

    Py_XDECREF(var_i);
    var_i = NULL;

    Py_XDECREF(var_s);
    var_s = NULL;

    Py_XDECREF(var_scope);
    var_scope = NULL;

    Py_XDECREF(var_pname);
    var_pname = NULL;

    Py_XDECREF(var_intvalue);
    var_intvalue = NULL;

    Py_XDECREF(var_result);
    var_result = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_args);
    par_args = NULL;

    CHECK_OBJECT(var_coder);
    Py_DECREF(var_coder);
    var_coder = NULL;

    Py_XDECREF(var_s24);
    var_s24 = NULL;

    Py_XDECREF(var_u30);
    var_u30 = NULL;

    Py_XDECREF(var_registers);
    var_registers = NULL;

    Py_XDECREF(var_stack);
    var_stack = NULL;

    Py_XDECREF(var_scopes);
    var_scopes = NULL;

    Py_XDECREF(var_opcode);
    var_opcode = NULL;

    Py_XDECREF(var_offset);
    var_offset = NULL;

    Py_XDECREF(var_value);
    var_value = NULL;

    Py_XDECREF(var_value2);
    var_value2 = NULL;

    Py_XDECREF(var_value1);
    var_value1 = NULL;

    Py_XDECREF(var_v);
    var_v = NULL;

    Py_XDECREF(var_idx);
    var_idx = NULL;

    Py_XDECREF(var_new_scope);
    var_new_scope = NULL;

    Py_XDECREF(var_arg_count);
    var_arg_count = NULL;

    Py_XDECREF(var_obj);
    var_obj = NULL;

    Py_XDECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_index);
    var_index = NULL;

    Py_XDECREF(var_mname);
    var_mname = NULL;

    Py_XDECREF(var_func);
    var_func = NULL;

    Py_XDECREF(var_arr);
    var_arr = NULL;

    Py_XDECREF(var_i);
    var_i = NULL;

    Py_XDECREF(var_s);
    var_s = NULL;

    Py_XDECREF(var_scope);
    var_scope = NULL;

    Py_XDECREF(var_pname);
    var_pname = NULL;

    Py_XDECREF(var_intvalue);
    var_intvalue = NULL;

    Py_XDECREF(var_result);
    var_result = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_1_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_fcb5f0341f85ccabb31f727618f4264b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_fcb5f0341f85ccabb31f727618f4264b = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_fcb5f0341f85ccabb31f727618f4264b)) {
        Py_XDECREF(cache_frame_fcb5f0341f85ccabb31f727618f4264b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_fcb5f0341f85ccabb31f727618f4264b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_fcb5f0341f85ccabb31f727618f4264b = MAKE_FUNCTION_FRAME(codeobj_fcb5f0341f85ccabb31f727618f4264b, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_fcb5f0341f85ccabb31f727618f4264b->m_type_description == NULL);
    frame_fcb5f0341f85ccabb31f727618f4264b = cache_frame_fcb5f0341f85ccabb31f727618f4264b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_fcb5f0341f85ccabb31f727618f4264b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_fcb5f0341f85ccabb31f727618f4264b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__s24);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__s24);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55897 ], 26, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 454;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "coder");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 454;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_1 = PyCell_GET(self->m_closure[0]);
        frame_fcb5f0341f85ccabb31f727618f4264b->m_frame.f_lineno = 454;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 454;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fcb5f0341f85ccabb31f727618f4264b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_fcb5f0341f85ccabb31f727618f4264b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fcb5f0341f85ccabb31f727618f4264b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_fcb5f0341f85ccabb31f727618f4264b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_fcb5f0341f85ccabb31f727618f4264b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_fcb5f0341f85ccabb31f727618f4264b, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_fcb5f0341f85ccabb31f727618f4264b,
        type_description_1,
        self->m_closure[0]
    );


    // Release cached frame.
    if (frame_fcb5f0341f85ccabb31f727618f4264b == cache_frame_fcb5f0341f85ccabb31f727618f4264b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_fcb5f0341f85ccabb31f727618f4264b);
    }
    cache_frame_fcb5f0341f85ccabb31f727618f4264b = NULL;

    assertFrameObject(frame_fcb5f0341f85ccabb31f727618f4264b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_2_lambda(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_119f65c96be4992d383ac7faa009955e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_119f65c96be4992d383ac7faa009955e = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_119f65c96be4992d383ac7faa009955e)) {
        Py_XDECREF(cache_frame_119f65c96be4992d383ac7faa009955e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_119f65c96be4992d383ac7faa009955e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_119f65c96be4992d383ac7faa009955e = MAKE_FUNCTION_FRAME(codeobj_119f65c96be4992d383ac7faa009955e, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_119f65c96be4992d383ac7faa009955e->m_type_description == NULL);
    frame_119f65c96be4992d383ac7faa009955e = cache_frame_119f65c96be4992d383ac7faa009955e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_119f65c96be4992d383ac7faa009955e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_119f65c96be4992d383ac7faa009955e) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__u30);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__u30);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55456 ], 26, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 455;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        if (PyCell_GET(self->m_closure[0]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyUnicode_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "coder");
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 455;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_1 = PyCell_GET(self->m_closure[0]);
        frame_119f65c96be4992d383ac7faa009955e->m_frame.f_lineno = 455;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 455;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_119f65c96be4992d383ac7faa009955e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_119f65c96be4992d383ac7faa009955e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_119f65c96be4992d383ac7faa009955e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_119f65c96be4992d383ac7faa009955e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_119f65c96be4992d383ac7faa009955e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_119f65c96be4992d383ac7faa009955e, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_119f65c96be4992d383ac7faa009955e,
        type_description_1,
        self->m_closure[0]
    );


    // Release cached frame.
    if (frame_119f65c96be4992d383ac7faa009955e == cache_frame_119f65c96be4992d383ac7faa009955e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(frame_119f65c96be4992d383ac7faa009955e);
    }
    cache_frame_119f65c96be4992d383ac7faa009955e = NULL;

    assertFrameObject(frame_119f65c96be4992d383ac7faa009955e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_10___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_10___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_e0b23cfba4466b5b6c567b94a099fc92,
#endif
        codeobj_a65444fc7d9e6d4ae61241a30298b3f5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_11___repr__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_11___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 300
        const_str_digest_87f8b45d724a0798dc3d51463493f085,
#endif
        codeobj_041e63b13dfb92036d580a4248e1d665,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_12__read_int() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_12__read_int,
        const_str_plain__read_int,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_f4df11dcdb4179ef241b09fa674aa7e0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_13__u30() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_13__u30,
        const_str_plain__u30,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_f73bef25feb220f5910559d7a7c03361,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_14__s32() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_14__s32,
        const_str_plain__s32,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_0d60609dbce7a262f5beaf5225aa7433,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_15__s24() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_15__s24,
        const_str_plain__s24,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_470f2459f8b202e458aae3f5b91790b9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_16__read_string() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_16__read_string,
        const_str_plain__read_string,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_79ca84cd05e5d6635637a63a34e8c213,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_17__read_bytes() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_17__read_bytes,
        const_str_plain__read_bytes,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_d1d003eb5581bda2b55347cf9afb4f57,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_18__read_byte() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_18__read_byte,
        const_str_plain__read_byte,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_e90da14c7bbe6b419d38b01c027f9ba2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_19___bool__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_19___bool__,
        const_str_plain___bool__,
#if PYTHON_VERSION >= 300
        const_str_digest_0d454f251b11c0758796a477e164899b,
#endif
        codeobj_9eae021c7fa04ec2da34d9f5baaefdd2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_1__extract_tags() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_1__extract_tags,
        const_str_plain__extract_tags,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_8ffd3619d4ffec31ba95b1f15d50bbce,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_20___hash__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_20___hash__,
        const_str_plain___hash__,
#if PYTHON_VERSION >= 300
        const_str_digest_6155550e3996b01873ca9067ae12e1cc,
#endif
        codeobj_dedd68ecc7475a0dbf5f5f2b8ec3ca28,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_21___str__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_21___str__,
        const_str_plain___str__,
#if PYTHON_VERSION >= 300
        const_str_digest_969823bee3abc6add74ba05d5d1cb5b2,
#endif
        codeobj_d33aa8da76e0ef79382c0e2e3c781477,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_22___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_7f2812528cf59ccce640cfc63b33d0b9,
#endif
        codeobj_364e3640986744e9c5fd6572b2388037,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_1_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_22___init__$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_1bf146c0adb9b85db5e8c86f20f4b311,
#endif
        codeobj_61831b29f7fc8b7d2b3ed8cf1926e0ff,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_2_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_22___init__$$$function_2_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_1bf146c0adb9b85db5e8c86f20f4b311,
#endif
        codeobj_c7571fbbe7d43be0d587eec3e1f09356,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_3_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_22___init__$$$function_3_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_1bf146c0adb9b85db5e8c86f20f4b311,
#endif
        codeobj_72a450eca9e5b990e6a49ab3df13f44f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_4_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_22___init__$$$function_4_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_1bf146c0adb9b85db5e8c86f20f4b311,
#endif
        codeobj_8cb613d3586e0801204bbaf0144128ff,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_5_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_22___init__$$$function_5_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_1bf146c0adb9b85db5e8c86f20f4b311,
#endif
        codeobj_afeea3dcc9e786e32fc3deed8cc5590e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_6_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_22___init__$$$function_6_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_1bf146c0adb9b85db5e8c86f20f4b311,
#endif
        codeobj_0e13d059172952bedfbb4183cc8b1865,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__$$$function_7_parse_traits_info() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_22___init__$$$function_7_parse_traits_info,
        const_str_plain_parse_traits_info,
#if PYTHON_VERSION >= 300
        const_str_digest_9a106de8a867c4f314789c7f75475ad4,
#endif
        codeobj_c7f299452f55c1d66752a520d5989713,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        3
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_23_patch_function() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_23_patch_function,
        const_str_plain_patch_function,
#if PYTHON_VERSION >= 300
        const_str_digest_1eb6262f1e4295521a44ae7158db40a9,
#endif
        codeobj_d2364f45a352fed77b77f90ee833242e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_24_extract_class(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_24_extract_class,
        const_str_plain_extract_class,
#if PYTHON_VERSION >= 300
        const_str_digest_9386cbf0909cc035dde799d9c5ec6244,
#endif
        codeobj_b18b668a85d56a6d033f7548ea794744,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_25_extract_function,
        const_str_plain_extract_function,
#if PYTHON_VERSION >= 300
        const_str_digest_65b78e631e18ba3990c368f2943c095f,
#endif
        codeobj_7737ff162a8fc8e608c9e8f0a1485cf4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc,
        const_str_plain_resfunc,
#if PYTHON_VERSION >= 300
        const_str_digest_37252c1d1e74b93062a8486f7d3007e9,
#endif
        codeobj_2bea7bcff96360bb620189591cb6fbbc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        3
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_1_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_9192069d2f89f52f179a3e58109e8bf3,
#endif
        codeobj_fcb5f0341f85ccabb31f727618f4264b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_2_lambda() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_2_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_9192069d2f89f52f179a3e58109e8bf3,
#endif
        codeobj_119f65c96be4992d383ac7faa009955e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_2___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_2___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_87d4a5f1d26952268876d006cac28f93,
#endif
        codeobj_283805eeeb827293beecfdc3bfc113c9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_3___repr__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_3___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 300
        const_str_digest_f3ea5cba1ddd556fe712544611fa8f54,
#endif
        codeobj_bc9efcd56f12620920108218e80bd4c2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_4___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_4___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_5948f3a910ff88494c82184b913c3701,
#endif
        codeobj_157ed9a9f582adf0edee1a09f3f32d3f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_5___repr__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_5___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 300
        const_str_digest_37faf075db7ea2b51d4f135bc484dff8,
#endif
        codeobj_6479d36875699dd5471e32bc922c77b9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_6___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_6___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_3fbae56d7f588ab8322deb4dfc663c6b,
#endif
        codeobj_c2a959eba4f1bd262e26d4cdbe370e49,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_7_make_object() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_7_make_object,
        const_str_plain_make_object,
#if PYTHON_VERSION >= 300
        const_str_digest_adbdf93c605f23183e482217a183dfa6,
#endif
        codeobj_682c55a4955c40e53523f5967dba0e18,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_8___repr__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_8___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 300
        const_str_digest_4fd465a1d245d08ca42071984d7117ab,
#endif
        codeobj_1c6f75d6156448f36f16bdb60cfc88ec,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_youtube_dl$swfinterp$$$function_9_register_methods() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_youtube_dl$swfinterp$$$function_9_register_methods,
        const_str_plain_register_methods,
#if PYTHON_VERSION >= 300
        const_str_digest_57983dd117c728618568f1df1cc1fb65,
#endif
        codeobj_6743d1541c747c72d49d9c3fe26785ae,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_youtube_dl$swfinterp,
        NULL,
        0
    );

    return (PyObject *)result;
}


extern PyObject *const_str_plain___compiled__;

extern PyObject *const_str_plain___package__;
extern PyObject *const_str_empty;

#if PYTHON_VERSION >= 300
extern PyObject *const_str_dot;
extern PyObject *const_str_plain___loader__;
#endif

#if PYTHON_VERSION >= 340
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain__initializing;
extern PyObject *const_str_plain_submodule_search_locations;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill

function_impl_code functable_youtube_dl$swfinterp[] = {
    impl_youtube_dl$swfinterp$$$function_22___init__$$$function_1_lambda,
    impl_youtube_dl$swfinterp$$$function_22___init__$$$function_2_lambda,
    impl_youtube_dl$swfinterp$$$function_22___init__$$$function_3_lambda,
    impl_youtube_dl$swfinterp$$$function_22___init__$$$function_4_lambda,
    impl_youtube_dl$swfinterp$$$function_22___init__$$$function_5_lambda,
    impl_youtube_dl$swfinterp$$$function_22___init__$$$function_6_lambda,
    impl_youtube_dl$swfinterp$$$function_22___init__$$$function_7_parse_traits_info,
    impl_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc,
    impl_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_1_lambda,
    impl_youtube_dl$swfinterp$$$function_25_extract_function$$$function_1_resfunc$$$function_2_lambda,
    impl_youtube_dl$swfinterp$$$function_1__extract_tags,
    impl_youtube_dl$swfinterp$$$function_2___init__,
    impl_youtube_dl$swfinterp$$$function_3___repr__,
    impl_youtube_dl$swfinterp$$$function_4___init__,
    impl_youtube_dl$swfinterp$$$function_5___repr__,
    impl_youtube_dl$swfinterp$$$function_6___init__,
    impl_youtube_dl$swfinterp$$$function_7_make_object,
    impl_youtube_dl$swfinterp$$$function_8___repr__,
    impl_youtube_dl$swfinterp$$$function_9_register_methods,
    impl_youtube_dl$swfinterp$$$function_10___init__,
    impl_youtube_dl$swfinterp$$$function_11___repr__,
    impl_youtube_dl$swfinterp$$$function_12__read_int,
    impl_youtube_dl$swfinterp$$$function_13__u30,
    impl_youtube_dl$swfinterp$$$function_14__s32,
    impl_youtube_dl$swfinterp$$$function_15__s24,
    impl_youtube_dl$swfinterp$$$function_16__read_string,
    impl_youtube_dl$swfinterp$$$function_17__read_bytes,
    impl_youtube_dl$swfinterp$$$function_18__read_byte,
    impl_youtube_dl$swfinterp$$$function_19___bool__,
    impl_youtube_dl$swfinterp$$$function_20___hash__,
    impl_youtube_dl$swfinterp$$$function_21___str__,
    impl_youtube_dl$swfinterp$$$function_22___init__,
    impl_youtube_dl$swfinterp$$$function_23_patch_function,
    impl_youtube_dl$swfinterp$$$function_24_extract_class,
    impl_youtube_dl$swfinterp$$$function_25_extract_function,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_youtube_dl$swfinterp;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_youtube_dl$swfinterp) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    // TODO: More stuff needed for Python3, best to re-order arguments of MAKE_CODEOBJECT.
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_youtube_dl$swfinterp[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_youtube_dl$swfinterp,
        doc,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_youtube_dl$swfinterp(PyObject *module) {
    module_youtube_dl$swfinterp = module;

#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if (_init_done) {
        return module_youtube_dl$swfinterp;
    } else {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // May have to activate constants blob.
#if defined(_NUITKA_CONSTANTS_FROM_RESOURCE)
    loadConstantsResource();
#endif

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    PRINT_STRING("youtube_dl.swfinterp: Calling setupMetaPathBasedLoader().\n");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    PRINT_STRING("youtube_dl.swfinterp: Calling createModuleConstants().\n");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    PRINT_STRING("youtube_dl.swfinterp: Calling createModuleCodeObjects().\n");
#endif
    createModuleCodeObjects();

    // PRINT_STRING("in inityoutube_dl$swfinterp\n");

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.

    moduledict_youtube_dl$swfinterp = MODULE_DICT(module_youtube_dl$swfinterp);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    {
        PyObject *function_tables = PyObject_GetAttrString((PyObject *)builtin_module, "compiled_function_tables");
        if (function_tables == NULL)
        {
            DROP_ERROR_OCCURRED();
            function_tables = PyDict_New();
        }
        PyObject_SetAttrString((PyObject *)builtin_module, "compiled_function_tables", function_tables);
        PyObject *funcs = PyTuple_New(2);
        PyTuple_SET_ITEM(funcs, 0, PyCFunction_New(&_method_def_reduce_compiled_function, NULL));
        PyTuple_SET_ITEM(funcs, 1, PyCFunction_New(&_method_def_create_compiled_function, NULL));
        PyDict_SetItemString(function_tables, module_full_name, funcs);
    }
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_youtube_dl$swfinterp,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_youtube_dl$swfinterp,
            (Nuitka_StringObject *)const_str_plain___package__,
            const_str_empty
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_youtube_dl$swfinterp,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL)
        {
            UPDATE_STRING_DICT1(
                moduledict_youtube_dl$swfinterp,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1)
        {
            UPDATE_STRING_DICT1(
                moduledict_youtube_dl$swfinterp,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_youtube_dl$swfinterp);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL)
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 300
    UPDATE_STRING_DICT0(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = PyImport_ImportModule("importlib._bootstrap");
        CHECK_OBJECT(bootstrap_module);
        PyObject *module_spec_class = PyObject_GetAttrString(bootstrap_module, "ModuleSpec");
        Py_DECREF(bootstrap_module);

        PyObject *args[] = {
            GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___name__),
            (PyObject *)&Nuitka_Loader_Type
        };

        PyObject *spec_value = CALL_FUNCTION_WITH_ARGS2(
            module_spec_class,
            args
        );
        Py_DECREF(module_spec_class);

        // We can assume this to never fail, or else we are in trouble anyway.
        CHECK_OBJECT(spec_value);

// For packages set the submodule search locations as well, even if to empty
// list, so investigating code will consider it a package.
#if 0
        SET_ATTRIBUTE(spec_value, const_str_plain_submodule_search_locations, PyList_New(0));
#endif

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    struct Nuitka_FrameObject *frame_92487a9911e920d214082b8d83df448b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_youtube_dl$swfinterp_47 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_603c721a23b126aa9a00b0e281a7cb3c_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_603c721a23b126aa9a00b0e281a7cb3c_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *locals_youtube_dl$swfinterp_55 = NULL;
    struct Nuitka_FrameObject *frame_ac278f6d269a2be601e0e20769453c1a_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_ac278f6d269a2be601e0e20769453c1a_3 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *locals_youtube_dl$swfinterp_66 = NULL;
    struct Nuitka_FrameObject *frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4 = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *locals_youtube_dl$swfinterp_92 = NULL;
    struct Nuitka_FrameObject *frame_6d759b5b3ee8116c519c7e999c235f17_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_6d759b5b3ee8116c519c7e999c235f17_5 = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *locals_youtube_dl$swfinterp_169 = NULL;
    struct Nuitka_FrameObject *frame_2be2265372af409d941aee637dfa7804_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2be2265372af409d941aee637dfa7804_6 = NULL;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *locals_youtube_dl$swfinterp_185 = NULL;
    struct Nuitka_FrameObject *frame_a14a632887d3cffbe1469c4ece0d1ec5_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a14a632887d3cffbe1469c4ece0d1ec5_7 = NULL;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = const_str_digest_61a7515409d9ef2e62d465ba6dc00f37;
        UPDATE_STRING_DICT0(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_92487a9911e920d214082b8d83df448b = MAKE_MODULE_FRAME(codeobj_92487a9911e920d214082b8d83df448b, module_youtube_dl$swfinterp);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_92487a9911e920d214082b8d83df448b);
    assert(Py_REFCNT(frame_92487a9911e920d214082b8d83df448b) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        PyObject *tmp_mvar_value_1;
        tmp_assattr_name_1 = const_str_digest_61a7515409d9ef2e62d465ba6dc00f37;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___spec__);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__);
        }

        CHECK_OBJECT(tmp_mvar_value_1);
        tmp_assattr_target_1 = tmp_mvar_value_1;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_origin, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_mvar_value_2;
        tmp_assattr_name_2 = Py_True;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___spec__);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__);
        }

        CHECK_OBJECT(tmp_mvar_value_2);
        tmp_assattr_target_2 = tmp_mvar_value_2;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_has_location, tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_import_name_from_1;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 1;
        tmp_import_name_from_1 = PyImport_ImportModule("__future__");
        assert(!(tmp_import_name_from_1 == NULL));
        if (PyModule_Check(tmp_import_name_from_1)) {
           tmp_assign_source_4 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_youtube_dl$swfinterp,
                const_str_plain_unicode_literals,
                const_int_0
            );
        } else {
           tmp_assign_source_4 = IMPORT_NAME(tmp_import_name_from_1, const_str_plain_unicode_literals);
        }

        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_unicode_literals, tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_collections;
        tmp_globals_name_1 = (PyObject *)moduledict_youtube_dl$swfinterp;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 3;
        tmp_assign_source_5 = IMPORT_MODULE5(tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_collections, tmp_assign_source_5);
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = const_str_plain_io;
        tmp_globals_name_2 = (PyObject *)moduledict_youtube_dl$swfinterp;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = Py_None;
        tmp_level_name_2 = const_int_0;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 4;
        tmp_assign_source_6 = IMPORT_MODULE5(tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_io, tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_name_3;
        PyObject *tmp_globals_name_3;
        PyObject *tmp_locals_name_3;
        PyObject *tmp_fromlist_name_3;
        PyObject *tmp_level_name_3;
        tmp_name_name_3 = const_str_plain_zlib;
        tmp_globals_name_3 = (PyObject *)moduledict_youtube_dl$swfinterp;
        tmp_locals_name_3 = Py_None;
        tmp_fromlist_name_3 = Py_None;
        tmp_level_name_3 = const_int_0;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 5;
        tmp_assign_source_7 = IMPORT_MODULE5(tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3);
        assert(!(tmp_assign_source_7 == NULL));
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_zlib, tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_name_name_4;
        PyObject *tmp_globals_name_4;
        PyObject *tmp_locals_name_4;
        PyObject *tmp_fromlist_name_4;
        PyObject *tmp_level_name_4;
        tmp_name_name_4 = const_str_plain_compat;
        tmp_globals_name_4 = (PyObject *)moduledict_youtube_dl$swfinterp;
        tmp_locals_name_4 = Py_None;
        tmp_fromlist_name_4 = const_tuple_str_plain_compat_str_str_plain_compat_struct_unpack_tuple;
        tmp_level_name_4 = const_int_pos_1;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 7;
        tmp_assign_source_8 = IMPORT_MODULE5(tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_1__module == NULL);
        tmp_import_from_1__module = tmp_assign_source_8;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_2 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_2)) {
           tmp_assign_source_9 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_2,
                (PyObject *)moduledict_youtube_dl$swfinterp,
                const_str_plain_compat_str,
                const_int_pos_1
            );
        } else {
           tmp_assign_source_9 = IMPORT_NAME(tmp_import_name_from_2, const_str_plain_compat_str);
        }

        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_str, tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_3;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_3 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_3)) {
           tmp_assign_source_10 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_3,
                (PyObject *)moduledict_youtube_dl$swfinterp,
                const_str_plain_compat_struct_unpack,
                const_int_pos_1
            );
        } else {
           tmp_assign_source_10 = IMPORT_NAME(tmp_import_name_from_3, const_str_plain_compat_struct_unpack);
        }

        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_compat_struct_unpack, tmp_assign_source_10);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;

    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_4;
        PyObject *tmp_name_name_5;
        PyObject *tmp_globals_name_5;
        PyObject *tmp_locals_name_5;
        PyObject *tmp_fromlist_name_5;
        PyObject *tmp_level_name_5;
        tmp_name_name_5 = const_str_plain_utils;
        tmp_globals_name_5 = (PyObject *)moduledict_youtube_dl$swfinterp;
        tmp_locals_name_5 = Py_None;
        tmp_fromlist_name_5 = const_tuple_str_plain_ExtractorError_tuple;
        tmp_level_name_5 = const_int_pos_1;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 11;
        tmp_import_name_from_4 = IMPORT_MODULE5(tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5);
        if (tmp_import_name_from_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 11;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_4)) {
           tmp_assign_source_11 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_4,
                (PyObject *)moduledict_youtube_dl$swfinterp,
                const_str_plain_ExtractorError,
                const_int_pos_1
            );
        } else {
           tmp_assign_source_11 = IMPORT_NAME(tmp_import_name_from_4, const_str_plain_ExtractorError);
        }

        Py_DECREF(tmp_import_name_from_4);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 11;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_ExtractorError, tmp_assign_source_11);
    }
    {
        PyObject *tmp_assign_source_12;
        tmp_assign_source_12 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_1__extract_tags();



        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__extract_tags, tmp_assign_source_12);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_dircall_arg1_1;
        tmp_dircall_arg1_1 = const_tuple_type_object_tuple;
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_13 = impl___internal__$$$function_4__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_13;
    }
    {
        PyObject *tmp_assign_source_14;
        tmp_assign_source_14 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_14;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_metaclass_name_1;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_name_1;
        PyObject *tmp_dict_name_2;
        PyObject *tmp_key_name_2;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_expression_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_bases_name_1;
        tmp_key_name_1 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_name_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_1, tmp_key_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_name_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_name_2 = const_str_plain_metaclass;
        tmp_metaclass_name_1 = DICT_GET_ITEM(tmp_dict_name_2, tmp_key_name_2);
        if (tmp_metaclass_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_expression_name_1 = tmp_class_creation_1__bases;
        tmp_subscript_name_1 = const_int_0;
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_1, tmp_subscript_name_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        tmp_metaclass_name_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_1);
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_name_1 = tmp_class_creation_1__bases;
        tmp_assign_source_15 = SELECT_METACLASS(tmp_metaclass_name_1, tmp_bases_name_1);
        Py_DECREF(tmp_metaclass_name_1);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_15;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_name_3;
        tmp_key_name_3 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_name_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_3, tmp_key_name_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 47;

        goto try_except_handler_2;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_expression_name_2;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_name_2 = tmp_class_creation_1__metaclass;
        tmp_res = PyObject_HasAttr(tmp_expression_name_2, const_str_plain___prepare__);
        tmp_condition_result_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_called_name_1;
        PyObject *tmp_expression_name_3;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_name_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_name_3 = tmp_class_creation_1__metaclass;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_3, const_str_plain___prepare__);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        tmp_tuple_element_1 = const_str_plain__AVMClass_Object;
        tmp_args_name_1 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_args_name_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_tuple_element_1 = tmp_class_creation_1__bases;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_args_name_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kw_name_1 = tmp_class_creation_1__class_decl_dict;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 47;
        tmp_assign_source_16 = CALL_FUNCTION(tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_name_1);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_16;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_expression_name_4;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_name_4 = tmp_class_creation_1__prepared;
        tmp_res = PyObject_HasAttr(tmp_expression_name_4, const_str_plain___getitem__);
        tmp_operand_name_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        tmp_condition_result_5 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        PyObject *tmp_expression_name_5;
        PyObject *tmp_type_arg_2;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_left_name_1 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
        tmp_getattr_attr_1 = const_str_plain___name__;
        tmp_getattr_default_1 = const_str_angle_metaclass;
        tmp_tuple_element_2 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        tmp_right_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_type_arg_2 = tmp_class_creation_1__prepared;
        tmp_expression_name_5 = BUILTIN_TYPE1(tmp_type_arg_2);
        assert(!(tmp_expression_name_5 == NULL));
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_5, const_str_plain___name__);
        Py_DECREF(tmp_expression_name_5);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_1);

            exception_lineno = 47;

            goto try_except_handler_2;
        }
        PyTuple_SET_ITEM(tmp_right_name_1, 1, tmp_tuple_element_2);
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_right_name_1);
        if (tmp_raise_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_2;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 47;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_2;
    }
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_17;
        tmp_assign_source_17 = PyDict_New();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_17;
    }
    branch_end_2:;
    {
        PyObject *tmp_assign_source_18;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_youtube_dl$swfinterp_47 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6902d3305bfc322b56c69792e0836667;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_47, const_str_plain___module__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_4;
        }
        tmp_dictset_value = const_str_plain__AVMClass_Object;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_47, const_str_plain___qualname__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_4;
        }
        if (isFrameUnusable(cache_frame_603c721a23b126aa9a00b0e281a7cb3c_2)) {
            Py_XDECREF(cache_frame_603c721a23b126aa9a00b0e281a7cb3c_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_603c721a23b126aa9a00b0e281a7cb3c_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_603c721a23b126aa9a00b0e281a7cb3c_2 = MAKE_FUNCTION_FRAME(codeobj_603c721a23b126aa9a00b0e281a7cb3c, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_603c721a23b126aa9a00b0e281a7cb3c_2->m_type_description == NULL);
        frame_603c721a23b126aa9a00b0e281a7cb3c_2 = cache_frame_603c721a23b126aa9a00b0e281a7cb3c_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_603c721a23b126aa9a00b0e281a7cb3c_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_603c721a23b126aa9a00b0e281a7cb3c_2) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_2___init__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_47, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_3___repr__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_47, const_str_plain___repr__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 51;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_603c721a23b126aa9a00b0e281a7cb3c_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_603c721a23b126aa9a00b0e281a7cb3c_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_603c721a23b126aa9a00b0e281a7cb3c_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_603c721a23b126aa9a00b0e281a7cb3c_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_603c721a23b126aa9a00b0e281a7cb3c_2, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_603c721a23b126aa9a00b0e281a7cb3c_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame.
        if (frame_603c721a23b126aa9a00b0e281a7cb3c_2 == cache_frame_603c721a23b126aa9a00b0e281a7cb3c_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_603c721a23b126aa9a00b0e281a7cb3c_2);
        }
        cache_frame_603c721a23b126aa9a00b0e281a7cb3c_2 = NULL;

        assertFrameObject(frame_603c721a23b126aa9a00b0e281a7cb3c_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_4;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_compexpr_left_1 = tmp_class_creation_1__bases;
            tmp_compexpr_right_1 = const_tuple_type_object_tuple;
            tmp_condition_result_6 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_compexpr_left_1, tmp_compexpr_right_1);
            if (tmp_condition_result_6 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 47;

                goto try_except_handler_4;
            }
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
        }
        branch_yes_4:;
        tmp_dictset_value = const_tuple_type_object_tuple;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_47, const_str_plain___orig_bases__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;

            goto try_except_handler_4;
        }
        branch_no_4:;
        {
            PyObject *tmp_assign_source_19;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_kw_name_2;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_name_2 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_3 = const_str_plain__AVMClass_Object;
            tmp_args_name_2 = PyTuple_New(3);
            Py_INCREF(tmp_tuple_element_3);
            PyTuple_SET_ITEM(tmp_args_name_2, 0, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_3 = tmp_class_creation_1__bases;
            Py_INCREF(tmp_tuple_element_3);
            PyTuple_SET_ITEM(tmp_args_name_2, 1, tmp_tuple_element_3);
            tmp_tuple_element_3 = locals_youtube_dl$swfinterp_47;
            Py_INCREF(tmp_tuple_element_3);
            PyTuple_SET_ITEM(tmp_args_name_2, 2, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kw_name_2 = tmp_class_creation_1__class_decl_dict;
            frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 47;
            tmp_assign_source_19 = CALL_FUNCTION(tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2);
            Py_DECREF(tmp_args_name_2);
            if (tmp_assign_source_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 47;

                goto try_except_handler_4;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_19;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_18 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_18);
        goto try_return_handler_4;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        Py_DECREF(locals_youtube_dl$swfinterp_47);
        locals_youtube_dl$swfinterp_47 = NULL;
        goto try_return_handler_3;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_youtube_dl$swfinterp_47);
        locals_youtube_dl$swfinterp_47 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 47;
        goto try_except_handler_2;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass_Object, tmp_assign_source_18);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;

    CHECK_OBJECT(tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;

    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_dircall_arg1_2;
        tmp_dircall_arg1_2 = const_tuple_type_dict_tuple;
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_20 = impl___internal__$$$function_4__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_20;
    }
    {
        PyObject *tmp_assign_source_21;
        tmp_assign_source_21 = PyDict_New();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_21;
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_metaclass_name_2;
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_key_name_4;
        PyObject *tmp_dict_name_4;
        PyObject *tmp_dict_name_5;
        PyObject *tmp_key_name_5;
        nuitka_bool tmp_condition_result_8;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_expression_name_6;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_bases_name_2;
        tmp_key_name_4 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_name_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_4, tmp_key_name_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        tmp_condition_result_7 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_3;
        } else {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_name_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_name_5 = const_str_plain_metaclass;
        tmp_metaclass_name_2 = DICT_GET_ITEM(tmp_dict_name_5, tmp_key_name_5);
        if (tmp_metaclass_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        goto condexpr_end_3;
        condexpr_false_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        tmp_condition_result_8 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_name_6 = tmp_class_creation_2__bases;
        tmp_subscript_name_2 = const_int_0;
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_6, tmp_subscript_name_2, 0);
        if (tmp_type_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        tmp_metaclass_name_2 = BUILTIN_TYPE1(tmp_type_arg_3);
        Py_DECREF(tmp_type_arg_3);
        if (tmp_metaclass_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_name_2 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_2);
        condexpr_end_4:;
        condexpr_end_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_name_2 = tmp_class_creation_2__bases;
        tmp_assign_source_22 = SELECT_METACLASS(tmp_metaclass_name_2, tmp_bases_name_2);
        Py_DECREF(tmp_metaclass_name_2);
        if (tmp_assign_source_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_22;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_key_name_6;
        PyObject *tmp_dict_name_6;
        tmp_key_name_6 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_name_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_6, tmp_key_name_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        tmp_condition_result_9 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 55;

        goto try_except_handler_5;
    }
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_expression_name_7;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_name_7 = tmp_class_creation_2__metaclass;
        tmp_res = PyObject_HasAttr(tmp_expression_name_7, const_str_plain___prepare__);
        tmp_condition_result_10 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_called_name_3;
        PyObject *tmp_expression_name_8;
        PyObject *tmp_args_name_3;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_kw_name_3;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_name_8 = tmp_class_creation_2__metaclass;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_8, const_str_plain___prepare__);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        tmp_tuple_element_4 = const_str_plain__ScopeDict;
        tmp_args_name_3 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_4);
        PyTuple_SET_ITEM(tmp_args_name_3, 0, tmp_tuple_element_4);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_4 = tmp_class_creation_2__bases;
        Py_INCREF(tmp_tuple_element_4);
        PyTuple_SET_ITEM(tmp_args_name_3, 1, tmp_tuple_element_4);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kw_name_3 = tmp_class_creation_2__class_decl_dict;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 55;
        tmp_assign_source_23 = CALL_FUNCTION(tmp_called_name_3, tmp_args_name_3, tmp_kw_name_3);
        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_args_name_3);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_23;
    }
    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_expression_name_9;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_name_9 = tmp_class_creation_2__prepared;
        tmp_res = PyObject_HasAttr(tmp_expression_name_9, const_str_plain___getitem__);
        tmp_operand_name_2 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        tmp_condition_result_11 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_raise_value_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_getattr_target_2;
        PyObject *tmp_getattr_attr_2;
        PyObject *tmp_getattr_default_2;
        PyObject *tmp_expression_name_10;
        PyObject *tmp_type_arg_4;
        tmp_raise_type_2 = PyExc_TypeError;
        tmp_left_name_2 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
        tmp_getattr_attr_2 = const_str_plain___name__;
        tmp_getattr_default_2 = const_str_angle_metaclass;
        tmp_tuple_element_5 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
        if (tmp_tuple_element_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        tmp_right_name_2 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_2, 0, tmp_tuple_element_5);
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_type_arg_4 = tmp_class_creation_2__prepared;
        tmp_expression_name_10 = BUILTIN_TYPE1(tmp_type_arg_4);
        assert(!(tmp_expression_name_10 == NULL));
        tmp_tuple_element_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_10, const_str_plain___name__);
        Py_DECREF(tmp_expression_name_10);
        if (tmp_tuple_element_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_2);

            exception_lineno = 55;

            goto try_except_handler_5;
        }
        PyTuple_SET_ITEM(tmp_right_name_2, 1, tmp_tuple_element_5);
        tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_2, tmp_right_name_2);
        Py_DECREF(tmp_right_name_2);
        if (tmp_raise_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_5;
        }
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_value = tmp_raise_value_2;
        exception_lineno = 55;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_5;
    }
    branch_no_7:;
    goto branch_end_6;
    branch_no_6:;
    {
        PyObject *tmp_assign_source_24;
        tmp_assign_source_24 = PyDict_New();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_24;
    }
    branch_end_6:;
    {
        PyObject *tmp_assign_source_25;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_youtube_dl$swfinterp_55 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6902d3305bfc322b56c69792e0836667;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_55, const_str_plain___module__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_7;
        }
        tmp_dictset_value = const_str_plain__ScopeDict;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_55, const_str_plain___qualname__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_7;
        }
        if (isFrameUnusable(cache_frame_ac278f6d269a2be601e0e20769453c1a_3)) {
            Py_XDECREF(cache_frame_ac278f6d269a2be601e0e20769453c1a_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_ac278f6d269a2be601e0e20769453c1a_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_ac278f6d269a2be601e0e20769453c1a_3 = MAKE_FUNCTION_FRAME(codeobj_ac278f6d269a2be601e0e20769453c1a, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_ac278f6d269a2be601e0e20769453c1a_3->m_type_description == NULL);
        frame_ac278f6d269a2be601e0e20769453c1a_3 = cache_frame_ac278f6d269a2be601e0e20769453c1a_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_ac278f6d269a2be601e0e20769453c1a_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_ac278f6d269a2be601e0e20769453c1a_3) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_4___init__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_55, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 56;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_5___repr__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_55, const_str_plain___repr__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 60;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ac278f6d269a2be601e0e20769453c1a_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ac278f6d269a2be601e0e20769453c1a_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ac278f6d269a2be601e0e20769453c1a_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ac278f6d269a2be601e0e20769453c1a_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ac278f6d269a2be601e0e20769453c1a_3, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ac278f6d269a2be601e0e20769453c1a_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame.
        if (frame_ac278f6d269a2be601e0e20769453c1a_3 == cache_frame_ac278f6d269a2be601e0e20769453c1a_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_ac278f6d269a2be601e0e20769453c1a_3);
        }
        cache_frame_ac278f6d269a2be601e0e20769453c1a_3 = NULL;

        assertFrameObject(frame_ac278f6d269a2be601e0e20769453c1a_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_7;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_compexpr_left_2 = tmp_class_creation_2__bases;
            tmp_compexpr_right_2 = const_tuple_type_dict_tuple;
            tmp_condition_result_12 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_compexpr_left_2, tmp_compexpr_right_2);
            if (tmp_condition_result_12 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 55;

                goto try_except_handler_7;
            }
            if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
        }
        branch_yes_8:;
        tmp_dictset_value = const_tuple_type_dict_tuple;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_55, const_str_plain___orig_bases__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;

            goto try_except_handler_7;
        }
        branch_no_8:;
        {
            PyObject *tmp_assign_source_26;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_name_4;
            PyObject *tmp_tuple_element_6;
            PyObject *tmp_kw_name_4;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_name_4 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_6 = const_str_plain__ScopeDict;
            tmp_args_name_4 = PyTuple_New(3);
            Py_INCREF(tmp_tuple_element_6);
            PyTuple_SET_ITEM(tmp_args_name_4, 0, tmp_tuple_element_6);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_6 = tmp_class_creation_2__bases;
            Py_INCREF(tmp_tuple_element_6);
            PyTuple_SET_ITEM(tmp_args_name_4, 1, tmp_tuple_element_6);
            tmp_tuple_element_6 = locals_youtube_dl$swfinterp_55;
            Py_INCREF(tmp_tuple_element_6);
            PyTuple_SET_ITEM(tmp_args_name_4, 2, tmp_tuple_element_6);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kw_name_4 = tmp_class_creation_2__class_decl_dict;
            frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 55;
            tmp_assign_source_26 = CALL_FUNCTION(tmp_called_name_4, tmp_args_name_4, tmp_kw_name_4);
            Py_DECREF(tmp_args_name_4);
            if (tmp_assign_source_26 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 55;

                goto try_except_handler_7;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_26;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_assign_source_25 = outline_1_var___class__;
        Py_INCREF(tmp_assign_source_25);
        goto try_return_handler_7;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        Py_DECREF(locals_youtube_dl$swfinterp_55);
        locals_youtube_dl$swfinterp_55 = NULL;
        goto try_return_handler_6;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_youtube_dl$swfinterp_55);
        locals_youtube_dl$swfinterp_55 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 55;
        goto try_except_handler_5;
        outline_result_2:;
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__ScopeDict, tmp_assign_source_25);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;

    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;

    CHECK_OBJECT(tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;

    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_dircall_arg1_3;
        tmp_dircall_arg1_3 = const_tuple_type_object_tuple;
        Py_INCREF(tmp_dircall_arg1_3);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_27 = impl___internal__$$$function_4__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_27;
    }
    {
        PyObject *tmp_assign_source_28;
        tmp_assign_source_28 = PyDict_New();
        assert(tmp_class_creation_3__class_decl_dict == NULL);
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_28;
    }
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_metaclass_name_3;
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_key_name_7;
        PyObject *tmp_dict_name_7;
        PyObject *tmp_dict_name_8;
        PyObject *tmp_key_name_8;
        nuitka_bool tmp_condition_result_14;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_expression_name_11;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_bases_name_3;
        tmp_key_name_7 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_name_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_7, tmp_key_name_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        tmp_condition_result_13 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_5;
        } else {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_name_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_name_8 = const_str_plain_metaclass;
        tmp_metaclass_name_3 = DICT_GET_ITEM(tmp_dict_name_8, tmp_key_name_8);
        if (tmp_metaclass_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        goto condexpr_end_5;
        condexpr_false_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_class_creation_3__bases);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        tmp_condition_result_14 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_6;
        } else {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_expression_name_11 = tmp_class_creation_3__bases;
        tmp_subscript_name_3 = const_int_0;
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_11, tmp_subscript_name_3, 0);
        if (tmp_type_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        tmp_metaclass_name_3 = BUILTIN_TYPE1(tmp_type_arg_5);
        Py_DECREF(tmp_type_arg_5);
        if (tmp_metaclass_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_name_3 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_3);
        condexpr_end_6:;
        condexpr_end_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_bases_name_3 = tmp_class_creation_3__bases;
        tmp_assign_source_29 = SELECT_METACLASS(tmp_metaclass_name_3, tmp_bases_name_3);
        Py_DECREF(tmp_metaclass_name_3);
        if (tmp_assign_source_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_29;
    }
    {
        nuitka_bool tmp_condition_result_15;
        PyObject *tmp_key_name_9;
        PyObject *tmp_dict_name_9;
        tmp_key_name_9 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_name_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_9, tmp_key_name_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        tmp_condition_result_15 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_15 == NUITKA_BOOL_TRUE) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 66;

        goto try_except_handler_8;
    }
    branch_no_9:;
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_expression_name_12;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_name_12 = tmp_class_creation_3__metaclass;
        tmp_res = PyObject_HasAttr(tmp_expression_name_12, const_str_plain___prepare__);
        tmp_condition_result_16 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_called_name_5;
        PyObject *tmp_expression_name_13;
        PyObject *tmp_args_name_5;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_kw_name_5;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_name_13 = tmp_class_creation_3__metaclass;
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_expression_name_13, const_str_plain___prepare__);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        tmp_tuple_element_7 = const_str_plain__AVMClass;
        tmp_args_name_5 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_7);
        PyTuple_SET_ITEM(tmp_args_name_5, 0, tmp_tuple_element_7);
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_tuple_element_7 = tmp_class_creation_3__bases;
        Py_INCREF(tmp_tuple_element_7);
        PyTuple_SET_ITEM(tmp_args_name_5, 1, tmp_tuple_element_7);
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_kw_name_5 = tmp_class_creation_3__class_decl_dict;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 66;
        tmp_assign_source_30 = CALL_FUNCTION(tmp_called_name_5, tmp_args_name_5, tmp_kw_name_5);
        Py_DECREF(tmp_called_name_5);
        Py_DECREF(tmp_args_name_5);
        if (tmp_assign_source_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_30;
    }
    {
        nuitka_bool tmp_condition_result_17;
        PyObject *tmp_operand_name_3;
        PyObject *tmp_expression_name_14;
        CHECK_OBJECT(tmp_class_creation_3__prepared);
        tmp_expression_name_14 = tmp_class_creation_3__prepared;
        tmp_res = PyObject_HasAttr(tmp_expression_name_14, const_str_plain___getitem__);
        tmp_operand_name_3 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        tmp_condition_result_17 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_raise_value_3;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_getattr_target_3;
        PyObject *tmp_getattr_attr_3;
        PyObject *tmp_getattr_default_3;
        PyObject *tmp_expression_name_15;
        PyObject *tmp_type_arg_6;
        tmp_raise_type_3 = PyExc_TypeError;
        tmp_left_name_3 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
        tmp_getattr_attr_3 = const_str_plain___name__;
        tmp_getattr_default_3 = const_str_angle_metaclass;
        tmp_tuple_element_8 = BUILTIN_GETATTR(tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3);
        if (tmp_tuple_element_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        tmp_right_name_3 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_3, 0, tmp_tuple_element_8);
        CHECK_OBJECT(tmp_class_creation_3__prepared);
        tmp_type_arg_6 = tmp_class_creation_3__prepared;
        tmp_expression_name_15 = BUILTIN_TYPE1(tmp_type_arg_6);
        assert(!(tmp_expression_name_15 == NULL));
        tmp_tuple_element_8 = LOOKUP_ATTRIBUTE(tmp_expression_name_15, const_str_plain___name__);
        Py_DECREF(tmp_expression_name_15);
        if (tmp_tuple_element_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_3);

            exception_lineno = 66;

            goto try_except_handler_8;
        }
        PyTuple_SET_ITEM(tmp_right_name_3, 1, tmp_tuple_element_8);
        tmp_raise_value_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_3, tmp_right_name_3);
        Py_DECREF(tmp_right_name_3);
        if (tmp_raise_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_8;
        }
        exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        exception_value = tmp_raise_value_3;
        exception_lineno = 66;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_8;
    }
    branch_no_11:;
    goto branch_end_10;
    branch_no_10:;
    {
        PyObject *tmp_assign_source_31;
        tmp_assign_source_31 = PyDict_New();
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_31;
    }
    branch_end_10:;
    {
        PyObject *tmp_assign_source_32;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_youtube_dl$swfinterp_66 = tmp_set_locals_3;
            Py_INCREF(tmp_set_locals_3);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6902d3305bfc322b56c69792e0836667;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_66, const_str_plain___module__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_10;
        }
        tmp_dictset_value = const_str_plain__AVMClass;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_66, const_str_plain___qualname__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_10;
        }
        if (isFrameUnusable(cache_frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4)) {
            Py_XDECREF(cache_frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4 = MAKE_FUNCTION_FRAME(codeobj_c98b5e991fbc2bc11c8cd0b5d23ffab5, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4->m_type_description == NULL);
        frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4 = cache_frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = const_tuple_none_tuple;
            Py_INCREF(tmp_defaults_1);
            tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_6___init__(tmp_defaults_1);



            tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_66, const_str_plain___init__, tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 67;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_7_make_object();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_66, const_str_plain_make_object, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_8___repr__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_66, const_str_plain___repr__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 82;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_9_register_methods();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_66, const_str_plain_register_methods, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 85;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame.
        if (frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4 == cache_frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4);
        }
        cache_frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4 = NULL;

        assertFrameObject(frame_c98b5e991fbc2bc11c8cd0b5d23ffab5_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_10;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_compexpr_left_3 = tmp_class_creation_3__bases;
            tmp_compexpr_right_3 = const_tuple_type_object_tuple;
            tmp_condition_result_18 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_compexpr_left_3, tmp_compexpr_right_3);
            if (tmp_condition_result_18 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 66;

                goto try_except_handler_10;
            }
            if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
                goto branch_yes_12;
            } else {
                goto branch_no_12;
            }
        }
        branch_yes_12:;
        tmp_dictset_value = const_tuple_type_object_tuple;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_66, const_str_plain___orig_bases__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;

            goto try_except_handler_10;
        }
        branch_no_12:;
        {
            PyObject *tmp_assign_source_33;
            PyObject *tmp_called_name_6;
            PyObject *tmp_args_name_6;
            PyObject *tmp_tuple_element_9;
            PyObject *tmp_kw_name_6;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_called_name_6 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_9 = const_str_plain__AVMClass;
            tmp_args_name_6 = PyTuple_New(3);
            Py_INCREF(tmp_tuple_element_9);
            PyTuple_SET_ITEM(tmp_args_name_6, 0, tmp_tuple_element_9);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_9 = tmp_class_creation_3__bases;
            Py_INCREF(tmp_tuple_element_9);
            PyTuple_SET_ITEM(tmp_args_name_6, 1, tmp_tuple_element_9);
            tmp_tuple_element_9 = locals_youtube_dl$swfinterp_66;
            Py_INCREF(tmp_tuple_element_9);
            PyTuple_SET_ITEM(tmp_args_name_6, 2, tmp_tuple_element_9);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kw_name_6 = tmp_class_creation_3__class_decl_dict;
            frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 66;
            tmp_assign_source_33 = CALL_FUNCTION(tmp_called_name_6, tmp_args_name_6, tmp_kw_name_6);
            Py_DECREF(tmp_args_name_6);
            if (tmp_assign_source_33 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 66;

                goto try_except_handler_10;
            }
            assert(outline_2_var___class__ == NULL);
            outline_2_var___class__ = tmp_assign_source_33;
        }
        CHECK_OBJECT(outline_2_var___class__);
        tmp_assign_source_32 = outline_2_var___class__;
        Py_INCREF(tmp_assign_source_32);
        goto try_return_handler_10;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_10:;
        Py_DECREF(locals_youtube_dl$swfinterp_66);
        locals_youtube_dl$swfinterp_66 = NULL;
        goto try_return_handler_9;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_youtube_dl$swfinterp_66);
        locals_youtube_dl$swfinterp_66 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT(outline_2_var___class__);
        Py_DECREF(outline_2_var___class__);
        outline_2_var___class__ = NULL;

        goto outline_result_3;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 66;
        goto try_except_handler_8;
        outline_result_3:;
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass, tmp_assign_source_32);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;

    Py_XDECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    Py_DECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;

    CHECK_OBJECT(tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;

    CHECK_OBJECT(tmp_class_creation_3__prepared);
    Py_DECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_dircall_arg1_4;
        tmp_dircall_arg1_4 = const_tuple_type_object_tuple;
        Py_INCREF(tmp_dircall_arg1_4);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
            tmp_assign_source_34 = impl___internal__$$$function_4__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        assert(tmp_class_creation_4__bases == NULL);
        tmp_class_creation_4__bases = tmp_assign_source_34;
    }
    {
        PyObject *tmp_assign_source_35;
        tmp_assign_source_35 = PyDict_New();
        assert(tmp_class_creation_4__class_decl_dict == NULL);
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_35;
    }
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_metaclass_name_4;
        nuitka_bool tmp_condition_result_19;
        PyObject *tmp_key_name_10;
        PyObject *tmp_dict_name_10;
        PyObject *tmp_dict_name_11;
        PyObject *tmp_key_name_11;
        nuitka_bool tmp_condition_result_20;
        int tmp_truth_name_4;
        PyObject *tmp_type_arg_7;
        PyObject *tmp_expression_name_16;
        PyObject *tmp_subscript_name_4;
        PyObject *tmp_bases_name_4;
        tmp_key_name_10 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_name_10 = tmp_class_creation_4__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_10, tmp_key_name_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        tmp_condition_result_19 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_19 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_7;
        } else {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_name_11 = tmp_class_creation_4__class_decl_dict;
        tmp_key_name_11 = const_str_plain_metaclass;
        tmp_metaclass_name_4 = DICT_GET_ITEM(tmp_dict_name_11, tmp_key_name_11);
        if (tmp_metaclass_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        goto condexpr_end_7;
        condexpr_false_7:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_class_creation_4__bases);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        tmp_condition_result_20 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_8;
        } else {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_expression_name_16 = tmp_class_creation_4__bases;
        tmp_subscript_name_4 = const_int_0;
        tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_16, tmp_subscript_name_4, 0);
        if (tmp_type_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        tmp_metaclass_name_4 = BUILTIN_TYPE1(tmp_type_arg_7);
        Py_DECREF(tmp_type_arg_7);
        if (tmp_metaclass_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        goto condexpr_end_8;
        condexpr_false_8:;
        tmp_metaclass_name_4 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_4);
        condexpr_end_8:;
        condexpr_end_7:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_bases_name_4 = tmp_class_creation_4__bases;
        tmp_assign_source_36 = SELECT_METACLASS(tmp_metaclass_name_4, tmp_bases_name_4);
        Py_DECREF(tmp_metaclass_name_4);
        if (tmp_assign_source_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        assert(tmp_class_creation_4__metaclass == NULL);
        tmp_class_creation_4__metaclass = tmp_assign_source_36;
    }
    {
        nuitka_bool tmp_condition_result_21;
        PyObject *tmp_key_name_12;
        PyObject *tmp_dict_name_12;
        tmp_key_name_12 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_name_12 = tmp_class_creation_4__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_12, tmp_key_name_12);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        tmp_condition_result_21 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_21 == NUITKA_BOOL_TRUE) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 92;

        goto try_except_handler_11;
    }
    branch_no_13:;
    {
        nuitka_bool tmp_condition_result_22;
        PyObject *tmp_expression_name_17;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_name_17 = tmp_class_creation_4__metaclass;
        tmp_res = PyObject_HasAttr(tmp_expression_name_17, const_str_plain___prepare__);
        tmp_condition_result_22 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_22 == NUITKA_BOOL_TRUE) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_called_name_7;
        PyObject *tmp_expression_name_18;
        PyObject *tmp_args_name_7;
        PyObject *tmp_tuple_element_10;
        PyObject *tmp_kw_name_7;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_name_18 = tmp_class_creation_4__metaclass;
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_expression_name_18, const_str_plain___prepare__);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        tmp_tuple_element_10 = const_str_plain__Multiname;
        tmp_args_name_7 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_10);
        PyTuple_SET_ITEM(tmp_args_name_7, 0, tmp_tuple_element_10);
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_tuple_element_10 = tmp_class_creation_4__bases;
        Py_INCREF(tmp_tuple_element_10);
        PyTuple_SET_ITEM(tmp_args_name_7, 1, tmp_tuple_element_10);
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_kw_name_7 = tmp_class_creation_4__class_decl_dict;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 92;
        tmp_assign_source_37 = CALL_FUNCTION(tmp_called_name_7, tmp_args_name_7, tmp_kw_name_7);
        Py_DECREF(tmp_called_name_7);
        Py_DECREF(tmp_args_name_7);
        if (tmp_assign_source_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_37;
    }
    {
        nuitka_bool tmp_condition_result_23;
        PyObject *tmp_operand_name_4;
        PyObject *tmp_expression_name_19;
        CHECK_OBJECT(tmp_class_creation_4__prepared);
        tmp_expression_name_19 = tmp_class_creation_4__prepared;
        tmp_res = PyObject_HasAttr(tmp_expression_name_19, const_str_plain___getitem__);
        tmp_operand_name_4 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        tmp_condition_result_23 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_23 == NUITKA_BOOL_TRUE) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        PyObject *tmp_raise_type_4;
        PyObject *tmp_raise_value_4;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        PyObject *tmp_tuple_element_11;
        PyObject *tmp_getattr_target_4;
        PyObject *tmp_getattr_attr_4;
        PyObject *tmp_getattr_default_4;
        PyObject *tmp_expression_name_20;
        PyObject *tmp_type_arg_8;
        tmp_raise_type_4 = PyExc_TypeError;
        tmp_left_name_4 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_getattr_target_4 = tmp_class_creation_4__metaclass;
        tmp_getattr_attr_4 = const_str_plain___name__;
        tmp_getattr_default_4 = const_str_angle_metaclass;
        tmp_tuple_element_11 = BUILTIN_GETATTR(tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4);
        if (tmp_tuple_element_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        tmp_right_name_4 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_4, 0, tmp_tuple_element_11);
        CHECK_OBJECT(tmp_class_creation_4__prepared);
        tmp_type_arg_8 = tmp_class_creation_4__prepared;
        tmp_expression_name_20 = BUILTIN_TYPE1(tmp_type_arg_8);
        assert(!(tmp_expression_name_20 == NULL));
        tmp_tuple_element_11 = LOOKUP_ATTRIBUTE(tmp_expression_name_20, const_str_plain___name__);
        Py_DECREF(tmp_expression_name_20);
        if (tmp_tuple_element_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_4);

            exception_lineno = 92;

            goto try_except_handler_11;
        }
        PyTuple_SET_ITEM(tmp_right_name_4, 1, tmp_tuple_element_11);
        tmp_raise_value_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_4, tmp_right_name_4);
        Py_DECREF(tmp_right_name_4);
        if (tmp_raise_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_11;
        }
        exception_type = tmp_raise_type_4;
        Py_INCREF(tmp_raise_type_4);
        exception_value = tmp_raise_value_4;
        exception_lineno = 92;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_11;
    }
    branch_no_15:;
    goto branch_end_14;
    branch_no_14:;
    {
        PyObject *tmp_assign_source_38;
        tmp_assign_source_38 = PyDict_New();
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_38;
    }
    branch_end_14:;
    {
        PyObject *tmp_assign_source_39;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_set_locals_4 = tmp_class_creation_4__prepared;
            locals_youtube_dl$swfinterp_92 = tmp_set_locals_4;
            Py_INCREF(tmp_set_locals_4);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6902d3305bfc322b56c69792e0836667;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_92, const_str_plain___module__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_13;
        }
        tmp_dictset_value = const_str_plain__Multiname;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_92, const_str_plain___qualname__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_13;
        }
        if (isFrameUnusable(cache_frame_6d759b5b3ee8116c519c7e999c235f17_5)) {
            Py_XDECREF(cache_frame_6d759b5b3ee8116c519c7e999c235f17_5);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6d759b5b3ee8116c519c7e999c235f17_5 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6d759b5b3ee8116c519c7e999c235f17_5 = MAKE_FUNCTION_FRAME(codeobj_6d759b5b3ee8116c519c7e999c235f17, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6d759b5b3ee8116c519c7e999c235f17_5->m_type_description == NULL);
        frame_6d759b5b3ee8116c519c7e999c235f17_5 = cache_frame_6d759b5b3ee8116c519c7e999c235f17_5;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6d759b5b3ee8116c519c7e999c235f17_5);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6d759b5b3ee8116c519c7e999c235f17_5) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_10___init__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_92, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 93;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_11___repr__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_92, const_str_plain___repr__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6d759b5b3ee8116c519c7e999c235f17_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6d759b5b3ee8116c519c7e999c235f17_5);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6d759b5b3ee8116c519c7e999c235f17_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6d759b5b3ee8116c519c7e999c235f17_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6d759b5b3ee8116c519c7e999c235f17_5, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6d759b5b3ee8116c519c7e999c235f17_5,
            type_description_2,
            outline_3_var___class__
        );


        // Release cached frame.
        if (frame_6d759b5b3ee8116c519c7e999c235f17_5 == cache_frame_6d759b5b3ee8116c519c7e999c235f17_5) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_6d759b5b3ee8116c519c7e999c235f17_5);
        }
        cache_frame_6d759b5b3ee8116c519c7e999c235f17_5 = NULL;

        assertFrameObject(frame_6d759b5b3ee8116c519c7e999c235f17_5);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;

        goto try_except_handler_13;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_compexpr_left_4 = tmp_class_creation_4__bases;
            tmp_compexpr_right_4 = const_tuple_type_object_tuple;
            tmp_condition_result_24 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_compexpr_left_4, tmp_compexpr_right_4);
            if (tmp_condition_result_24 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 92;

                goto try_except_handler_13;
            }
            if (tmp_condition_result_24 == NUITKA_BOOL_TRUE) {
                goto branch_yes_16;
            } else {
                goto branch_no_16;
            }
        }
        branch_yes_16:;
        tmp_dictset_value = const_tuple_type_object_tuple;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_92, const_str_plain___orig_bases__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;

            goto try_except_handler_13;
        }
        branch_no_16:;
        {
            PyObject *tmp_assign_source_40;
            PyObject *tmp_called_name_8;
            PyObject *tmp_args_name_8;
            PyObject *tmp_tuple_element_12;
            PyObject *tmp_kw_name_8;
            CHECK_OBJECT(tmp_class_creation_4__metaclass);
            tmp_called_name_8 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_12 = const_str_plain__Multiname;
            tmp_args_name_8 = PyTuple_New(3);
            Py_INCREF(tmp_tuple_element_12);
            PyTuple_SET_ITEM(tmp_args_name_8, 0, tmp_tuple_element_12);
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_tuple_element_12 = tmp_class_creation_4__bases;
            Py_INCREF(tmp_tuple_element_12);
            PyTuple_SET_ITEM(tmp_args_name_8, 1, tmp_tuple_element_12);
            tmp_tuple_element_12 = locals_youtube_dl$swfinterp_92;
            Py_INCREF(tmp_tuple_element_12);
            PyTuple_SET_ITEM(tmp_args_name_8, 2, tmp_tuple_element_12);
            CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
            tmp_kw_name_8 = tmp_class_creation_4__class_decl_dict;
            frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 92;
            tmp_assign_source_40 = CALL_FUNCTION(tmp_called_name_8, tmp_args_name_8, tmp_kw_name_8);
            Py_DECREF(tmp_args_name_8);
            if (tmp_assign_source_40 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 92;

                goto try_except_handler_13;
            }
            assert(outline_3_var___class__ == NULL);
            outline_3_var___class__ = tmp_assign_source_40;
        }
        CHECK_OBJECT(outline_3_var___class__);
        tmp_assign_source_39 = outline_3_var___class__;
        Py_INCREF(tmp_assign_source_39);
        goto try_return_handler_13;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_13:;
        Py_DECREF(locals_youtube_dl$swfinterp_92);
        locals_youtube_dl$swfinterp_92 = NULL;
        goto try_return_handler_12;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_youtube_dl$swfinterp_92);
        locals_youtube_dl$swfinterp_92 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto try_except_handler_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_12:;
        CHECK_OBJECT(outline_3_var___class__);
        Py_DECREF(outline_3_var___class__);
        outline_3_var___class__ = NULL;

        goto outline_result_4;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 92;
        goto try_except_handler_11;
        outline_result_4:;
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__Multiname, tmp_assign_source_39);
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;

    Py_XDECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;

    Py_XDECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT(tmp_class_creation_4__bases);
    Py_DECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;

    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    Py_DECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;

    CHECK_OBJECT(tmp_class_creation_4__metaclass);
    Py_DECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;

    CHECK_OBJECT(tmp_class_creation_4__prepared);
    Py_DECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;

    {
        PyObject *tmp_assign_source_41;
        tmp_assign_source_41 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_12__read_int();



        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_int, tmp_assign_source_41);
    }
    {
        PyObject *tmp_assign_source_42;
        tmp_assign_source_42 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_13__u30();



        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__u30, tmp_assign_source_42);
    }
    {
        PyObject *tmp_assign_source_43;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_int);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__read_int);
        }

        CHECK_OBJECT(tmp_mvar_value_3);
        tmp_assign_source_43 = tmp_mvar_value_3;
        UPDATE_STRING_DICT0(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__u32, tmp_assign_source_43);
    }
    {
        PyObject *tmp_assign_source_44;
        tmp_assign_source_44 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_14__s32();



        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__s32, tmp_assign_source_44);
    }
    {
        PyObject *tmp_assign_source_45;
        tmp_assign_source_45 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_15__s24();



        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__s24, tmp_assign_source_45);
    }
    {
        PyObject *tmp_assign_source_46;
        tmp_assign_source_46 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_16__read_string();



        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_string, tmp_assign_source_46);
    }
    {
        PyObject *tmp_assign_source_47;
        tmp_assign_source_47 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_17__read_bytes();



        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_bytes, tmp_assign_source_47);
    }
    {
        PyObject *tmp_assign_source_48;
        tmp_assign_source_48 = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_18__read_byte();



        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__read_byte, tmp_assign_source_48);
    }
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_called_name_9;
        PyObject *tmp_mvar_value_4;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass);
        }

        if (tmp_mvar_value_4 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55648 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 157;

            goto frame_exception_exit_1;
        }

        tmp_called_name_9 = tmp_mvar_value_4;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 157;
        tmp_assign_source_49 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_9, &PyTuple_GET_ITEM(const_tuple_str_digest_7d97e33f11eb226411bae601871b3089_str_plain_String_tuple, 0));

        if (tmp_assign_source_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_StringClass, tmp_assign_source_49);
    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_called_name_10;
        PyObject *tmp_mvar_value_5;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass);
        }

        if (tmp_mvar_value_5 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55648 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 158;

            goto frame_exception_exit_1;
        }

        tmp_called_name_10 = tmp_mvar_value_5;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 158;
        tmp_assign_source_50 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_10, &PyTuple_GET_ITEM(const_tuple_6c05aaa47e53a80809688f08cb2a5bc1_tuple, 0));

        if (tmp_assign_source_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 158;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_ByteArrayClass, tmp_assign_source_50);
    }
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_called_name_11;
        PyObject *tmp_mvar_value_6;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass);
        }

        if (tmp_mvar_value_6 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55648 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 159;

            goto frame_exception_exit_1;
        }

        tmp_called_name_11 = tmp_mvar_value_6;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 159;
        tmp_assign_source_51 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_11, &PyTuple_GET_ITEM(const_tuple_str_digest_7d97e33f11eb226411bae601871b3089_str_plain_Timer_tuple, 0));

        if (tmp_assign_source_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 159;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_TimerClass, tmp_assign_source_51);
    }
    {
        PyObject *tmp_assign_source_52;
        PyObject *tmp_called_name_12;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_call_arg_element_1;
        PyObject *tmp_call_arg_element_2;
        PyObject *tmp_call_arg_element_3;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__AVMClass);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__AVMClass);
        }

        if (tmp_mvar_value_7 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55648 ], 31, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 160;

            goto frame_exception_exit_1;
        }

        tmp_called_name_12 = tmp_mvar_value_7;
        tmp_call_arg_element_1 = const_str_digest_7d97e33f11eb226411bae601871b3089;
        tmp_call_arg_element_2 = const_str_plain_TimerEvent;
        tmp_call_arg_element_3 = PyDict_Copy(const_dict_9fc60418b4a2bc93fcbad012e8f7c578);
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 160;
        {
            PyObject *call_args[] = {tmp_call_arg_element_1, tmp_call_arg_element_2, tmp_call_arg_element_3};
            tmp_assign_source_52 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_12, call_args);
        }

        Py_DECREF(tmp_call_arg_element_3);
        if (tmp_assign_source_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 160;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_TimerEventClass, tmp_assign_source_52);
    }
    {
        PyObject *tmp_assign_source_53;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_name_21;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_mvar_value_9;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_expression_name_22;
        PyObject *tmp_mvar_value_10;
        PyObject *tmp_mvar_value_11;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_expression_name_23;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_mvar_value_13;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        PyObject *tmp_expression_name_24;
        PyObject *tmp_mvar_value_14;
        PyObject *tmp_mvar_value_15;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_StringClass);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_StringClass);
        }

        if (tmp_mvar_value_8 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55794 ], 33, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 162;

            goto frame_exception_exit_1;
        }

        tmp_expression_name_21 = tmp_mvar_value_8;
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_name_21, const_str_plain_name);
        if (tmp_dict_key_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_StringClass);

        if (unlikely(tmp_mvar_value_9 == NULL)) {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_StringClass);
        }

        if (tmp_mvar_value_9 == NULL) {
            Py_DECREF(tmp_dict_key_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55794 ], 33, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 162;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_1 = tmp_mvar_value_9;
        tmp_assign_source_53 = _PyDict_NewPresized( 4 );
        tmp_res = PyDict_SetItem(tmp_assign_source_53, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_key_1);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_53);

            exception_lineno = 161;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_ByteArrayClass);

        if (unlikely(tmp_mvar_value_10 == NULL)) {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_ByteArrayClass);
        }

        if (tmp_mvar_value_10 == NULL) {
            Py_DECREF(tmp_assign_source_53);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55923 ], 36, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 163;

            goto frame_exception_exit_1;
        }

        tmp_expression_name_22 = tmp_mvar_value_10;
        tmp_dict_key_2 = LOOKUP_ATTRIBUTE(tmp_expression_name_22, const_str_plain_name);
        if (tmp_dict_key_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_53);

            exception_lineno = 163;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_ByteArrayClass);

        if (unlikely(tmp_mvar_value_11 == NULL)) {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_ByteArrayClass);
        }

        if (tmp_mvar_value_11 == NULL) {
            Py_DECREF(tmp_assign_source_53);
            Py_DECREF(tmp_dict_key_2);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55923 ], 36, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 163;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_2 = tmp_mvar_value_11;
        tmp_res = PyDict_SetItem(tmp_assign_source_53, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_key_2);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_53);

            exception_lineno = 161;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_TimerClass);

        if (unlikely(tmp_mvar_value_12 == NULL)) {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_TimerClass);
        }

        if (tmp_mvar_value_12 == NULL) {
            Py_DECREF(tmp_assign_source_53);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55515 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 164;

            goto frame_exception_exit_1;
        }

        tmp_expression_name_23 = tmp_mvar_value_12;
        tmp_dict_key_3 = LOOKUP_ATTRIBUTE(tmp_expression_name_23, const_str_plain_name);
        if (tmp_dict_key_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_53);

            exception_lineno = 164;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_TimerClass);

        if (unlikely(tmp_mvar_value_13 == NULL)) {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_TimerClass);
        }

        if (tmp_mvar_value_13 == NULL) {
            Py_DECREF(tmp_assign_source_53);
            Py_DECREF(tmp_dict_key_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55515 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 164;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_3 = tmp_mvar_value_13;
        tmp_res = PyDict_SetItem(tmp_assign_source_53, tmp_dict_key_3, tmp_dict_value_3);
        Py_DECREF(tmp_dict_key_3);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_53);

            exception_lineno = 161;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_TimerEventClass);

        if (unlikely(tmp_mvar_value_14 == NULL)) {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_TimerEventClass);
        }

        if (tmp_mvar_value_14 == NULL) {
            Py_DECREF(tmp_assign_source_53);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55959 ], 37, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 165;

            goto frame_exception_exit_1;
        }

        tmp_expression_name_24 = tmp_mvar_value_14;
        tmp_dict_key_4 = LOOKUP_ATTRIBUTE(tmp_expression_name_24, const_str_plain_name);
        if (tmp_dict_key_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_53);

            exception_lineno = 165;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_15 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_TimerEventClass);

        if (unlikely(tmp_mvar_value_15 == NULL)) {
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_TimerEventClass);
        }

        if (tmp_mvar_value_15 == NULL) {
            Py_DECREF(tmp_assign_source_53);
            Py_DECREF(tmp_dict_key_4);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55959 ], 37, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 165;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_4 = tmp_mvar_value_15;
        tmp_res = PyDict_SetItem(tmp_assign_source_53, tmp_dict_key_4, tmp_dict_value_4);
        Py_DECREF(tmp_dict_key_4);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_assign_source_53);

            exception_lineno = 161;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__builtin_classes, tmp_assign_source_53);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_54;
        PyObject *tmp_dircall_arg1_5;
        tmp_dircall_arg1_5 = const_tuple_type_object_tuple;
        Py_INCREF(tmp_dircall_arg1_5);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_54 = impl___internal__$$$function_4__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_5__bases == NULL);
        tmp_class_creation_5__bases = tmp_assign_source_54;
    }
    {
        PyObject *tmp_assign_source_55;
        tmp_assign_source_55 = PyDict_New();
        assert(tmp_class_creation_5__class_decl_dict == NULL);
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_55;
    }
    {
        PyObject *tmp_assign_source_56;
        PyObject *tmp_metaclass_name_5;
        nuitka_bool tmp_condition_result_25;
        PyObject *tmp_key_name_13;
        PyObject *tmp_dict_name_13;
        PyObject *tmp_dict_name_14;
        PyObject *tmp_key_name_14;
        nuitka_bool tmp_condition_result_26;
        int tmp_truth_name_5;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_expression_name_25;
        PyObject *tmp_subscript_name_5;
        PyObject *tmp_bases_name_5;
        tmp_key_name_13 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_name_13 = tmp_class_creation_5__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_13, tmp_key_name_13);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        tmp_condition_result_25 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_9;
        } else {
            goto condexpr_false_9;
        }
        condexpr_true_9:;
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_name_14 = tmp_class_creation_5__class_decl_dict;
        tmp_key_name_14 = const_str_plain_metaclass;
        tmp_metaclass_name_5 = DICT_GET_ITEM(tmp_dict_name_14, tmp_key_name_14);
        if (tmp_metaclass_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        goto condexpr_end_9;
        condexpr_false_9:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_class_creation_5__bases);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        tmp_condition_result_26 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_26 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_10;
        } else {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_expression_name_25 = tmp_class_creation_5__bases;
        tmp_subscript_name_5 = const_int_0;
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_25, tmp_subscript_name_5, 0);
        if (tmp_type_arg_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        tmp_metaclass_name_5 = BUILTIN_TYPE1(tmp_type_arg_9);
        Py_DECREF(tmp_type_arg_9);
        if (tmp_metaclass_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        goto condexpr_end_10;
        condexpr_false_10:;
        tmp_metaclass_name_5 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_5);
        condexpr_end_10:;
        condexpr_end_9:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_bases_name_5 = tmp_class_creation_5__bases;
        tmp_assign_source_56 = SELECT_METACLASS(tmp_metaclass_name_5, tmp_bases_name_5);
        Py_DECREF(tmp_metaclass_name_5);
        if (tmp_assign_source_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_5__metaclass == NULL);
        tmp_class_creation_5__metaclass = tmp_assign_source_56;
    }
    {
        nuitka_bool tmp_condition_result_27;
        PyObject *tmp_key_name_15;
        PyObject *tmp_dict_name_15;
        tmp_key_name_15 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_name_15 = tmp_class_creation_5__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_15, tmp_key_name_15);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        tmp_condition_result_27 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_27 == NUITKA_BOOL_TRUE) {
            goto branch_yes_17;
        } else {
            goto branch_no_17;
        }
    }
    branch_yes_17:;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 169;

        goto try_except_handler_14;
    }
    branch_no_17:;
    {
        nuitka_bool tmp_condition_result_28;
        PyObject *tmp_expression_name_26;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_name_26 = tmp_class_creation_5__metaclass;
        tmp_res = PyObject_HasAttr(tmp_expression_name_26, const_str_plain___prepare__);
        tmp_condition_result_28 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_28 == NUITKA_BOOL_TRUE) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    {
        PyObject *tmp_assign_source_57;
        PyObject *tmp_called_name_13;
        PyObject *tmp_expression_name_27;
        PyObject *tmp_args_name_9;
        PyObject *tmp_tuple_element_13;
        PyObject *tmp_kw_name_9;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_name_27 = tmp_class_creation_5__metaclass;
        tmp_called_name_13 = LOOKUP_ATTRIBUTE(tmp_expression_name_27, const_str_plain___prepare__);
        if (tmp_called_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        tmp_tuple_element_13 = const_str_plain__Undefined;
        tmp_args_name_9 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_13);
        PyTuple_SET_ITEM(tmp_args_name_9, 0, tmp_tuple_element_13);
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_tuple_element_13 = tmp_class_creation_5__bases;
        Py_INCREF(tmp_tuple_element_13);
        PyTuple_SET_ITEM(tmp_args_name_9, 1, tmp_tuple_element_13);
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_kw_name_9 = tmp_class_creation_5__class_decl_dict;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 169;
        tmp_assign_source_57 = CALL_FUNCTION(tmp_called_name_13, tmp_args_name_9, tmp_kw_name_9);
        Py_DECREF(tmp_called_name_13);
        Py_DECREF(tmp_args_name_9);
        if (tmp_assign_source_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_57;
    }
    {
        nuitka_bool tmp_condition_result_29;
        PyObject *tmp_operand_name_5;
        PyObject *tmp_expression_name_28;
        CHECK_OBJECT(tmp_class_creation_5__prepared);
        tmp_expression_name_28 = tmp_class_creation_5__prepared;
        tmp_res = PyObject_HasAttr(tmp_expression_name_28, const_str_plain___getitem__);
        tmp_operand_name_5 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        tmp_condition_result_29 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_29 == NUITKA_BOOL_TRUE) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_raise_type_5;
        PyObject *tmp_raise_value_5;
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_5;
        PyObject *tmp_tuple_element_14;
        PyObject *tmp_getattr_target_5;
        PyObject *tmp_getattr_attr_5;
        PyObject *tmp_getattr_default_5;
        PyObject *tmp_expression_name_29;
        PyObject *tmp_type_arg_10;
        tmp_raise_type_5 = PyExc_TypeError;
        tmp_left_name_5 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_getattr_target_5 = tmp_class_creation_5__metaclass;
        tmp_getattr_attr_5 = const_str_plain___name__;
        tmp_getattr_default_5 = const_str_angle_metaclass;
        tmp_tuple_element_14 = BUILTIN_GETATTR(tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5);
        if (tmp_tuple_element_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        tmp_right_name_5 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_5, 0, tmp_tuple_element_14);
        CHECK_OBJECT(tmp_class_creation_5__prepared);
        tmp_type_arg_10 = tmp_class_creation_5__prepared;
        tmp_expression_name_29 = BUILTIN_TYPE1(tmp_type_arg_10);
        assert(!(tmp_expression_name_29 == NULL));
        tmp_tuple_element_14 = LOOKUP_ATTRIBUTE(tmp_expression_name_29, const_str_plain___name__);
        Py_DECREF(tmp_expression_name_29);
        if (tmp_tuple_element_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_5);

            exception_lineno = 169;

            goto try_except_handler_14;
        }
        PyTuple_SET_ITEM(tmp_right_name_5, 1, tmp_tuple_element_14);
        tmp_raise_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_5, tmp_right_name_5);
        Py_DECREF(tmp_right_name_5);
        if (tmp_raise_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_14;
        }
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_value = tmp_raise_value_5;
        exception_lineno = 169;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_14;
    }
    branch_no_19:;
    goto branch_end_18;
    branch_no_18:;
    {
        PyObject *tmp_assign_source_58;
        tmp_assign_source_58 = PyDict_New();
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_58;
    }
    branch_end_18:;
    {
        PyObject *tmp_assign_source_59;
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_set_locals_5 = tmp_class_creation_5__prepared;
            locals_youtube_dl$swfinterp_169 = tmp_set_locals_5;
            Py_INCREF(tmp_set_locals_5);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6902d3305bfc322b56c69792e0836667;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_169, const_str_plain___module__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_16;
        }
        tmp_dictset_value = const_str_plain__Undefined;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_169, const_str_plain___qualname__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_16;
        }
        if (isFrameUnusable(cache_frame_2be2265372af409d941aee637dfa7804_6)) {
            Py_XDECREF(cache_frame_2be2265372af409d941aee637dfa7804_6);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2be2265372af409d941aee637dfa7804_6 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2be2265372af409d941aee637dfa7804_6 = MAKE_FUNCTION_FRAME(codeobj_2be2265372af409d941aee637dfa7804, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2be2265372af409d941aee637dfa7804_6->m_type_description == NULL);
        frame_2be2265372af409d941aee637dfa7804_6 = cache_frame_2be2265372af409d941aee637dfa7804_6;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2be2265372af409d941aee637dfa7804_6);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2be2265372af409d941aee637dfa7804_6) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_19___bool__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_169, const_str_plain___bool__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 170;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = PyObject_GetItem(locals_youtube_dl$swfinterp_169, const_str_plain___bool__);

        if (tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55996 ], 30, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 172;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 172;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_169, const_str_plain___nonzero__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 172;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_20___hash__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_169, const_str_plain___hash__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_21___str__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_169, const_str_plain___str__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = PyObject_GetItem(locals_youtube_dl$swfinterp_169, const_str_plain___str__);

        if (tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 56026 ], 29, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 179;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 179;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_169, const_str_plain___repr__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 179;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2be2265372af409d941aee637dfa7804_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2be2265372af409d941aee637dfa7804_6);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2be2265372af409d941aee637dfa7804_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2be2265372af409d941aee637dfa7804_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2be2265372af409d941aee637dfa7804_6, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2be2265372af409d941aee637dfa7804_6,
            type_description_2,
            outline_4_var___class__
        );


        // Release cached frame.
        if (frame_2be2265372af409d941aee637dfa7804_6 == cache_frame_2be2265372af409d941aee637dfa7804_6) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_2be2265372af409d941aee637dfa7804_6);
        }
        cache_frame_2be2265372af409d941aee637dfa7804_6 = NULL;

        assertFrameObject(frame_2be2265372af409d941aee637dfa7804_6);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;

        goto try_except_handler_16;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_30;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_compexpr_left_5 = tmp_class_creation_5__bases;
            tmp_compexpr_right_5 = const_tuple_type_object_tuple;
            tmp_condition_result_30 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_compexpr_left_5, tmp_compexpr_right_5);
            if (tmp_condition_result_30 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;

                goto try_except_handler_16;
            }
            if (tmp_condition_result_30 == NUITKA_BOOL_TRUE) {
                goto branch_yes_20;
            } else {
                goto branch_no_20;
            }
        }
        branch_yes_20:;
        tmp_dictset_value = const_tuple_type_object_tuple;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_169, const_str_plain___orig_bases__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_16;
        }
        branch_no_20:;
        {
            PyObject *tmp_assign_source_60;
            PyObject *tmp_called_name_14;
            PyObject *tmp_args_name_10;
            PyObject *tmp_tuple_element_15;
            PyObject *tmp_kw_name_10;
            CHECK_OBJECT(tmp_class_creation_5__metaclass);
            tmp_called_name_14 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_15 = const_str_plain__Undefined;
            tmp_args_name_10 = PyTuple_New(3);
            Py_INCREF(tmp_tuple_element_15);
            PyTuple_SET_ITEM(tmp_args_name_10, 0, tmp_tuple_element_15);
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_tuple_element_15 = tmp_class_creation_5__bases;
            Py_INCREF(tmp_tuple_element_15);
            PyTuple_SET_ITEM(tmp_args_name_10, 1, tmp_tuple_element_15);
            tmp_tuple_element_15 = locals_youtube_dl$swfinterp_169;
            Py_INCREF(tmp_tuple_element_15);
            PyTuple_SET_ITEM(tmp_args_name_10, 2, tmp_tuple_element_15);
            CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
            tmp_kw_name_10 = tmp_class_creation_5__class_decl_dict;
            frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 169;
            tmp_assign_source_60 = CALL_FUNCTION(tmp_called_name_14, tmp_args_name_10, tmp_kw_name_10);
            Py_DECREF(tmp_args_name_10);
            if (tmp_assign_source_60 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;

                goto try_except_handler_16;
            }
            assert(outline_4_var___class__ == NULL);
            outline_4_var___class__ = tmp_assign_source_60;
        }
        CHECK_OBJECT(outline_4_var___class__);
        tmp_assign_source_59 = outline_4_var___class__;
        Py_INCREF(tmp_assign_source_59);
        goto try_return_handler_16;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_16:;
        Py_DECREF(locals_youtube_dl$swfinterp_169);
        locals_youtube_dl$swfinterp_169 = NULL;
        goto try_return_handler_15;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_youtube_dl$swfinterp_169);
        locals_youtube_dl$swfinterp_169 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto try_except_handler_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_15:;
        CHECK_OBJECT(outline_4_var___class__);
        Py_DECREF(outline_4_var___class__);
        outline_4_var___class__ = NULL;

        goto outline_result_5;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 169;
        goto try_except_handler_14;
        outline_result_5:;
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__Undefined, tmp_assign_source_59);
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;

    Py_XDECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;

    Py_XDECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT(tmp_class_creation_5__bases);
    Py_DECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;

    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    Py_DECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;

    CHECK_OBJECT(tmp_class_creation_5__metaclass);
    Py_DECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;

    CHECK_OBJECT(tmp_class_creation_5__prepared);
    Py_DECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;

    {
        PyObject *tmp_assign_source_61;
        PyObject *tmp_called_name_15;
        PyObject *tmp_mvar_value_16;
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain__Undefined);

        if (unlikely(tmp_mvar_value_16 == NULL)) {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain__Undefined);
        }

        if (tmp_mvar_value_16 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 55827 ], 32, 0);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 182;

            goto frame_exception_exit_1;
        }

        tmp_called_name_15 = tmp_mvar_value_16;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 182;
        tmp_assign_source_61 = CALL_FUNCTION_NO_ARGS(tmp_called_name_15);
        if (tmp_assign_source_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_undefined, tmp_assign_source_61);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_62;
        PyObject *tmp_dircall_arg1_6;
        tmp_dircall_arg1_6 = const_tuple_type_object_tuple;
        Py_INCREF(tmp_dircall_arg1_6);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
            tmp_assign_source_62 = impl___internal__$$$function_4__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        assert(tmp_class_creation_6__bases == NULL);
        tmp_class_creation_6__bases = tmp_assign_source_62;
    }
    {
        PyObject *tmp_assign_source_63;
        tmp_assign_source_63 = PyDict_New();
        assert(tmp_class_creation_6__class_decl_dict == NULL);
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_63;
    }
    {
        PyObject *tmp_assign_source_64;
        PyObject *tmp_metaclass_name_6;
        nuitka_bool tmp_condition_result_31;
        PyObject *tmp_key_name_16;
        PyObject *tmp_dict_name_16;
        PyObject *tmp_dict_name_17;
        PyObject *tmp_key_name_17;
        nuitka_bool tmp_condition_result_32;
        int tmp_truth_name_6;
        PyObject *tmp_type_arg_11;
        PyObject *tmp_expression_name_30;
        PyObject *tmp_subscript_name_6;
        PyObject *tmp_bases_name_6;
        tmp_key_name_16 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_name_16 = tmp_class_creation_6__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_16, tmp_key_name_16);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        tmp_condition_result_31 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_31 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_11;
        } else {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_name_17 = tmp_class_creation_6__class_decl_dict;
        tmp_key_name_17 = const_str_plain_metaclass;
        tmp_metaclass_name_6 = DICT_GET_ITEM(tmp_dict_name_17, tmp_key_name_17);
        if (tmp_metaclass_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        goto condexpr_end_11;
        condexpr_false_11:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_class_creation_6__bases);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        tmp_condition_result_32 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_32 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_12;
        } else {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_expression_name_30 = tmp_class_creation_6__bases;
        tmp_subscript_name_6 = const_int_0;
        tmp_type_arg_11 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_name_30, tmp_subscript_name_6, 0);
        if (tmp_type_arg_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        tmp_metaclass_name_6 = BUILTIN_TYPE1(tmp_type_arg_11);
        Py_DECREF(tmp_type_arg_11);
        if (tmp_metaclass_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        goto condexpr_end_12;
        condexpr_false_12:;
        tmp_metaclass_name_6 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_name_6);
        condexpr_end_12:;
        condexpr_end_11:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_bases_name_6 = tmp_class_creation_6__bases;
        tmp_assign_source_64 = SELECT_METACLASS(tmp_metaclass_name_6, tmp_bases_name_6);
        Py_DECREF(tmp_metaclass_name_6);
        if (tmp_assign_source_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        assert(tmp_class_creation_6__metaclass == NULL);
        tmp_class_creation_6__metaclass = tmp_assign_source_64;
    }
    {
        nuitka_bool tmp_condition_result_33;
        PyObject *tmp_key_name_18;
        PyObject *tmp_dict_name_18;
        tmp_key_name_18 = const_str_plain_metaclass;
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_name_18 = tmp_class_creation_6__class_decl_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_18, tmp_key_name_18);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        tmp_condition_result_33 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_33 == NUITKA_BOOL_TRUE) {
            goto branch_yes_21;
        } else {
            goto branch_no_21;
        }
    }
    branch_yes_21:;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 185;

        goto try_except_handler_17;
    }
    branch_no_21:;
    {
        nuitka_bool tmp_condition_result_34;
        PyObject *tmp_expression_name_31;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_name_31 = tmp_class_creation_6__metaclass;
        tmp_res = PyObject_HasAttr(tmp_expression_name_31, const_str_plain___prepare__);
        tmp_condition_result_34 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_34 == NUITKA_BOOL_TRUE) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_assign_source_65;
        PyObject *tmp_called_name_16;
        PyObject *tmp_expression_name_32;
        PyObject *tmp_args_name_11;
        PyObject *tmp_tuple_element_16;
        PyObject *tmp_kw_name_11;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_name_32 = tmp_class_creation_6__metaclass;
        tmp_called_name_16 = LOOKUP_ATTRIBUTE(tmp_expression_name_32, const_str_plain___prepare__);
        if (tmp_called_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        tmp_tuple_element_16 = const_str_plain_SWFInterpreter;
        tmp_args_name_11 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_16);
        PyTuple_SET_ITEM(tmp_args_name_11, 0, tmp_tuple_element_16);
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_tuple_element_16 = tmp_class_creation_6__bases;
        Py_INCREF(tmp_tuple_element_16);
        PyTuple_SET_ITEM(tmp_args_name_11, 1, tmp_tuple_element_16);
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_kw_name_11 = tmp_class_creation_6__class_decl_dict;
        frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 185;
        tmp_assign_source_65 = CALL_FUNCTION(tmp_called_name_16, tmp_args_name_11, tmp_kw_name_11);
        Py_DECREF(tmp_called_name_16);
        Py_DECREF(tmp_args_name_11);
        if (tmp_assign_source_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_65;
    }
    {
        nuitka_bool tmp_condition_result_35;
        PyObject *tmp_operand_name_6;
        PyObject *tmp_expression_name_33;
        CHECK_OBJECT(tmp_class_creation_6__prepared);
        tmp_expression_name_33 = tmp_class_creation_6__prepared;
        tmp_res = PyObject_HasAttr(tmp_expression_name_33, const_str_plain___getitem__);
        tmp_operand_name_6 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        tmp_condition_result_35 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_35 == NUITKA_BOOL_TRUE) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_raise_type_6;
        PyObject *tmp_raise_value_6;
        PyObject *tmp_left_name_6;
        PyObject *tmp_right_name_6;
        PyObject *tmp_tuple_element_17;
        PyObject *tmp_getattr_target_6;
        PyObject *tmp_getattr_attr_6;
        PyObject *tmp_getattr_default_6;
        PyObject *tmp_expression_name_34;
        PyObject *tmp_type_arg_12;
        tmp_raise_type_6 = PyExc_TypeError;
        tmp_left_name_6 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_getattr_target_6 = tmp_class_creation_6__metaclass;
        tmp_getattr_attr_6 = const_str_plain___name__;
        tmp_getattr_default_6 = const_str_angle_metaclass;
        tmp_tuple_element_17 = BUILTIN_GETATTR(tmp_getattr_target_6, tmp_getattr_attr_6, tmp_getattr_default_6);
        if (tmp_tuple_element_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        tmp_right_name_6 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_right_name_6, 0, tmp_tuple_element_17);
        CHECK_OBJECT(tmp_class_creation_6__prepared);
        tmp_type_arg_12 = tmp_class_creation_6__prepared;
        tmp_expression_name_34 = BUILTIN_TYPE1(tmp_type_arg_12);
        assert(!(tmp_expression_name_34 == NULL));
        tmp_tuple_element_17 = LOOKUP_ATTRIBUTE(tmp_expression_name_34, const_str_plain___name__);
        Py_DECREF(tmp_expression_name_34);
        if (tmp_tuple_element_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_right_name_6);

            exception_lineno = 185;

            goto try_except_handler_17;
        }
        PyTuple_SET_ITEM(tmp_right_name_6, 1, tmp_tuple_element_17);
        tmp_raise_value_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_name_6, tmp_right_name_6);
        Py_DECREF(tmp_right_name_6);
        if (tmp_raise_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_17;
        }
        exception_type = tmp_raise_type_6;
        Py_INCREF(tmp_raise_type_6);
        exception_value = tmp_raise_value_6;
        exception_lineno = 185;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_17;
    }
    branch_no_23:;
    goto branch_end_22;
    branch_no_22:;
    {
        PyObject *tmp_assign_source_66;
        tmp_assign_source_66 = PyDict_New();
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_66;
    }
    branch_end_22:;
    {
        PyObject *tmp_assign_source_67;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_set_locals_6 = tmp_class_creation_6__prepared;
            locals_youtube_dl$swfinterp_185 = tmp_set_locals_6;
            Py_INCREF(tmp_set_locals_6);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6902d3305bfc322b56c69792e0836667;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_185, const_str_plain___module__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_19;
        }
        tmp_dictset_value = const_str_plain_SWFInterpreter;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_185, const_str_plain___qualname__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_19;
        }
        if (isFrameUnusable(cache_frame_a14a632887d3cffbe1469c4ece0d1ec5_7)) {
            Py_XDECREF(cache_frame_a14a632887d3cffbe1469c4ece0d1ec5_7);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a14a632887d3cffbe1469c4ece0d1ec5_7 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a14a632887d3cffbe1469c4ece0d1ec5_7 = MAKE_FUNCTION_FRAME(codeobj_a14a632887d3cffbe1469c4ece0d1ec5, module_youtube_dl$swfinterp, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a14a632887d3cffbe1469c4ece0d1ec5_7->m_type_description == NULL);
        frame_a14a632887d3cffbe1469c4ece0d1ec5_7 = cache_frame_a14a632887d3cffbe1469c4ece0d1ec5_7;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a14a632887d3cffbe1469c4ece0d1ec5_7);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a14a632887d3cffbe1469c4ece0d1ec5_7) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_22___init__();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_185, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_23_patch_function();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_185, const_str_plain_patch_function, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 421;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        {
            PyObject *tmp_defaults_2;
            tmp_defaults_2 = const_tuple_true_tuple;
            Py_INCREF(tmp_defaults_2);
            tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_24_extract_class(tmp_defaults_2);



            tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_185, const_str_plain_extract_class, tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 424;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_youtube_dl$swfinterp$$$function_25_extract_function();



        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_185, const_str_plain_extract_function, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 438;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a14a632887d3cffbe1469c4ece0d1ec5_7);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a14a632887d3cffbe1469c4ece0d1ec5_7);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a14a632887d3cffbe1469c4ece0d1ec5_7, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a14a632887d3cffbe1469c4ece0d1ec5_7->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a14a632887d3cffbe1469c4ece0d1ec5_7, exception_lineno);
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a14a632887d3cffbe1469c4ece0d1ec5_7,
            type_description_2,
            outline_5_var___class__
        );


        // Release cached frame.
        if (frame_a14a632887d3cffbe1469c4ece0d1ec5_7 == cache_frame_a14a632887d3cffbe1469c4ece0d1ec5_7) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(frame_a14a632887d3cffbe1469c4ece0d1ec5_7);
        }
        cache_frame_a14a632887d3cffbe1469c4ece0d1ec5_7 = NULL;

        assertFrameObject(frame_a14a632887d3cffbe1469c4ece0d1ec5_7);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;

        goto try_except_handler_19;
        skip_nested_handling_6:;
        {
            nuitka_bool tmp_condition_result_36;
            PyObject *tmp_compexpr_left_6;
            PyObject *tmp_compexpr_right_6;
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_compexpr_left_6 = tmp_class_creation_6__bases;
            tmp_compexpr_right_6 = const_tuple_type_object_tuple;
            tmp_condition_result_36 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_compexpr_left_6, tmp_compexpr_right_6);
            if (tmp_condition_result_36 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 185;

                goto try_except_handler_19;
            }
            if (tmp_condition_result_36 == NUITKA_BOOL_TRUE) {
                goto branch_yes_24;
            } else {
                goto branch_no_24;
            }
        }
        branch_yes_24:;
        tmp_dictset_value = const_tuple_type_object_tuple;
        tmp_res = PyObject_SetItem(locals_youtube_dl$swfinterp_185, const_str_plain___orig_bases__, tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 185;

            goto try_except_handler_19;
        }
        branch_no_24:;
        {
            PyObject *tmp_assign_source_68;
            PyObject *tmp_called_name_17;
            PyObject *tmp_args_name_12;
            PyObject *tmp_tuple_element_18;
            PyObject *tmp_kw_name_12;
            CHECK_OBJECT(tmp_class_creation_6__metaclass);
            tmp_called_name_17 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_18 = const_str_plain_SWFInterpreter;
            tmp_args_name_12 = PyTuple_New(3);
            Py_INCREF(tmp_tuple_element_18);
            PyTuple_SET_ITEM(tmp_args_name_12, 0, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_tuple_element_18 = tmp_class_creation_6__bases;
            Py_INCREF(tmp_tuple_element_18);
            PyTuple_SET_ITEM(tmp_args_name_12, 1, tmp_tuple_element_18);
            tmp_tuple_element_18 = locals_youtube_dl$swfinterp_185;
            Py_INCREF(tmp_tuple_element_18);
            PyTuple_SET_ITEM(tmp_args_name_12, 2, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
            tmp_kw_name_12 = tmp_class_creation_6__class_decl_dict;
            frame_92487a9911e920d214082b8d83df448b->m_frame.f_lineno = 185;
            tmp_assign_source_68 = CALL_FUNCTION(tmp_called_name_17, tmp_args_name_12, tmp_kw_name_12);
            Py_DECREF(tmp_args_name_12);
            if (tmp_assign_source_68 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 185;

                goto try_except_handler_19;
            }
            assert(outline_5_var___class__ == NULL);
            outline_5_var___class__ = tmp_assign_source_68;
        }
        CHECK_OBJECT(outline_5_var___class__);
        tmp_assign_source_67 = outline_5_var___class__;
        Py_INCREF(tmp_assign_source_67);
        goto try_return_handler_19;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_19:;
        Py_DECREF(locals_youtube_dl$swfinterp_185);
        locals_youtube_dl$swfinterp_185 = NULL;
        goto try_return_handler_18;
        // Exception handler code:
        try_except_handler_19:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_youtube_dl$swfinterp_185);
        locals_youtube_dl$swfinterp_185 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto try_except_handler_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_18:;
        CHECK_OBJECT(outline_5_var___class__);
        Py_DECREF(outline_5_var___class__);
        outline_5_var___class__ = NULL;

        goto outline_result_6;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_18 = exception_type;
        exception_keeper_value_18 = exception_value;
        exception_keeper_tb_18 = exception_tb;
        exception_keeper_lineno_18 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;
        exception_lineno = exception_keeper_lineno_18;

        goto outline_exception_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_6:;
        exception_lineno = 185;
        goto try_except_handler_17;
        outline_result_6:;
        UPDATE_STRING_DICT1(moduledict_youtube_dl$swfinterp, (Nuitka_StringObject *)const_str_plain_SWFInterpreter, tmp_assign_source_67);
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;

    Py_XDECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;

    Py_XDECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;

    Py_XDECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_92487a9911e920d214082b8d83df448b);
#endif
    popFrameStack();

    assertFrameObject(frame_92487a9911e920d214082b8d83df448b);

    goto frame_no_exception_7;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_92487a9911e920d214082b8d83df448b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_92487a9911e920d214082b8d83df448b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_92487a9911e920d214082b8d83df448b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_92487a9911e920d214082b8d83df448b, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_7:;
    CHECK_OBJECT(tmp_class_creation_6__bases);
    Py_DECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;

    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    Py_DECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;

    CHECK_OBJECT(tmp_class_creation_6__metaclass);
    Py_DECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;

    CHECK_OBJECT(tmp_class_creation_6__prepared);
    Py_DECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;


    return module_youtube_dl$swfinterp;
    module_exception_exit:
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}
